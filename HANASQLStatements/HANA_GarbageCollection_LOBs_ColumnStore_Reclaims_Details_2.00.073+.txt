SELECT

/* 

[NAME]

- HANA_GarbageCollection_LOBs_ColumnStore_Reclaims_Details_2.00.073+

[DESCRIPTION]

- Detailed column store LOB reclaim operations (including table names)

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]

- M_CS_LOB_SPACE_RECLAIM_DETAILS and HOST_CS_LOB_SPACE_RECLAIMS available with SAP HANA >= 2.00.073
- History table HOST_CS_LOB_SPACE_RECLAIM_DETAILS contains duplicates (bug 317587)
- Retention time of history is only 7 days rather than 42 days (bug 317588)

[VALID FOR]

- Revisions:              >= 2.00.073

[SQL COMMAND VERSION]

- 2023/12/09:  1.0 (initial version)

[INVOLVED TABLES]

- HOST_CS_LOB_SPACE_RECLAIM_DETAILS
- M_CS_LOB_SPACE_RECLAIM_DETAILS

[INPUT PARAMETERS]

- BEGIN_TIME

  Begin time

  '2018/12/05 14:05:00' --> Set begin time to 5th of December 2018, 14:05
  'C'                   --> Set begin time to current time
  'C-S900'              --> Set begin time to current time minus 900 seconds
  'C-M15'               --> Set begin time to current time minus 15 minutes
  'C-H5'                --> Set begin time to current time minus 5 hours
  'C-D1'                --> Set begin time to current time minus 1 day
  'C-W4'                --> Set begin time to current time minus 4 weeks
  'E-S900'              --> Set begin time to end time minus 900 seconds
  'E-M15'               --> Set begin time to end time minus 15 minutes
  'E-H5'                --> Set begin time to end time minus 5 hours
  'E-D1'                --> Set begin time to end time minus 1 day
  'E-W4'                --> Set begin time to end time minus 4 weeks
  'MIN'                 --> Set begin time to minimum (1000/01/01 00:00:00)

- END_TIME

  End time

  '2018/12/08 14:05:00' --> Set end time to 8th of December 2018, 14:05
  'C'                   --> Set end time to current time
  'C-S900'              --> Set end time to current time minus 900 seconds
  'C-M15'               --> Set end time to current time minus 15 minutes
  'C-H5'                --> Set end time to current time minus 5 hours
  'C-D1'                --> Set end time to current time minus 1 day
  'C-W4'                --> Set end time to current time minus 4 weeks
  'B+S900'              --> Set end time to begin time plus 900 seconds
  'B+M15'               --> Set end time to begin time plus 15 minutes
  'B+H5'                --> Set end time to begin time plus 5 hours
  'B+D1'                --> Set end time to begin time plus 1 day
  'B+W4'                --> Set end time to begin time plus 4 weeks
  'MAX'                 --> Set end time to maximum (9999/12/31 23:59:59)

- TIMEZONE

  Used timezone (both for input and output parameters)

  'SERVER'       --> Display times in SAP HANA server time
  'UTC'          --> Display times in UTC time

- HOST

  Host name

  'saphana01'     --> Specific host saphana01
  'saphana%'      --> All hosts starting with saphana
  '%'             --> All hosts

- PORT

  Port number

  '30007'         --> Port 30007
  '%03'           --> All ports ending with '03'
  '%'             --> No restriction to ports

- SCHEMA_NAME

  Schema name or pattern

  'SAPSR3'        --> Specific schema SAPSR3
  'SAP%'          --> All schemata starting with 'SAP'
  '%'             --> All schemata

- TABLE_NAME           

  Table name or pattern

  'T000'          --> Specific table T000
  'T%'            --> All tables starting with 'T'
  '%'             --> All tables

- COLUMN_NAME

  Column name

  'MATNR'         --> Column MATNR
  'Z%'            --> Columns starting with "Z"
  '%'             --> No restriction related to columns

- PART_ID

  Partition number

  2               --> Only show information for partition number 2
  -1              --> No restriction related to partition number

- MIN_LOBS

  Minimum number of removed LOBs (file + packed)

  100             --> Display reclaims with at least 100 removed LOBs
  -1              --> No restriction related to removed LOBs

- MIN_FILE_LOBS

  Minimum number of removed file LOBs

  100             --> Display reclaims with at least 100 removed file LOBs
  -1              --> No restriction related to removed file LOBs

- MIN_PACKED_LOBS

  Minimum number of removed packed LOBs

  100             --> Display reclaims with at least 100 removed packed LOBs
  -1              --> No restriction related to removed packed LOBs

- ERROR

  Reclaim error message

  '%alloc%'       --> Only show reclaims that failed with an error containing 'alloc'
  '%'             --> No restriction related to reclaim error message

- ONLY_FAILED_RECLAIMS

  Possibility to restrict the results to failed reclaims

  'X'             --> Only show failed reclaims, i.e. reclaims with an error code different from 0
  ' '             --> No restriction to failed reclaims

- EXCLUDE_RECLAIMS_WITHOUT_REMOVEL

  Possibility to ignore reclaims that did not remove any LOB (i.e. LOBS = 0)

  'X'             --> Ignore reclaims that did not remove any LOB
  ' '             --> Also consider reclaims that did not remove any LOB

- MIN_DURATION_S

  Minimum threshold for (individual) reclaim duration (s)

  10              --> Only show reclaims with a runtime of at least 10 seconds
  -1              --> No limitation related to reclaim duration

- OBJECT_LEVEL

  Controls display of partitions

  'PARTITION'     --> Result is shown on partition level
  'TABLE'         --> Result is shown on table level

- DATA_SOURCE

  Source of analysis data

  'CURRENT'       --> Data from memory information (M_ tables)
  'HISTORY'       --> Data from persisted history information (HOST_ tables)

- AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'TIME'          --> Aggregation by time
  'HOST, PORT'    --> Aggregation by host and port
  'NONE'          --> No aggregation

- TIME_AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'HOUR'          --> Aggregation by hour
  'YYYY/WW'       --> Aggregation by calendar week
  'TS<seconds>'   --> Time slice aggregation based on <seconds> seconds
  'NONE'          --> No aggregation

- ORDER_BY

  Sort criteria (available values are provided in comment)

  'TIME'          --> Sorting by time
  'LOBS'          --> Sorting by number of reclaimed LOBs

[OUTPUT PARAMETERS]

- START_TIME:  Start time
- DURATION_S:  Reclaim duration (s)
- COUNT:       Number of reclaims
- HOST:        Host
- PORT:        Port
- SCHEMA_NAME: Schema name
- TABLE_NAME:  Table name
- COLUMN_NAME: Column name
- LOBS:        Total number of reclaimed LOBs
- FILE_LOBS:   Number of reclaimed file LOBs
- PACKED_LOBS: Number of reclaimed packed LOBs
- ERROR:       Error message

[EXAMPLE OUTPUT]

-------------------------------------------------------------------------------------------------------------------------------------------------
|START_TIME         |DURATION_S|COUNT|HOST         |PORT |SCHEMA_NAME    |TABLE_NAME      |COLUMN_NAME    |LOBS     |FILE_LOBS|PACKED_LOBS|ERROR|
-------------------------------------------------------------------------------------------------------------------------------------------------
|2023/12/09 01:50:06|      3.18|    1|saphananode01|30240|SAPERP         |STXL (4)        |CLUSTD         |   218212|        0|     218212|0    |
|2023/12/09 01:50:02|      3.70|    1|saphananode01|30240|SAPERP         |STXL (3)        |CLUSTD         |   335224|        0|     335224|0    |
|2023/12/09 01:49:58|      3.82|    1|saphananode01|30240|SAPERP         |STXL (2)        |CLUSTD         |   358782|        0|     358782|0    |
|2023/12/09 01:49:54|      4.04|    1|saphananode01|30240|SAPERP         |STXL (1)        |CLUSTD         |   438441|        0|     438441|0    |
|2023/12/09 01:49:53|      0.97|    1|saphananode01|30240|SAPERP         |SWNCMONI        |CLUSTD         |   172939|        0|     172939|0    |
|2023/12/09 01:48:32|      0.09|    1|saphananode01|30240|SAPERP         |/SDF/SMON_CLUST |CLUSTD         |     3687|     3668|         19|0    |
|2023/12/08 19:08:51|      0.00|    1|saphananode01|30240|_SYS_STATISTICS|TEL_LICENSE_BASE|MEASUREMENT_XML|        1|        0|          1|0    |
|2023/12/08 18:58:57|      1.86|    1|saphananode01|30240|SAPERP         |SWNCMONI        |CLUSTD         |   293317|        0|     293317|0    |
|2023/12/08 18:58:34|      4.72|    1|saphananode01|30240|SAPERP         |STXL (4)        |CLUSTD         |   470854|        0|     470854|0    |
|2023/12/08 18:58:05|      5.87|    1|saphananode01|30240|SAPERP         |STXL (3)        |CLUSTD         |   742390|        0|     742390|0    |
|2023/12/08 18:57:35|      5.51|    1|saphananode01|30240|SAPERP         |STXL (2)        |CLUSTD         |   827654|        0|     827654|0    |
|2023/12/08 18:56:59|      6.06|    1|saphananode01|30240|SAPERP         |STXL (1)        |CLUSTD         |   960393|        0|     960393|0    |
|2023/12/08 18:03:32|      0.34|    1|saphananode01|30240|SAPERP         |REPOSRC         |DATA           |        3|        0|          3|0    |
|2023/12/08 06:59:44|      1.92|    1|saphananode01|30240|SAPERP         |SWNCMONI        |CLUSTD         |   311330|     3111|     308219|0    |
|2023/12/08 06:59:24|      3.16|    1|saphananode01|30240|SAPERP         |STXL (4)        |CLUSTD         |   244030|        0|     244030|0    |
-------------------------------------------------------------------------------------------------------------------------------------------------

*/

  START_TIME,
  LPAD(TO_DECIMAL(DURATION_S, 10, 2), 10) DURATION_S,
  LPAD(CNT, 5) "COUNT",
  HOST,
  LPAD(PORT, 5) PORT,
  SCHEMA_NAME,
  TABLE_NAME,
  COLUMN_NAME,
  LPAD(LOBS, 9) LOBS,
  LPAD(FILE_LOBS, 9) FILE_LOBS,
  LPAD(PACKED_LOBS, 11) PACKED_LOBS,
  ERROR
FROM
( SELECT
    CASE
      WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TIME') != 0 THEN 
        CASE 
          WHEN BI.TIME_AGGREGATE_BY LIKE 'TS%' THEN
            TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP('2014/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP('2014/01/01 00:00:00', 
            'YYYY/MM/DD HH24:MI:SS'), CASE BI.TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(R.START_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE R.START_TIME END) / SUBSTR(BI.TIME_AGGREGATE_BY, 3)) * SUBSTR(BI.TIME_AGGREGATE_BY, 3)), 'YYYY/MM/DD HH24:MI:SS')
          ELSE TO_VARCHAR(CASE BI.TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(R.START_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE R.START_TIME END, BI.TIME_AGGREGATE_BY)
        END
      ELSE 'any' 
    END START_TIME,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')   != 0 THEN R.HOST             ELSE MAP(BI.HOST,         '%', 'any', BI.HOST)         END HOST,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')   != 0 THEN TO_VARCHAR(R.PORT) ELSE MAP(BI.PORT,         '%', 'any', BI.PORT)         END PORT,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SCHEMA') != 0 THEN R.SCHEMA_NAME      ELSE MAP(BI.SCHEMA_NAME,  '%', 'any', BI.SCHEMA_NAME)  END SCHEMA_NAME,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TABLE')  != 0 THEN R.TABLE_NAME || MAP(BI.OBJECT_LEVEL, 'TABLE', '', MAP(R.PART_ID, 0, '', CHAR(32) || '(' || R.PART_ID || ')')) 
                                                                                                        ELSE MAP(BI.TABLE_NAME,   '%', 'any', BI.TABLE_NAME)   END TABLE_NAME,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'COLUMN') != 0 THEN R.COLUMN_NAME      ELSE MAP(BI.COLUMN_NAME,  '%', 'any', BI.COLUMN_NAME)  END COLUMN_NAME,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'ERROR')  != 0 THEN R.ERROR            ELSE MAP(BI.ERROR,        '%', 'any', BI.ERROR)        END ERROR,
    COUNT(*) CNT,
    SUM(DURATION_S) DURATION_S,
    SUM(R.LOBS) LOBS,
    SUM(R.FILE_LOBS) FILE_LOBS,
    SUM(R.PACKED_LOBS) PACKED_LOBS,
    BI.ORDER_BY
  FROM
  ( SELECT
      CASE
        WHEN BEGIN_TIME =    'C'                             THEN CURRENT_TIMESTAMP
        WHEN BEGIN_TIME LIKE 'C-S%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-S'))
        WHEN BEGIN_TIME LIKE 'C-M%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-M') * 60)
        WHEN BEGIN_TIME LIKE 'C-H%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-H') * 3600)
        WHEN BEGIN_TIME LIKE 'C-D%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-D') * 86400)
        WHEN BEGIN_TIME LIKE 'C-W%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-W') * 86400 * 7)
        WHEN BEGIN_TIME LIKE 'E-S%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-S'))
        WHEN BEGIN_TIME LIKE 'E-M%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-M') * 60)
        WHEN BEGIN_TIME LIKE 'E-H%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-H') * 3600)
        WHEN BEGIN_TIME LIKE 'E-D%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-D') * 86400)
        WHEN BEGIN_TIME LIKE 'E-W%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-W') * 86400 * 7)
        WHEN BEGIN_TIME =    'MIN'                           THEN TO_TIMESTAMP('1000/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
        WHEN SUBSTR(BEGIN_TIME, 1, 1) NOT IN ('C', 'E', 'M') THEN TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS')
      END BEGIN_TIME,
      CASE
        WHEN END_TIME =    'C'                             THEN CURRENT_TIMESTAMP
        WHEN END_TIME LIKE 'C-S%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-S'))
        WHEN END_TIME LIKE 'C-M%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-M') * 60)
        WHEN END_TIME LIKE 'C-H%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-H') * 3600)
        WHEN END_TIME LIKE 'C-D%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-D') * 86400)
        WHEN END_TIME LIKE 'C-W%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-W') * 86400 * 7)
        WHEN END_TIME LIKE 'B+S%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+S'))
        WHEN END_TIME LIKE 'B+M%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+M') * 60)
        WHEN END_TIME LIKE 'B+H%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+H') * 3600)
        WHEN END_TIME LIKE 'B+D%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+D') * 86400)
        WHEN END_TIME LIKE 'B+W%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+W') * 86400 * 7)
        WHEN END_TIME =    'MAX'                           THEN TO_TIMESTAMP('9999/12/31 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
        WHEN SUBSTR(END_TIME, 1, 1) NOT IN ('C', 'B', 'M') THEN TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS')
      END END_TIME,
      TIMEZONE,
      HOST,
      PORT,
      SCHEMA_NAME,
      TABLE_NAME,
      COLUMN_NAME,
      PART_ID,
      MIN_LOBS,
      MIN_FILE_LOBS,
      MIN_PACKED_LOBS,
      ERROR,
      ONLY_FAILED_RECLAIMS,
      EXCLUDE_RECLAIMS_WITHOUT_REMOVAL,
      MIN_DURATION_S,
      OBJECT_LEVEL,
      DATA_SOURCE,
      AGGREGATE_BY,
      MAP(TIME_AGGREGATE_BY,
        'NONE',        'YYYY/MM/DD HH24:MI:SS',
        'HOUR',        'YYYY/MM/DD HH24',
        'DAY',         'YYYY/MM/DD (DY)',
        'HOUR_OF_DAY', 'HH24',
        TIME_AGGREGATE_BY ) TIME_AGGREGATE_BY,
      ORDER_BY
    FROM
    ( SELECT                 /* Modification section */
        '1000/10/18 07:58:00' BEGIN_TIME,                  /* YYYY/MM/DD HH24:MI:SS timestamp, C, C-S<seconds>, C-M<minutes>, C-H<hours>, C-D<days>, C-W<weeks>, E-S<seconds>, E-M<minutes>, E-H<hours>, E-D<days>, E-W<weeks>, MIN */
        '9999/10/18 08:05:00' END_TIME,                    /* YYYY/MM/DD HH24:MI:SS timestamp, C, C-S<seconds>, C-M<minutes>, C-H<hours>, C-D<days>, C-W<weeks>, B+S<seconds>, B+M<minutes>, B+H<hours>, B+D<days>, B+W<weeks>, MAX */
        'SERVER' TIMEZONE,                              /* SERVER, UTC */
        '%' HOST,
        '%' PORT,
        '%' SCHEMA_NAME,
        '%' TABLE_NAME,
        '%' COLUMN_NAME,
        -1 PART_ID,
        -1 MIN_LOBS,
        -1 MIN_FILE_LOBS,
        -1 MIN_PACKED_LOBS,
        '%' ERROR,
        ' ' ONLY_FAILED_RECLAIMS,
        'X' EXCLUDE_RECLAIMS_WITHOUT_REMOVAL,
        -1 MIN_DURATION_S,
        'PARTITION' OBJECT_LEVEL,
        'HISTORY' DATA_SOURCE,
        'NONE' AGGREGATE_BY,         /* HOST, PORT, TIME, SCHEMA, TABLE, COLUMN, ERROR or comma separated combinations, NONE for no aggregation */
        'NONE' TIME_AGGREGATE_BY,    /* HOUR, DAY, HOUR_OF_DAY or database time pattern, TS<seconds> for time slice, NONE for no aggregation */  
        'TIME' ORDER_BY              /* TIME, NAME, TOTAL_LOBS, FILE_LOBS, PACKED_LOBS */     
      FROM
        DUMMY
    )
  ) BI,
  ( SELECT
      'CURRENT' DATA_SOURCE,
      START_TIME,
      NANO100_BETWEEN(START_TIME, END_TIME) / 10000000 DURATION_S,
      HOST,
      PORT,
      SCHEMA_NAME,
      TABLE_NAME,
      COLUMN_NAME,
      PART_ID,
      REMOVED_FILE_LOBS_COUNT + REMOVED_PACKED_LOBS_COUNT LOBS,
      REMOVED_FILE_LOBS_COUNT FILE_LOBS,
      REMOVED_PACKED_LOBS_COUNT PACKED_LOBS,
      TO_VARCHAR(ERROR_CODE) || MAP(ERROR_MESSAGE, '', '', ':' || CHAR(32) || ERROR_MESSAGE) ERROR
    FROM
      M_CS_LOB_SPACE_RECLAIM_DETAILS
    UNION
    SELECT
      'HISTORY' DATA_SOURCE,
      START_TIME,
      NANO100_BETWEEN(START_TIME, END_TIME) / 10000000 DURATION_S,
      HOST,
      PORT,
      SCHEMA_NAME,
      TABLE_NAME,
      COLUMN_NAME,
      PART_ID,
      REMOVED_FILE_LOBS_COUNT + REMOVED_PACKED_LOBS_COUNT LOBS,
      REMOVED_FILE_LOBS_COUNT FILE_LOBS,
      REMOVED_PACKED_LOBS_COUNT PACKED_LOBS,
      TO_VARCHAR(ERROR_CODE) || MAP(ERROR_MESSAGE, '', '', ':' || CHAR(32) || ERROR_MESSAGE) ERROR
    FROM
      _SYS_STATISTICS.HOST_CS_LOB_SPACE_RECLAIM_DETAILS
  ) R
  WHERE
    R.HOST LIKE BI.HOST AND  
    TO_VARCHAR(R.PORT) LIKE BI.PORT AND
    CASE BI.TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(R.START_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE R.START_TIME END BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
    R.SCHEMA_NAME LIKE BI.SCHEMA_NAME AND
    R.TABLE_NAME LIKE BI.TABLE_NAME AND
    R.COLUMN_NAME LIKE BI.COLUMN_NAME AND
    ( BI.PART_ID = -1 OR R.PART_ID = BI.PART_ID ) AND
    ( BI.MIN_LOBS = -1 OR R.LOBS >= BI.MIN_LOBS ) AND
    ( BI.MIN_FILE_LOBS = -1 OR R.FILE_LOBS >= BI.MIN_FILE_LOBS ) AND
    ( BI.MIN_PACKED_LOBS = -1 OR R.PACKED_LOBS >= BI.MIN_PACKED_LOBS ) AND
    R.ERROR LIKE BI.ERROR AND
    ( BI.ONLY_FAILED_RECLAIMS = ' ' OR R.ERROR != '0' ) AND
    ( BI.EXCLUDE_RECLAIMS_WITHOUT_REMOVAL = ' ' OR R.LOBS > 0 ) AND
    ( BI.MIN_DURATION_S = -1 OR R.DURATION_S >= BI.MIN_DURATION_S ) AND
    R.DATA_SOURCE = BI.DATA_SOURCE
  GROUP BY
    CASE
      WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TIME') != 0 THEN 
        CASE 
          WHEN BI.TIME_AGGREGATE_BY LIKE 'TS%' THEN
            TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP('2014/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP('2014/01/01 00:00:00', 
            'YYYY/MM/DD HH24:MI:SS'), CASE BI.TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(R.START_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE R.START_TIME END) / SUBSTR(BI.TIME_AGGREGATE_BY, 3)) * SUBSTR(BI.TIME_AGGREGATE_BY, 3)), 'YYYY/MM/DD HH24:MI:SS')
          ELSE TO_VARCHAR(CASE BI.TIMEZONE WHEN 'UTC' THEN ADD_SECONDS(R.START_TIME, SECONDS_BETWEEN(CURRENT_TIMESTAMP, CURRENT_UTCTIMESTAMP)) ELSE R.START_TIME END, BI.TIME_AGGREGATE_BY)
        END
      ELSE 'any' 
    END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')   != 0 THEN R.HOST             ELSE MAP(BI.HOST,         '%', 'any', BI.HOST)         END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')   != 0 THEN TO_VARCHAR(R.PORT) ELSE MAP(BI.PORT,         '%', 'any', BI.PORT)         END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SCHEMA') != 0 THEN R.SCHEMA_NAME      ELSE MAP(BI.SCHEMA_NAME,  '%', 'any', BI.SCHEMA_NAME)  END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TABLE')  != 0 THEN R.TABLE_NAME || MAP(BI.OBJECT_LEVEL, 'TABLE', '', MAP(R.PART_ID, 0, '', CHAR(32) || '(' || R.PART_ID || ')')) 
                                                                                                        ELSE MAP(BI.TABLE_NAME,   '%', 'any', BI.TABLE_NAME)   END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'COLUMN') != 0 THEN R.COLUMN_NAME      ELSE MAP(BI.COLUMN_NAME,  '%', 'any', BI.COLUMN_NAME)  END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'ERROR')  != 0 THEN R.ERROR            ELSE MAP(BI.ERROR,        '%', 'any', BI.ERROR)        END,
    BI.ORDER_BY
)
ORDER BY
  MAP(ORDER_BY, 'TIME', START_TIME) DESC,
  MAP(ORDER_BY, 'NAME', SCHEMA_NAME || TABLE_NAME || COLUMN_NAME),
  MAP(ORDER_BY, 'TOTAL_LOBS', LOBS, 'FILE_LOBS', FILE_LOBS, 'PACKED_LOBS', PACKED_LOBS) DESC,
  START_TIME DESC,
  LOBS DESC,
  SCHEMA_NAME,
  TABLE_NAME,
  COLUMN_NAME 