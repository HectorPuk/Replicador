SELECT
/* 

[NAME]

- HANA_Services_Memory_1.00.90+_MDC

[DESCRIPTION]

- Service memory information

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]

- Has to be run in system database of an MDC system, otherwise it terminates with error "[362]: invalid schema name: SYS_DATABASES"
- Multitenant database containers (MDC) are available starting with SAP HANA 1.00.90
- History not available with SAP HANA < 1.00.100

[VALID FOR]

- Revisions:              >= 1.00.90
- Statistics server type: all
- System type:            Multitenant database containers (MDC)

[SQL COMMAND VERSION]

- 2015/03/11:  1.0 (initial version)
- 2015/05/21:  1.1 (EFFECTIVE_ALLOCATION_LIMIT included)
- 2015/05/22:  1.2 (HOST_SERVICE_MEMORY added)
- 2016/01/22:  1.3 (BEGIN_TIME and END_TIME restriction added)
- 2016/12/31:  1.4 (TIME_AGGREGATE_BY = 'TS<seconds>' included)
- 2017/01/11:  1.5 (dedicated MDC version)

[INVOLVED TABLES]

- SYS_DATABASES.M_SERVICES
- SYS_DATABASES.M_SERVICE_MEMORY

[INPUT PARAMETERS]

- BEGIN_TIME

  Begin time

  TO_TIMESTAMP('2014/06/05 14:05:00', 'YYYY/MM/DD HH24:MI:SS') --> Set begin time to 5th of June 2014, 14:05 
  ADD_DAYS(CURRENT_TIMESTAMP, -2)                              --> Set begin time to two days before current time 

- END_TIME

  End time

  TO_TIMESTAMP('2014/06/08 14:05:00', 'YYYY/MM/DD HH24:MI:SS') --> Set end time to 8th of June 2014, 14:05 
  CURRENT_TIMESTAMP                                            --> Set end time to current time 

- HOST

  Host name

  'saphana01'     --> Specic host saphana01
  'saphana%'      --> All hosts starting with saphana
  '%'             --> All hosts

- PORT

  Port number

  '30007'         --> Port 30007
  '%03'           --> All ports ending with '03'
  '%'             --> No restriction to ports

- SERVICE_NAME

  Service name

  'indexserver'   --> Specific service indexserver
  '%server'       --> All services ending with 'server'
  '%'             --> All services  

- DB_NAME

  Multitenant database name

  'SYSTEMDB'      --> System database
  'C11'           --> Tenant C11
  '%'             --> No restriction to multitenant database

- AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'HOST'          --> Aggregation by host
  'HOST, PORT'    --> Aggregation by host and port
  'NONE'          --> No aggregation

- TIME_AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'HOUR'          --> Aggregation by hour
  'YYYY/WW'       --> Aggregation by calendar week
  'TS<seconds>'   --> Time slice aggregation based on <seconds> seconds
  'NONE'          --> No aggregation

- MIN_MEMORY_UTILIZATION_PCT

  Restrict output to times with memory utilization of at least the defined percentate

  90              --> Restrict the output to snapshots with a memory utilization of more than 90 %
  -1              --> No restriction based on memory utilization

[OUTPUT PARAMETERS]

- SNAPSHOT_TIME:      Snapshot time (current timestamp in case of DATA_SOURCE = 'CURRENT')
- HOST:               Host name
- PORT:               Port
- SERVICE:            Service name
- DB_NAME:            Database name
- ALLOC_LIMIT_GB:     Process allocation limit (GB)
- EFF_ALLOC_LIMIT_GB: Effective process allocation limit (GB)
                      - Can be lower than allocation limit because memory consumption of other services is also taken into account
                      - Can be higher than allocation limit because code and shared memory are additionally taken into account
- MEM_USED_GB:        Used memory (GB)
- USED_PCT:           Used memory compared to allocation limit (%)
- CODE_GB:            Code size (GB), shared with other services to a high extent
- STACK_GB:           Stack size (GB)
- HEAP_ALLOC_GB:      Heap memory allocated (GB)
- HEAP_USED_GB:       Heap memory used (GB)
- SHARED_ALLOC_GB:    Allocated shared memory (GB), can be treated as used memory as reduction of shared memory is not possible online
- NON_FREEABLE_GB:    Memory which cannot be freed in case of a memory shortage (GB)

[EXAMPLE OUTPUT]

----------------------------------------------------------------------------------------------------------------------------------
|HOST      |PORT |ALLOC_LIMIT_GB|MEM_USED_GB|USED_PCT|CODE_GB|STACK_GB|HEAP_ALLOC_GB|HEAP_USED_GB|SHARED_ALLOC_GB|NON_FREEABLE_GB|
----------------------------------------------------------------------------------------------------------------------------------
|saphana156|30001|       3635.78|      10.16|    0.27|   6.12|    0.33|         5.34|        3.81|           0.22|           5.30|
|saphana156|30002|       3635.78|       6.60|    0.18|   5.87|    0.01|         1.95|        0.73|           0.00|           1.95|
|saphana156|30003|       3635.78|    1570.41|   43.19|   7.49|    0.81|      1583.65|     1459.79|         103.13|          94.68|
|saphana156|30005|        201.98|      17.10|    8.46|   6.67|    0.37|        13.78|       10.10|           0.32|          12.98|
|saphana156|30007|       3635.78|      11.59|    0.31|   7.31|    0.36|         6.38|        3.95|           0.32|           6.37|
|saphana156|30010|       3635.78|       6.58|    0.18|   5.73|    0.01|         2.04|        0.85|           0.00|           2.04|
----------------------------------------------------------------------------------------------------------------------------------

*/

  SNAPSHOT_TIME,
  HOST,
  LPAD(PORT, 5) PORT,
  SERVICE_NAME SERVICE,
  DATABASE_NAME DB_NAME,
  LPAD(TO_DECIMAL(ALLOC_LIMIT_GB, 10, 2), 14) ALLOC_LIMIT_GB,
  LPAD(TO_DECIMAL(EFF_ALLOC_LIMIT_GB, 10, 2), 18) EFF_ALLOC_LIMIT_GB,
  LPAD(TO_DECIMAL(MEM_USED_GB, 10, 2), 11) MEM_USED_GB,
  LPAD(TO_DECIMAL(MAP(EFF_ALLOC_LIMIT_GB, 0, 0, MEM_USED_GB / EFF_ALLOC_LIMIT_GB * 100), 10, 2), 8) USED_PCT,
  LPAD(TO_DECIMAL(CODE_GB, 10, 2), 7) CODE_GB,
  LPAD(TO_DECIMAL(STACK_GB, 10, 2), 8) STACK_GB,
  LPAD(TO_DECIMAL(HEAP_ALLOC_GB, 10, 2), 13) HEAP_ALLOC_GB,
  LPAD(TO_DECIMAL(HEAP_USED_GB, 10, 2), 12) HEAP_USED_GB,
  LPAD(TO_DECIMAL(SHARED_ALLOC_GB, 10, 2), 15) SHARED_ALLOC_GB,
  LPAD(TO_DECIMAL(HEAP_ALLOC_GB - FREEABLE_GB, 10, 2), 15) NON_FREEABLE_GB
FROM
( SELECT
    SNAPSHOT_TIME,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'HOST')    != 0 THEN HOST          ELSE MAP(BI_HOST,         '%', 'any', BI_HOST)         END HOST,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'PORT')    != 0 THEN TO_VARCHAR(PORT) ELSE MAP(BI_PORT,         '%', 'any', BI_PORT)         END PORT,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'SERVICE') != 0 THEN SERVICE_NAME  ELSE MAP(BI_SERVICE_NAME, '%', 'any', BI_SERVICE_NAME) END SERVICE_NAME,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'DB_NAME') != 0 THEN DATABASE_NAME ELSE MAP(BI_DB_NAME,      '%', 'any', BI_DB_NAME)      END DATABASE_NAME,
    SUM(ALLOCATION_LIMIT) / 1024 / 1024 / 1024 ALLOC_LIMIT_GB,
    SUM(EFFECTIVE_ALLOCATION_LIMIT) / 1024 / 1024 / 1024 EFF_ALLOC_LIMIT_GB,
    SUM(TOTAL_MEMORY_USED_SIZE) / 1024 / 1024 / 1024 MEM_USED_GB,
    SUM(CODE_SIZE) / 1024 / 1024 / 1024 CODE_GB,
    SUM(STACK_SIZE) / 1024 / 1024 / 1024 STACK_GB,
    SUM(HEAP_MEMORY_ALLOCATED_SIZE) / 1024 / 1024 / 1024 HEAP_ALLOC_GB,
    SUM(HEAP_MEMORY_USED_SIZE) / 1024 / 1024 / 1024 HEAP_USED_GB,
    SUM(SHARED_MEMORY_ALLOCATED_SIZE) / 1024 / 1024 / 1024 SHARED_ALLOC_GB,
    SUM(COMPACTORS_FREEABLE_SIZE) / 1024 / 1024 / 1024 FREEABLE_GB,
    MIN_MEM_UTILIZATION_PCT
  FROM
  ( SELECT
      CASE 
        WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TIME') != 0 THEN 
          CASE 
            WHEN BI.TIME_AGGREGATE_BY LIKE 'TS%' THEN
              TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP('2014/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP('2014/01/01 00:00:00', 
              'YYYY/MM/DD HH24:MI:SS'), M.SNAPSHOT_TIME) / SUBSTR(BI.TIME_AGGREGATE_BY, 3)) * SUBSTR(BI.TIME_AGGREGATE_BY, 3)), 'YYYY/MM/DD HH24:MI:SS')
            ELSE TO_VARCHAR(M.SNAPSHOT_TIME, BI.TIME_AGGREGATE_BY)
          END
        ELSE 'any' 
      END SNAPSHOT_TIME,
      M.HOST,
      M.PORT,
      S.SERVICE_NAME,
      M.DATABASE_NAME,
      AVG(M.ALLOCATION_LIMIT) ALLOCATION_LIMIT,
      AVG(M.EFFECTIVE_ALLOCATION_LIMIT) EFFECTIVE_ALLOCATION_LIMIT,
      AVG(M.TOTAL_MEMORY_USED_SIZE) TOTAL_MEMORY_USED_SIZE,
      AVG(M.CODE_SIZE) CODE_SIZE,
      AVG(M.STACK_SIZE) STACK_SIZE,
      AVG(M.HEAP_MEMORY_ALLOCATED_SIZE) HEAP_MEMORY_ALLOCATED_SIZE,
      AVG(M.HEAP_MEMORY_USED_SIZE) HEAP_MEMORY_USED_SIZE,
      AVG(M.SHARED_MEMORY_ALLOCATED_SIZE) SHARED_MEMORY_ALLOCATED_SIZE,
      AVG(M.COMPACTORS_FREEABLE_SIZE) COMPACTORS_FREEABLE_SIZE,
      BI.MIN_MEM_UTILIZATION_PCT,
      BI.AGGREGATE_BY,
      BI.HOST BI_HOST,
      BI.PORT BI_PORT,
      BI.SERVICE_NAME BI_SERVICE_NAME,
      BI.DB_NAME BI_DB_NAME
    FROM
    ( SELECT
        BEGIN_TIME,
        END_TIME,
        HOST,
        PORT,
        SERVICE_NAME,
        DB_NAME,
        MIN_MEM_UTILIZATION_PCT,
        'CURRENT' DATA_SOURCE,
        AGGREGATE_BY,
        MAP(TIME_AGGREGATE_BY,
          'NONE',        'YYYY/MM/DD HH24:MI:SS',
          'HOUR',        'YYYY/MM/DD HH24',
          'DAY',         'YYYY/MM/DD (DY)',
          'HOUR_OF_DAY', 'HH24',
          TIME_AGGREGATE_BY ) TIME_AGGREGATE_BY
      FROM
      ( SELECT                       /* Modification section */
          TO_TIMESTAMP('1000/01/01 08:00:00', 'YYYY/MM/DD HH24:MI:SS') BEGIN_TIME,
          TO_TIMESTAMP('9999/12/31 12:00:00', 'YYYY/MM/DD HH24:MI:SS') END_TIME,
          '%' HOST,
          '%' PORT,
          '%' SERVICE_NAME,
          '%' DB_NAME,
          -1 MIN_MEM_UTILIZATION_PCT,
          'NONE' AGGREGATE_BY,        /* HOST, PORT, SERVICE, TIME or comma separated combinations, NONE for no aggregation */
          'NONE' TIME_AGGREGATE_BY     /* HOUR, DAY, HOUR_OF_DAY or database time pattern, TS<seconds> for time slice, NONE for no aggregation */
        FROM
          DUMMY
      ) 
    ) BI,
      SYS_DATABASES.M_SERVICES S,
    ( SELECT
        'CURRENT' DATA_SOURCE,
        CURRENT_TIMESTAMP SNAPSHOT_TIME,
        HOST,
        PORT,
        DATABASE_NAME,
        ALLOCATION_LIMIT,
        EFFECTIVE_ALLOCATION_LIMIT,
        TOTAL_MEMORY_USED_SIZE,
        CODE_SIZE,
        STACK_SIZE,
        HEAP_MEMORY_ALLOCATED_SIZE,
        HEAP_MEMORY_USED_SIZE,
        SHARED_MEMORY_ALLOCATED_SIZE,
        COMPACTORS_FREEABLE_SIZE
      FROM
        SYS_DATABASES.M_SERVICE_MEMORY
    ) M
    WHERE
      M.SNAPSHOT_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      S.HOST LIKE BI.HOST AND
      TO_VARCHAR(S.PORT) LIKE BI.PORT AND
      S.SERVICE_NAME LIKE BI.SERVICE_NAME AND
      S.DATABASE_NAME LIKE BI.DB_NAME AND
      M.HOST = S.HOST AND
      M.PORT = S.PORT AND
      M.DATABASE_NAME = S.DATABASE_NAME AND
      M.DATA_SOURCE = BI.DATA_SOURCE
    GROUP BY
      CASE 
        WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'TIME') != 0 THEN 
          CASE 
            WHEN BI.TIME_AGGREGATE_BY LIKE 'TS%' THEN
              TO_VARCHAR(ADD_SECONDS(TO_TIMESTAMP('2014/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS'), FLOOR(SECONDS_BETWEEN(TO_TIMESTAMP('2014/01/01 00:00:00', 
              'YYYY/MM/DD HH24:MI:SS'), M.SNAPSHOT_TIME) / SUBSTR(BI.TIME_AGGREGATE_BY, 3)) * SUBSTR(BI.TIME_AGGREGATE_BY, 3)), 'YYYY/MM/DD HH24:MI:SS')
            ELSE TO_VARCHAR(M.SNAPSHOT_TIME, BI.TIME_AGGREGATE_BY)
          END
        ELSE 'any' 
      END,
      M.HOST,
      M.PORT,
      S.SERVICE_NAME,
      M.DATABASE_NAME,
      BI.MIN_MEM_UTILIZATION_PCT,
      BI.AGGREGATE_BY,
      BI.HOST,
      BI.PORT,
      BI.SERVICE_NAME,
      BI.DB_NAME
  )
  GROUP BY
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'HOST')    != 0 THEN HOST          ELSE MAP(BI_HOST,         '%', 'any', BI_HOST)         END,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'PORT')    != 0 THEN TO_VARCHAR(PORT) ELSE MAP(BI_PORT,         '%', 'any', BI_PORT)         END,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'SERVICE') != 0 THEN SERVICE_NAME  ELSE MAP(BI_SERVICE_NAME, '%', 'any', BI_SERVICE_NAME) END,
    CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'DB_NAME') != 0 THEN DATABASE_NAME ELSE MAP(BI_DB_NAME,      '%', 'any', BI_DB_NAME)      END,
    SNAPSHOT_TIME,
    MIN_MEM_UTILIZATION_PCT
)
WHERE
  ( MIN_MEM_UTILIZATION_PCT = -1 OR MEM_USED_GB / EFF_ALLOC_LIMIT_GB * 100 >= MIN_MEM_UTILIZATION_PCT )
ORDER BY
  SNAPSHOT_TIME DESC,
  HOST,
  PORT,
  DATABASE_NAME