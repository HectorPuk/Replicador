SELECT
/* 

[NAME]

- HANA_Configuration_MiniChecks_1.00.102.01+

[DESCRIPTION]

- General SAP HANA checks

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]

- Checks below "Available as of revisions <rev>" are not possible with earlier revisions 
- Some checks related to extended statistics server are not possible with standalone statistics server
- Long runtimes might be linked to TABLES_MOVED_LOCALLY check
- NO_SUBPLAN_SHARING hint required to avoid terminations with "invalid number: not a valid number string 'yes' at function __typecast__()" (bug 124947)

- The following checks are deprecated and no longer considered:

    ( SELECT  230, 'MEMORY_USED_CURRENT',          'Current memory utilization (%)',                  '1999997', '<=',       '90',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  231, 'MEMORY_USED_HISTORY',          'Time since memory utilization > 95 % (h)',        '1999997', '>=',       '12.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  240, 'SWAP_SPACE_USED_CURRENT',      'Current swap utilization (GB)',                   '1999997', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  241, 'SWAP_SPACE_USED_HISTORY',      'Time since swap utilization > 1 GB (h)',          '1999997', '>=',       '480',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  310, 'MIN_IO_READ_THROUGHPUT_DATA',  'I/O read throughput data min. (MB/s, last day)',  '1999930', '>=',       '20',            -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  311, 'AVG_IO_READ_THROUGHPUT_DATA',  'I/O read throughput data avg. (MB/s, last day)',  '1999930', '>=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  320, 'MIN_IO_READ_THROUGHPUT_LOG',   'I/O read throughput log min. (MB/s, last day)',   '1999930', '>=',       '30',            -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  321, 'AVG_IO_READ_THROUGHPUT_LOG',   'I/O read throughput log avg. (MB/s, last day)',   '1999930', '>=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  325, 'MIN_IO_WRITE_THROUGHPUT_LOG',  'I/O write throughput log min. (MB/s, last day)',  '1999930', '>=',       '10',            -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  326, 'AVG_IO_WRITE_THROUGHPUT_LOG',  'I/O write throughput log avg. (MB/s, last day)',  '1999930', '>=',       '20',            -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  328, 'AVG_4K_WRITE_DURATION_LOG',    '4 KB write duration log avg. (ms)',               '1999930', '<=',       '10.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  350, 'HIGH_CRIT_SAVEPOINT_PHASE',    'Blocking savepoint phases > 10 s (last day)',     '2100009', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  352, 'MAX_CRIT_SAVEPOINT_PHASE',     'Blocking savepoint phase max. (s, last day)',     '2100009', '<=',       '10.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  365, 'WRONG_IO_PARAMETER_SETTINGS',  'Wrong SAP HANA I/O parameter settings',           '1999930', '=',        'no',        122.04,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  453, 'CONCAT_ATTRIBUTES_SIZE',       'Size of non-unique concat attributes (GB)',       '1986747', '<=',       '30.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1330, 'USER_EXPIRATION',              'Number of users with expiration date',            '',        '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1335, 'SAP_USER_PASSWORD_EXPIRATION', 'Number of SAP users with password expiration',    '1702224', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1850, 'SR_LOGREPLAY',                 'System replication op. mode logreplay used',      '1999880', '=',        'yes',          110,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1930, 'SYNONYM_TABLE_NAMES',          'Synonyms with names identical to table name',     '',        '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2112, 'LAST_STATSERVER_CTC_RUN',      'Last consistency check via stat. server (days)',  '2116157', '<=',       '32',            -1,    -1 FROM DUMMY ) UNION ALL

[VALID FOR]
- Revisions:              >= 1.00.102.01

[SQL COMMAND VERSION]

- 2014/04/13:  1.0 (initial version)
- 2014/05/09:  1.1 (grouping of checks)
- 2014/11/14:  1.2 (dedicated command for ESS)
- 2015/01/29:  1.3 (dedicated command for ESS and Rev. 90 and higher)
- 2015/11/12:  1.4 (dedicated command for Rev. 100 and higher)
- 2016/01/19:  1.5 (dedicated command for Rev. 102.01 and higher)

[INVOLVED TABLES]

- various

[INPUT PARAMETERS]

- HOST

  Host name

  'saphana01'     --> Specic host saphana01
  'saphana%'      --> All hosts starting with saphana
  '%'             --> All hosts

- ONLY_POTENTIALLY_CRITICAL_RESULTS

  Possibility to restrict the output to potentially critical issues

  'X'             --> Output only contains issues that can potentially indicate a problem
  ' '             --> no output restriction

- MAX_VALUE_LENGTH

  Maximum length of VALUE output column

  48              --> Maximum length of 48 characters
  -1              --> no length limitation

- ORDER_BY

  Sort criteria (available values are provided in comment)

  'HOST'          --> Sorting by host name
  'CHECK'         --> Sorting by check identifier (CHID column)
  
[OUTPUT PARAMETERS]

- CHID:           Check identifier (defined and used by this Mini Check command)
- DESCRIPTION:    Check description
- HOST:           Host name (empty if not host specific)
- VALUE:          Check value found on the system
- EXPECTED_VALUE: Expected check values 
- C:              'X' if value found on the system is outside of the expected values (indication for potentially critical problem)
- SAP_NOTE:       Related SAP Note

[EXAMPLE OUTPUT]

------------------------------------------------------------------------------------------------------------------------------------------------------
|CHID |DESCRIPTION                                    |HOST     |VALUE                                            |EXPECTED_VALUE |C|DETAILS         |
------------------------------------------------------------------------------------------------------------------------------------------------------
|**** |GENERAL                                        |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
|   10|Analysis date                                  |         |2014/05/30 12:27:35                              |               | |                |
|   11|Database name                                  |         |HP1                                              |               | |                |
|   12|Revision level                                 |         |1.00.74.00.390550 (NewDB100_REL)                 |               | |                |
|  110|Everything started                             |         |yes                                              |yes            | |                |
|  111|Startup time variation (s)                     |         |1108                                             |<= 600         |X|                |
|  120|License usage (%)                              |         |72                                               |<= 95          | |                |
|  121|License expiration (days)                      |         |never                                            |>= 100         | |SAP Note 1644792|
|  130|Database log mode                              |         |normal                                           |normal         | |                |
|  140|Time since statistics server run (s)           |         |26                                               |<= 3600        | |                |
|     |                                               |         |                                                 |               | |                |
|**** |OPERATING SYSTEM                               |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
|  210|Minimum CPU rate (MHz)                         |saphana20|2395                                             |>= 1100        | |SAP Note 1890444|
|     |                                               |saphana21|2395                                             |>= 1100        | |SAP Note 1890444|
|  211|Different CPU rates                            |         |no                                               |no             | |SAP Note 1890444|
|  220|Current CPU utilization (%)                    |saphana20|66                                               |<= 80          | |                |
|     |                                               |saphana21|1                                                |<= 80          | |                |
|  221|Time since CPU utilization > 95 % (h)          |saphana20|49.64                                            |>= 12.00       | |                |
|  230|Current memory utilization (%)                 |saphana20|50                                               |<= 90          | |                |
|     |                                               |saphana21|1                                                |<= 90          | |                |
|  231|Time since memory utilization > 95 % (h)       |         |never                                            |>= 12.00       | |                |
|  240|Current swap utilization (GB)                  |saphana20|0                                                |0              | |                |
|     |                                               |saphana21|0                                                |0              | |                |
|  241|Time since swap utilization > 1 GB (h)         |         |never                                            |>= 480         | |                |
|  250|Max. used disk size (%)                        |         |30                                               |<= 90          | |                |
|     |                                               |saphana20|30                                               |<= 90          | |                |
|     |                                               |saphana21|30                                               |<= 90          | |                |
|  260|Open files limit (OS)                          |saphana20|1048576                                          |>= 100000      | |SAP Note 1771873|
|     |                                               |saphana21|1048576                                          |>= 100000      | |SAP Note 1771873|
|     |                                               |         |                                                 |               | |                |
|**** |I/O                                            |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
|  310|I/O read throughput data min. (MB/s, last day) |saphana20|41                                               |>= 30          | |                |
|  311|I/O read throughput data avg. (MB/s, last day) |saphana20|345                                              |>= 150         | |                |
|  315|I/O write throughput data min. (MB/s, last day)|saphana20|50                                               |>= 30          | |                |
|  316|I/O write throughput data avg. (MB/s, last day)|saphana20|170                                              |>= 150         | |                |
|  320|I/O read throughput log min. (MB/s, last day)  |saphana20|3152                                             |>= 50          | |                |
|  321|I/O read throughput log avg. (MB/s, last day)  |saphana20|4030                                             |>= 100         | |                |
|  325|I/O write throughput log min. (MB/s, last day) |saphana20|16                                               |>= 10          | |                |
|  326|I/O write throughput log avg. (MB/s, last day) |saphana20|16                                               |>= 20          |X|                |
|  330|Max. trigger read ratio (data)                 |saphana20|0.67                                             |<= 0.50        |X|SAP Note 1930979|
|  331|Max. trigger write ratio (data, log)           |saphana20|0.01                                             |<= 0.50        | |SAP Note 1930979|
|  340|Log switch wait count ratio (%)                |saphana20|0                                                |<= 1           | |                |
|  341|Log switch race count ratio (%)                |saphana20|0                                                |<= 1           | |                |
|  350|Crit. savepoint phases > 10 s (last day)       |saphana20|0                                                |0              | |                |
|  351|Crit. savepoint phase avg. (s, last day)       |saphana20|2.41                                             |<= 2.00        |X|                |
|  352|Crit. savepoint phase max. (s, last day)       |saphana20|6.54                                             |<= 10.00       | |                |
|  355|Time since last savepoint (s)                  |saphana20|159                                              |<= 900         | |                |
|  360|Number of failed I/O reads                     |saphana20|0                                                |0              | |                |
|  361|Number of failed I/O writes                    |saphana20|0                                                |0              | |                |
|     |                                               |         |                                                 |               | |                |
|**** |MEMORY                                         |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
|  410|Allocation limit used (%)                      |saphana20|37                                               |<= 80          | |                |
|     |                                               |saphana21|0                                                |<= 80          | |                |
|  420|Heap areas larger than 50 GB                   |saphana20|Pool/PersistenceManager...DefaultLPA/Page (58 GB)|none           |X|SAP Note 1840954|
|     |                                               |saphana20|Pool/RowEngine/QueryExecution (66 GB)            |none           |X|SAP Note 1840954|
|     |                                               |saphana20|Pool/Statistics (55 GB)                          |none           |X|SAP Note 1840954|
|  430|Number of column store unloads (last day)      |         |0                                                |0              | |                |
|  431|Time since last column store unload (days)     |saphana20|45.72                                            |>= 5.00        | |                |
|     |                                               |         |                                                 |               | |                |
|**** |TABLES                                         |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
|  510|Tables with > 100 partitions                   |         |0                                                |0              | |                |
|  520|Tables / partitions exceeding 1 billion rows   |         |none                                             |none           | |                |
|  530|Shared memory row store size (GB)              |saphana20|119                                              |<= 500         | |SAP Note 1963779|
|  535|Row store (> 10 GB) fragmentation (%)          |saphana20|19                                               |<= 30          | |SAP Note 1813245|
|  540|Delta merges > 200 s (last day)                |saphana20|42                                               |0              |X|                |
|  541|Failing delta merges (last day)                |saphana20|0                                                |0              | |                |
|  542|Tables with delta storage > 5 GB               |         |KONV (6.98 GB)                                   |none           |X|                |
|  543|Tables with > 1 Mio. and > 90 % of delta rows  |         |ZRB04 (1552842 rows, 100 %)                      |none           |X|                |
|     |                                               |         |                                                 |               | |                |
|**** |TRACES, DUMPS and LOGS                         |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
|  612|Performance trace enabled                      |         |no                                               |no             | |SAP Note 1787489|
|  614|SQL trace enabled                              |         |no                                               |no             | |                |
|  616|Indexserver python trace enabled               |         |no                                               |no             | |SAP Note 1935113|
|  617|Executor python trace enabled                  |         |no                                               |no             | |SAP Note 2020877|
|  618|Minimum expensive SQL trace threshold (ms)     |         |1000                                             |>= 1000        | |                |
|  620|Existence of modified trace settings           |         |yes                                              |no             |X|                |
|  630|Number of tracefiles (total)                   |saphana20|586                                              |<= 100         |X|                |
|     |                                               |saphana21|368                                              |<= 100         |X|                |
|  631|Number of tracefiles (last day)                |saphana20|15                                               |<= 30          | |                |
|     |                                               |saphana21|5                                                |<= 30          | |                |
|  632|Size of tracefiles (GB, total)                 |saphana20|5.53                                             |<= 6.00        | |                |
|     |                                               |saphana21|6.60                                             |<= 6.00        |X|                |
|  633|Size of tracefiles (GB, last day)              |saphana20|0.21                                             |<= 1.00        | |                |
|     |                                               |saphana21|0.00                                             |<= 1.00        | |                |
|  635|Number of OOM tracefiles (last day)            |saphana20|0                                                |0              | |                |
|     |                                               |saphana21|0                                                |0              | |                |
|  640|Number of crash dumps (last day)               |saphana20|0                                                |0              | |                |
|     |                                               |saphana21|0                                                |0              | |                |
|  645|Number of RTE dumps (last day)                 |saphana20|0                                                |0              | |                |
|     |                                               |saphana21|0                                                |0              | |                |
|     |                                               |         |                                                 |               | |                |
|**** |ALERTS AND EVENTS                              |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
|  710|Open alerts                                    |         |1 High, 10 Medium, 12 Low                        |not like %High%|X|                |
|  711|Failure retrieving alerts                      |         |no                                               |no             | |                |
|  715|Number of alert checks not executed as expected|         |0                                                |0              | |                |
|  720|Events without acknowledgement                 |         |0                                                |0              | |                |
|     |                                               |         |                                                 |               | |                |
|**** |TRANSACTIONS AND THREADS                       |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
|  810|MVCC versions in row store                     |saphana20|19756                                            |<= 1000000     | |                |
|  811|Age of transaction blocking MVCC (s)           |         |26                                               |<= 10800       | |                |
|  820|Oldest active transaction (s)                  |saphana20|179473                                           |<= 36000       |X|                |
|  830|Active commit ID range                         |saphana20|13235                                            |<= 3000000     | |                |
|  840|Active update transaction ID range             |saphana20|883670                                           |<= 3000000     | |                |
|  841|Oldest active update transaction (s)           |saphana20|1648                                             |<= 10800       | |                |
|     |                                               |         |                                                 |               | |                |
|**** |BACKUP                                         |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
|  910|Age of last data backup (days)                 |         |0.63                                             |<= 1.20        | |                |
|  911|Age of last data backup error (days)           |         |4.63                                             |>= 1.20        | |                |
|  915|Max. duration of data backup (h, last week)    |         |5.33                                             |<= 6.00        | |                |
|  916|Avg. duration of data backup (h, last week)    |         |3.62                                             |<= 4.00        | |                |
|  920|Age of last log backup (days)                  |         |0.00                                             |<= 1.00        | |                |
|  921|Age of last log backup error (days)            |         |59.90                                            |>= 1.00        | |                |
|  930|Automatic log backup                           |         |yes                                              |yes            | |                |
|     |                                               |         |                                                 |               | |                |
|**** |LOCKS                                          |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
| 1010|Age of oldest active lock wait (s)             |         |0                                                |<= 60          | |                |
| 1011|Lock wait durations > 600 s (last day)         |         |0                                                |0              | |                |
| 1020|Threads currently waiting for locks            |         |20                                               |<= 40          | |                |
|     |                                               |         |                                                 |               | |                |
|**** |SQL                                            |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
| 1110|SQL statement allocating > 1 session (last day)|         |6ea8ae87f49702463799a8a2a51d840c (1.10 sessions) |none           |X|                |
| 1115|Longest running current SQL statement (s)      |         |24                                               |<= 600         | |                |
| 1120|Exp. stmt. trace: SQL running > 1 h (last day) |         |0                                                |0              | |                |
| 1130|SQL cache evictions / h                        |saphana20|5829                                             |<= 1000        |X|                |
|     |                                               |         |                                                 |               | |                |
|**** |APPLICATION                                    |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
| 1210|DDLOG sequence cache size                      |         |1                                                |>= 2           |X|SAP Note 1977214|
|     |                                               |         |                                                 |               | |                |
|**** |SECURITY                                       |         |                                                 |               | |                |
|     |                                               |         |                                                 |               | |                |
| 1310|Secure store (SSFS) status                     |saphana20|available                                        |available      | |                |
|     |                                               |saphana21|available                                        |available      | |                |
| 1320|Number of users with activated auditing        |         |0                                                |0              | |                |
------------------------------------------------------------------------------------------------------------------------------------------------------

*/

  CASE 
    WHEN NAME = 'BLANK_LINE' THEN ''
    WHEN NAME = 'INFO_LINE' THEN '****' 
    WHEN ONLY_POTENTIALLY_CRITICAL_RESULTS = 'X' OR REPEAT_CHECK_IDS = 'X' OR ROW_NUM = 1 OR ORDER_BY = 'HOST' THEN LPAD(CHECK_NUM, 5) 
    ELSE '' 
  END CHID,
  CASE WHEN ONLY_POTENTIALLY_CRITICAL_RESULTS = 'X' OR REPEAT_CHECK_IDS = 'X' OR ROW_NUM = 1 OR ORDER_BY = 'HOST' THEN DESCRIPTION ELSE '' END DESCRIPTION,
  IFNULL(HOST, '') HOST,
  MAP(VALUE, '999999', 'never', '999999.00', 'never', '-999999', 'never', '-999999.00', 'never', NULL, 'n/a', 
    CASE WHEN MAX_VALUE_LENGTH = -1 OR LENGTH(VALUE) <= MAX_VALUE_LENGTH THEN VALUE 
      ELSE SUBSTR(VALUE, 1, VALUE_FRAGMENT_LENGTH) || '...' || SUBSTR(VALUE, LENGTH(VALUE) - (VALUE_FRAGMENT_LENGTH - 1), VALUE_FRAGMENT_LENGTH) END) VALUE,
  CASE
    WHEN EXPECTED_OP = 'any'  THEN ''
    WHEN EXPECTED_OP = '='    THEN EXPECTED_VALUE
    WHEN EXPECTED_OP = 'like' THEN EXPECTED_OP || CHAR(32) || CHAR(39) || EXPECTED_VALUE || CHAR(39)
    ELSE EXPECTED_OP || CHAR(32) || EXPECTED_VALUE
  END EXPECTED_VALUE,
  POTENTIALLY_CRITICAL C,
  LPAD(SAP_NOTE, 8) SAP_NOTE
FROM
( SELECT
    CC.CHECK_NUM,
    CC.NAME,
    CC.DESCRIPTION,
    C.HOST,
    C.VALUE,
    CC.SAP_NOTE,
    CC.EXPECTED_OP,
    CC.EXPECTED_VALUE,
    CASE
      WHEN C.VALUE IN ('999999', '999999.00', '-999999', '-999999.00')                                            THEN ' '
      WHEN CC.EXPECTED_OP = 'any' OR UPPER(C.VALUE) = 'NONE'                                                      THEN ' '
      WHEN CC.EXPECTED_OP = 'not'      AND LPAD(UPPER(C.VALUE), 100) =        LPAD(UPPER(CC.EXPECTED_VALUE), 100) THEN 'X'
      WHEN CC.EXPECTED_OP = '='        AND LPAD(UPPER(C.VALUE), 100) !=       LPAD(UPPER(CC.EXPECTED_VALUE), 100) THEN 'X'
      WHEN CC.EXPECTED_OP = '>='       AND LPAD(UPPER(C.VALUE), 100) <        LPAD(UPPER(CC.EXPECTED_VALUE), 100) THEN 'X'
      WHEN CC.EXPECTED_OP = '>'        AND LPAD(UPPER(C.VALUE), 100) <=       LPAD(UPPER(CC.EXPECTED_VALUE), 100) THEN 'X'
      WHEN CC.EXPECTED_OP = CHAR(60) || '=' AND LPAD(UPPER(C.VALUE), 100) >   LPAD(UPPER(CC.EXPECTED_VALUE), 100) THEN 'X'
      WHEN CC.EXPECTED_OP = CHAR(60)   AND LPAD(UPPER(C.VALUE), 100) >=       LPAD(UPPER(CC.EXPECTED_VALUE), 100) THEN 'X'
      WHEN CC.EXPECTED_OP = 'like'     AND UPPER(C.VALUE)            NOT LIKE UPPER(CC.EXPECTED_VALUE)            THEN 'X'
      WHEN CC.EXPECTED_OP = 'not like' AND UPPER(C.VALUE)            LIKE     UPPER(CC.EXPECTED_VALUE)            THEN 'X'
      ELSE ''
    END POTENTIALLY_CRITICAL,
    BI.ONLY_POTENTIALLY_CRITICAL_RESULTS,
    BI.REPEAT_CHECK_IDS,
    BI.MAX_VALUE_LENGTH,
    FLOOR(BI.MAX_VALUE_LENGTH / 2 - 0.5) VALUE_FRAGMENT_LENGTH,
    BI.ORDER_BY,
    ROW_NUMBER () OVER ( PARTITION BY CC.DESCRIPTION ORDER BY C.HOST, C.VALUE ) ROW_NUM
  FROM
/* TMC_GENERATION_START_1 */
  ( SELECT
      'REVISION_LEVEL' NAME,
      '' HOST,
      LTRIM(CASE
        WHEN LOCATE(VALUE, '.', 1, 4) - LOCATE(VALUE, '.', 1, 3) = 3 THEN
          SUBSTR(VALUE, LOCATE(VALUE, '.', 1, 2) + 1, LOCATE(VALUE, '.', 1, 4) - LOCATE(VALUE, '.', 1, 2) - 1)
        ELSE 
          SUBSTR(VALUE, LOCATE(VALUE, '.', 1, 2) + 1, LOCATE(VALUE, '.', 1, 3) - LOCATE(VALUE, '.', 1, 2) - 1) || '.00'
      END, '0') VALUE
    FROM 
      M_SYSTEM_OVERVIEW 
    WHERE 
      SECTION = 'System' AND 
      NAME = 'Version'
    UNION ALL
    ( SELECT
        'CHECK_VERSION',
        '',
        '1.5.6 (2017/11/01)'
      FROM
        DUMMY
    )
    UNION ALL
    ( SELECT
        'BLANK_LINE',
        '',
        ''
      FROM
        DUMMY
    )
    UNION ALL
    ( SELECT
        'INFO_LINE',
        '',
        ''
      FROM
        DUMMY
    )
    UNION ALL
    ( SELECT
        'EVERYTHING_STARTED',
        '',
        LOWER(VALUE)
      FROM
        M_SYSTEM_OVERVIEW
      WHERE
        SECTION = 'Services' AND
        NAME = 'All Started'
    )
    UNION ALL
    ( SELECT /* no longer relevant with RHEL >= 7.x and SLES 12.x where usually the intel_pstate driver is used */
        'SLOW_CPU',
        H1.HOST,
        H1.VALUE
      FROM
        M_HOST_INFORMATION H1,
        M_HOST_INFORMATION H2
      WHERE
        H1.HOST = H2.HOST AND
        H1.KEY = 'cpu_clock' AND
        H2.KEY = 'os_name' AND
        ( H2.VALUE LIKE 'SUSE Linux Enterprise Server 11%' OR
          H2.VALUE LIKE 'Red Hat Enterprise Linux Server release 6%' OR
          H2.VALUE LIKE 'Linux 2.6.32%'
        )
    )
    UNION ALL
    ( SELECT  /* no longer relevant with RHEL >= 7.x and SLES 12.x where usually the intel_pstate driver is used */
        'VARYING_CPU',
        '',
        CASE WHEN MAX(H1.VALUE) IS NULL OR MAX(H1.VALUE) - MIN(H1.VALUE) < 100 THEN 'no' ELSE 'yes' END
      FROM
        M_HOST_INFORMATION H1,
        M_HOST_INFORMATION H2
      WHERE
        H1.HOST = H2.HOST AND
        H1.KEY = 'cpu_clock' AND
        H2.KEY = 'os_name' AND
        ( H2.VALUE LIKE 'SUSE Linux Enterprise Server 11%' OR
          H2.VALUE LIKE 'Red Hat Enterprise Linux Server release 6%' OR
          H2.VALUE LIKE 'Linux 2.6.32%'
        )
    )
    UNION ALL
    ( SELECT
        'HOST_START_TIME_VARIATION',
        '',
        TO_VARCHAR(MAX(SECONDS_BETWEEN(MIN_TIME, MAX_TIME)))
      FROM
      ( SELECT
          MIN(VALUE) MIN_TIME,
          MAX(VALUE) MAX_TIME
        FROM
          M_HOST_INFORMATION
        WHERE
          KEY = 'start_time'
      )
    )
    UNION ALL
    ( SELECT 
        'PERFORMANCE_TRACE',
        '',
        MAP(STATUS, 'STOPPED', 'no', 'yes') 
      FROM 
        M_PERFTRACE
    )
    UNION ALL
    ( SELECT 
        'FUNCTION_PROFILER',
        '',
        CASE WHEN STATUS != 'STOPPED' AND FUNCTION_PROFILER != 'FALSE' THEN 'yes' ELSE 'no' END
      FROM 
        M_PERFTRACE
    )
    UNION ALL
    ( SELECT
        'LOG_WAIT_RATIO',
        HOST,
        TO_VARCHAR(ROUND(
          CASE
          WHEN SUM(SWITCH_NOWAIT_COUNT) + SUM(SWITCH_WAIT_COUNT) = 0 THEN 0
          ELSE SUM(SWITCH_WAIT_COUNT) / (SUM(SWITCH_NOWAIT_COUNT) + SUM(SWITCH_WAIT_COUNT)) * 100 END ) ) 
      FROM
        M_LOG_BUFFERS
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'LOG_RACE_RATIO',
        HOST,
        TO_VARCHAR(ROUND(
          CASE
          WHEN SUM(SWITCH_NOWAIT_COUNT) + SUM(SWITCH_OPEN_COUNT) = 0 THEN 0
          ELSE SUM(SWITCH_OPEN_COUNT) / (SUM(SWITCH_NOWAIT_COUNT) + SUM(SWITCH_OPEN_COUNT)) * 100 END ) ) 
      FROM
        M_LOG_BUFFERS
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'OPEN_ALERTS_HIGH',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.STATISTICS_CURRENT_ALERTS
      WHERE
        ALERT_RATING = 4
    )
    UNION ALL
    ( SELECT
        'OPEN_ALERTS_ERROR',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.STATISTICS_CURRENT_ALERTS
      WHERE
        ALERT_RATING = 5
    )
    UNION ALL
    ( SELECT
        'STAT_SERVER_INTERNAL_ERRORS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.STATISTICS_ALERTS
      WHERE
        ALERT_TIMESTAMP >= ADD_SECONDS(CURRENT_TIMESTAMP, -86400) AND
        ALERT_ID = 0
    )
    UNION ALL
    ( SELECT
        'CHECKS_NOT_RUNNING',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.STATISTICS_SCHEDULE
      WHERE
        STATUS != 'Inactive' AND
        SECONDS_BETWEEN(LATEST_START_SERVERTIME, CURRENT_TIMESTAMP) / 2 > INTERVALLENGTH
    )
    UNION ALL
    ( SELECT
        'STAT_SERVER_NO_WORKERS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_SERVICE_THREADS
      WHERE
        THREAD_TYPE LIKE 'WorkerThread%'
    )
    UNION ALL
    ( SELECT
        'OPEN_EVENTS',
        HOST,
        TO_VARCHAR(SUM(MAP(ACKNOWLEDGED, 'FALSE', 1, 0)))
      FROM
        DUMMY LEFT OUTER JOIN
        M_EVENTS ON
          ACKNOWLEDGED = 'FALSE' AND
          SECONDS_BETWEEN(CREATE_TIME, CURRENT_TIMESTAMP) >= 1800
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT 
        'OS_OPEN_FILES',
        HOST,
        LTRIM(MIN(LPAD(VALUE, 20)))
      FROM
        M_HOST_INFORMATION
      WHERE 
        KEY = 'os_rlimit_nofile'
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'ROW_STORE_CONTAINERS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_RS_TABLES
      WHERE
        CONTAINER_COUNT > 1
    )
    UNION ALL
    ( SELECT 
        'ROW_STORE_FRAGMENTATION',
        IFNULL(HOST, ''),
        IFNULL(TO_VARCHAR(ROUND(MAP(ALLOCATED_SIZE, 0, NULL, FREE_SIZE / ALLOCATED_SIZE * 100))), 'none')
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          HOST,
          SUM(FREE_SIZE) FREE_SIZE,
          SUM(ALLOCATED_SIZE) ALLOCATED_SIZE
        FROM
          M_RS_MEMORY
        WHERE 
          CATEGORY IN ( 'TABLE' , 'CATALOG' ) 
        GROUP BY
          HOST
        HAVING
          SUM(ALLOCATED_SIZE) >= 10737418240
      ) ON
        1 = 1
    )
    UNION ALL
    ( SELECT TOP 1
        'ROW_STORE_SIZE',
        HOST,
        TO_VARCHAR(ROUND(SUM(ALLOCATED_SIZE) / 1024 / 1024 / 1024))
      FROM
        M_RS_MEMORY
      GROUP BY
        HOST
      ORDER BY
        SUM(ALLOCATED_SIZE) DESC
    )      
    UNION ALL
    ( SELECT
        'VERSIONS_ROW_STORE_CURR',
        HOST,
        TO_VARCHAR(SUM(VERSION_COUNT))
      FROM
        M_MVCC_OVERVIEW
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'MVCC_REC_VERSIONS_ROW_STORE',
        HOST,
        TO_VARCHAR(MAX(TO_NUMBER(VALUE)))
      FROM
        M_MVCC_TABLES
      WHERE
        NAME = 'MAX_VERSIONS_PER_RECORD'
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        C.NAME,
        M.HOST,
        MAP(C.NAME,
          'ACTIVE_UPDATE_TID_RANGE', TO_VARCHAR(M.CUR_UPDATE_TID - M.MIN_UPDATE_TID),
          'ACTIVE_COMMIT_ID_RANGE', TO_VARCHAR(M.CUR_COMMIT_ID - M.MIN_COMMIT_ID))
      FROM
      ( SELECT 'ACTIVE_UPDATE_TID_RANGE' NAME FROM DUMMY UNION ALL
        SELECT 'ACTIVE_COMMIT_ID_RANGE' FROM DUMMY 
      ) C,         
      ( SELECT
          HOST,
          MIN(MAP(NAME, 'MIN_SNAPSHOT_TS',              TO_NUMBER(VALUE), 999999999999999999999)) MIN_COMMIT_ID,
          MAX(MAP(NAME, 'GLOBAL_TS',                    TO_NUMBER(VALUE), 0)) CUR_COMMIT_ID,
          MIN(MAP(NAME, 'MIN_WRITE_TID',                TO_NUMBER(VALUE), 999999999999999999999)) MIN_UPDATE_TID,
          MAX(MAP(NAME, 'NEXT_WRITE_TID',               TO_NUMBER(VALUE), 0)) CUR_UPDATE_TID
        FROM
          M_MVCC_TABLES
        GROUP BY
          HOST
      ) M
    )
    UNION ALL
    ( SELECT
        'LICENSE_LIMIT',
        '',
        CASE WHEN PRODUCT_LIMIT = 0 THEN '0' ELSE TO_VARCHAR(ROUND(PRODUCT_USAGE / PRODUCT_LIMIT * 100)) END
      FROM 
        M_LICENSE
    )
    UNION ALL
    ( SELECT
        'LAST_DATA_BACKUP',
        '',
        TO_VARCHAR(TO_DECIMAL(MAP(MAX(SYS_START_TIME), NULL, 999999, SECONDS_BETWEEN(MAX(SYS_START_TIME), CURRENT_TIMESTAMP) / 86400), 10, 2))
      FROM
        DUMMY LEFT OUTER JOIN
        M_BACKUP_CATALOG ON
          1 = 1
      WHERE
        ENTRY_TYPE_NAME IN ( 'complete data backup', 'differential data backup', 'incremental data backup', 'data snapshot' ) AND
        STATE_NAME = 'successful'
    )
    UNION ALL
    ( SELECT
        'LAST_DATA_BACKUP_ERROR',
        '',
        IFNULL(TO_VARCHAR(TO_DECIMAL(SECONDS_BETWEEN(MAX(SYS_START_TIME), CURRENT_TIMESTAMP) / 86400, 10, 2)), '999999') VALUE
      FROM
        DUMMY LEFT OUTER JOIN
        M_BACKUP_CATALOG ON
          ENTRY_TYPE_NAME IN ( 'complete data backup', 'differential data backup', 'incremental data backup', 'data snapshot' ) AND
          STATE_NAME NOT IN ( 'successful', 'running' )
    )
    UNION ALL
    ( SELECT
        NAME,
        '',
        CASE
          WHEN NAME = 'MIN_DATA_BACKUP_THROUGHPUT' THEN TO_VARCHAR(TO_DECIMAL(MIN(MAP(BACKUP_DURATION_H, 0, 999999, BACKUP_SIZE_GB / BACKUP_DURATION_H)), 10, 2))
          WHEN NAME = 'AVG_DATA_BACKUP_THROUGHPUT' THEN TO_VARCHAR(TO_DECIMAL(AVG(MAP(BACKUP_DURATION_H, 0, 0,      BACKUP_SIZE_GB / BACKUP_DURATION_H)), 10, 2))
        END
      FROM
      ( SELECT
          C.NAME,
          SECONDS_BETWEEN(B.SYS_START_TIME, B.SYS_END_TIME) / 3600 BACKUP_DURATION_H,
          ( SELECT SUM(BACKUP_SIZE) / 1024 / 1024 / 1024 FROM M_BACKUP_CATALOG_FILES BF WHERE BF.BACKUP_ID = B.BACKUP_ID ) BACKUP_SIZE_GB
        FROM
        ( SELECT 'MIN_DATA_BACKUP_THROUGHPUT' NAME FROM DUMMY UNION ALL
          SELECT 'AVG_DATA_BACKUP_THROUGHPUT' FROM DUMMY 
        ) C,
          M_BACKUP_CATALOG B
        WHERE
          B.ENTRY_TYPE_NAME IN ( 'complete data backup', 'differential data backup', 'incremental data backup', 'data snapshot' ) AND
          B.STATE_NAME = 'successful' AND
          DAYS_BETWEEN(B.SYS_START_TIME, CURRENT_TIMESTAMP) <= 7
      )
      GROUP BY
        NAME
    )
    UNION ALL
    ( SELECT
        'LAST_LOG_BACKUP',
        '',
        TO_VARCHAR(TO_DECIMAL(MAP(MAX(SYS_START_TIME), NULL, 999999, GREATEST(0, SECONDS_BETWEEN(MAX(SYS_START_TIME), CURRENT_TIMESTAMP)) / 3600), 10, 2))
      FROM
        DUMMY LEFT OUTER JOIN
        M_BACKUP_CATALOG ON
          1 = 1
      WHERE
        ENTRY_TYPE_NAME = 'log backup' AND
        STATE_NAME = 'successful'
    )
    UNION ALL
    ( SELECT
        'LAST_LOG_BACKUP_ERROR',
        '',
        IFNULL(TO_VARCHAR(TO_DECIMAL(SECONDS_BETWEEN(MAX(SYS_START_TIME), CURRENT_TIMESTAMP) / 86400, 10, 2)), '999999') VALUE
      FROM
        DUMMY LEFT OUTER JOIN
        M_BACKUP_CATALOG ON
          ENTRY_TYPE_NAME = 'log backup' AND
          STATE_NAME NOT IN ( 'successful', 'running' )
    )
    UNION ALL
    ( SELECT
        'LOG_BACKUP_ERRORS_LAST_MONTH',
        '',
        TO_VARCHAR(COUNT(*)) VALUE
      FROM
        M_BACKUP_CATALOG
      WHERE
        ENTRY_TYPE_NAME = 'log backup' AND
        STATE_NAME NOT IN ( 'successful', 'running' ) AND
        SECONDS_BETWEEN(SYS_START_TIME, CURRENT_TIMESTAMP) < 86400 * 30
    )
    UNION ALL
    ( SELECT
        I.NAME,
        IFNULL(HOST, ''),
        CASE I.NAME
          WHEN 'CURRENT_LARGE_HEAP_AREAS' THEN IFNULL(CATEGORY || ' (' || ROUND(EXCLUSIVE_SIZE_IN_USE / 1024 / 1024 / 1024) || ' GB)', 'none')
          WHEN 'FREQUENT_ALLOCATORS' THEN IFNULL(CATEGORY || ' (' || NUM_INSTANTIATIONS || ')', 'none')
        END
      FROM
      ( SELECT 'CURRENT_LARGE_HEAP_AREAS' NAME FROM DUMMY UNION ALL
        SELECT 'FREQUENT_ALLOCATORS' FROM DUMMY
      ) I LEFT OUTER JOIN
      ( SELECT
          HOST,
          CATEGORY,
          SUM(EXCLUSIVE_SIZE_IN_USE) EXCLUSIVE_SIZE_IN_USE,
          COUNT(*) NUM_INSTANTIATIONS
        FROM
          M_HEAP_MEMORY
        GROUP BY
          HOST,
          CATEGORY
      ) M ON
        ( I.NAME = 'CURRENT_LARGE_HEAP_AREAS' AND
          M.EXCLUSIVE_SIZE_IN_USE >= 53687091200 AND
          M.CATEGORY NOT LIKE 'Pool/AttributeEngine%' AND
          M.CATEGORY NOT LIKE 'Pool/ColumnStore%' AND
          M.CATEGORY NOT IN
          ( 'Pool/malloc/libhdbcstypes.so',
            'Pool/NameIdMapping/RoDict',
            'Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page',
            'Pool/PersistenceManager/PersistentSpace/DefaultLPA/Page',
            'Pool/PersistenceManager/PersistentSpace(0)/StaticLPA/Page',
            'Pool/PersistenceManager/PersistentSpace/StaticLPA/Page',
            'Pool/RowEngine/CpbTree',
            'Pool/RowStoreTables/CpbTree',
            'StackAllocator'
          )
        ) OR
        ( I.NAME = 'FREQUENT_ALLOCATORS' AND
          M.NUM_INSTANTIATIONS >= 10000
        )
    )
    UNION ALL
    ( SELECT
        'RECENT_LARGE_HEAP_AREAS',
        IFNULL(HOST, ''),
        IFNULL(CATEGORY || ' (' || ROUND(EXCLUSIVE_SIZE_IN_USE / 1024 / 1024 / 1024) || ' GB)', 'none')
      FROM
        DUMMY LEFT OUTER JOIN
        ( SELECT
            HOST,
            CATEGORY,
            MAX(EXCLUSIVE_SIZE_IN_USE) EXCLUSIVE_SIZE_IN_USE
          FROM
            _SYS_STATISTICS.HOST_HEAP_ALLOCATORS
          WHERE
            SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) <= 90000 AND
            CATEGORY NOT LIKE 'Pool/AttributeEngine%' AND
            CATEGORY NOT LIKE 'Pool/ColumnStore%' AND
            CATEGORY NOT IN
            ( 'Pool/malloc/libhdbcstypes.so',
              'Pool/NameIdMapping/RoDict',
              'Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page',
              'Pool/PersistenceManager/PersistentSpace/DefaultLPA/Page',
              'Pool/PersistenceManager/PersistentSpace(0)/StaticLPA/Page',
              'Pool/PersistenceManager/PersistentSpace/StaticLPA/Page',
              'Pool/RowEngine/CpbTree',
              'Pool/RowStoreTables/CpbTree',
              'StackAllocator'
            )
          GROUP BY
            HOST,
            CATEGORY
        ) ON
          EXCLUSIVE_SIZE_IN_USE >= 107374182400
      ORDER BY
        EXCLUSIVE_SIZE_IN_USE DESC
    )
    UNION ALL
    ( SELECT
        'HISTORIC_LARGE_HEAP_AREAS',
        IFNULL(HOST, ''),
        IFNULL(CATEGORY || ' (' || ROUND(EXCLUSIVE_SIZE_IN_USE / 1024 / 1024 / 1024) || ' GB)', 'none')
      FROM
        DUMMY LEFT OUTER JOIN
        ( SELECT
            HOST,
            CATEGORY,
            MAX(EXCLUSIVE_SIZE_IN_USE) EXCLUSIVE_SIZE_IN_USE
          FROM
            _SYS_STATISTICS.HOST_HEAP_ALLOCATORS
          WHERE
            CATEGORY NOT LIKE 'Pool/AttributeEngine%' AND
            CATEGORY NOT LIKE 'Pool/ColumnStore%' AND
            CATEGORY NOT IN
            ( 'Pool/malloc/libhdbcstypes.so',
              'Pool/NameIdMapping/RoDict',
              'Pool/PersistenceManager/PersistentSpace(0)/DefaultLPA/Page',
              'Pool/PersistenceManager/PersistentSpace/DefaultLPA/Page',
              'Pool/PersistenceManager/PersistentSpace(0)/StaticLPA/Page',
              'Pool/PersistenceManager/PersistentSpace/StaticLPA/Page',
              'Pool/RowEngine/CpbTree',
              'Pool/RowStoreTables/CpbTree',
              'StackAllocator'
            )
          GROUP BY
            HOST,
            CATEGORY
        ) ON
          EXCLUSIVE_SIZE_IN_USE >= 214748364800
      ORDER BY
        EXCLUSIVE_SIZE_IN_USE DESC
    )
    UNION ALL
    ( SELECT
        'MANY_PARTITIONS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
      ( SELECT
          SCHEMA_NAME,
          TABLE_NAME
        FROM
          M_CS_TABLES
        GROUP BY
          SCHEMA_NAME,
          TABLE_NAME
        HAVING
          COUNT(*) > 100
      )
    )  
    UNION ALL
    ( SELECT
        'ACTIVE_UPDATE_TRANS_TIME',
        IFNULL(HOST, '') HOST,
        IFNULL(TO_VARCHAR(MAX(GREATEST(0, SECONDS_BETWEEN(START_TIME, CURRENT_TIMESTAMP)))), '0')
      FROM
        DUMMY LEFT OUTER JOIN
        M_TRANSACTIONS ON
          UPDATE_TRANSACTION_ID > 0 AND 
          TRANSACTION_STATUS = 'ACTIVE'
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        C.NAME,
        O.HOST,
        CASE
          WHEN C.NAME = 'CPU_BUSY_CURRENT' THEN
            TO_VARCHAR(ROUND(MAX(MAP(TOTAL_CPU_USER_TIME_DELTA + TOTAL_CPU_SYSTEM_TIME_DELTA + TOTAL_CPU_WIO_TIME_DELTA + TOTAL_CPU_IDLE_TIME_DELTA, 0, 0, 
              (TOTAL_CPU_USER_TIME_DELTA + TOTAL_CPU_SYSTEM_TIME_DELTA) / (TOTAL_CPU_USER_TIME_DELTA + TOTAL_CPU_SYSTEM_TIME_DELTA + TOTAL_CPU_WIO_TIME_DELTA + TOTAL_CPU_IDLE_TIME_DELTA)) * 100)))
          WHEN C.NAME = 'MEMORY_USED_CURRENT' THEN
            TO_VARCHAR(ROUND(MAX(MAP(FREE_PHYSICAL_MEMORY + USED_PHYSICAL_MEMORY, 0, 0, USED_PHYSICAL_MEMORY / (FREE_PHYSICAL_MEMORY + USED_PHYSICAL_MEMORY)) * 100)))
          WHEN C.NAME = 'SWAP_SPACE_USED_CURRENT' THEN
            TO_VARCHAR(ROUND(MAX(USED_SWAP_SPACE) / 1024 / 1024 / 1024))
        END
      FROM
      ( SELECT 'CPU_BUSY_CURRENT' NAME FROM DUMMY UNION ALL
        SELECT 'MEMORY_USED_CURRENT' FROM DUMMY UNION ALL
        SELECT 'SWAP_SPACE_USED_CURRENT' FROM DUMMY
      ) C,
      ( SELECT 
          * 
        FROM 
          _SYS_STATISTICS.HOST_RESOURCE_UTILIZATION_STATISTICS 
        WHERE 
        SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) <= 600 AND
        TOTAL_CPU_USER_TIME_DELTA + TOTAL_CPU_SYSTEM_TIME_DELTA + TOTAL_CPU_WIO_TIME_DELTA + TOTAL_CPU_IDLE_TIME_DELTA > 0
      ) O
      GROUP BY
        C.NAME,
        O.HOST
    )
    UNION ALL
    ( SELECT
        C.NAME,
        R.HOST,
        TO_VARCHAR(ROUND(MAX(CASE C.NAME
          WHEN 'CPU_BUSY_RECENT' THEN 
            (R.TOTAL_CPU_USER_TIME_DELTA + R.TOTAL_CPU_SYSTEM_TIME_DELTA) / 
            (R.TOTAL_CPU_USER_TIME_DELTA + R.TOTAL_CPU_SYSTEM_TIME_DELTA + R.TOTAL_CPU_WIO_TIME_DELTA + R.TOTAL_CPU_IDLE_TIME_DELTA) * 100
          WHEN 'CPU_BUSY_SYSTEM_RECENT' THEN
            R.TOTAL_CPU_SYSTEM_TIME_DELTA /
            (R.TOTAL_CPU_USER_TIME_DELTA + R.TOTAL_CPU_SYSTEM_TIME_DELTA + R.TOTAL_CPU_WIO_TIME_DELTA + R.TOTAL_CPU_IDLE_TIME_DELTA) * 100
        END)))
      FROM
      ( SELECT 'CPU_BUSY_RECENT' NAME FROM DUMMY UNION ALL
        SELECT 'CPU_BUSY_SYSTEM_RECENT' FROM DUMMY
      ) C,
      ( SELECT
          HOST,
          AVG(TOTAL_CPU_USER_TIME_DELTA) TOTAL_CPU_USER_TIME_DELTA,
          AVG(TOTAL_CPU_SYSTEM_TIME_DELTA) TOTAL_CPU_SYSTEM_TIME_DELTA,
          AVG(TOTAL_CPU_WIO_TIME_DELTA) TOTAL_CPU_WIO_TIME_DELTA,
          AVG(TOTAL_CPU_IDLE_TIME_DELTA) TOTAL_CPU_IDLE_TIME_DELTA
        FROM
          _SYS_STATISTICS.HOST_RESOURCE_UTILIZATION_STATISTICS
        WHERE
          SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) <= 86400 AND
          TOTAL_CPU_USER_TIME_DELTA + TOTAL_CPU_SYSTEM_TIME_DELTA + TOTAL_CPU_WIO_TIME_DELTA + TOTAL_CPU_IDLE_TIME_DELTA > 0
        GROUP BY
          HOST,
          FLOOR(SECONDS_BETWEEN(CURRENT_TIMESTAMP, SERVER_TIMESTAMP) / 300)
      ) R
      GROUP BY
        C.NAME,
        R.HOST 
    )
    UNION ALL
    ( SELECT
        'CPU_BUSY_HISTORY',
        HOST,
        IFNULL(TO_VARCHAR(TO_DECIMAL(SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) / 3600, 10, 2)), '999999')
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          HOST,
          MAX(SERVER_TIMESTAMP) SERVER_TIMESTAMP
        FROM
          _SYS_STATISTICS.HOST_RESOURCE_UTILIZATION_STATISTICS 
        WHERE
          MAP(TOTAL_CPU_USER_TIME_DELTA + TOTAL_CPU_SYSTEM_TIME_DELTA + TOTAL_CPU_WIO_TIME_DELTA + TOTAL_CPU_IDLE_TIME_DELTA, 0, 0,
            ( TOTAL_CPU_USER_TIME_DELTA + TOTAL_CPU_SYSTEM_TIME_DELTA ) / 
            ( TOTAL_CPU_USER_TIME_DELTA + TOTAL_CPU_SYSTEM_TIME_DELTA + TOTAL_CPU_WIO_TIME_DELTA + TOTAL_CPU_IDLE_TIME_DELTA ) * 100) > 95
        GROUP BY
          HOST
      ) ON
          1 = 1
    )
    UNION ALL
    ( SELECT
        'MEMORY_USED_HISTORY',
        HOST,
        IFNULL(TO_VARCHAR(TO_DECIMAL(SECONDS_BETWEEN(MAX(SERVER_TIMESTAMP), CURRENT_TIMESTAMP) / 3600, 10, 2)), '999999')
      FROM
        DUMMY LEFT OUTER JOIN
        _SYS_STATISTICS.HOST_RESOURCE_UTILIZATION_STATISTICS ON
          FREE_PHYSICAL_MEMORY + USED_PHYSICAL_MEMORY > 0 AND
          USED_PHYSICAL_MEMORY / (FREE_PHYSICAL_MEMORY + USED_PHYSICAL_MEMORY) * 100 > 95
      GROUP BY 
        HOST
    )
    UNION ALL
    ( SELECT
        'SWAP_SPACE_USED_HISTORY',
        HOST,
        IFNULL(TO_VARCHAR(ROUND(SECONDS_BETWEEN(MAX(SERVER_TIMESTAMP), CURRENT_TIMESTAMP) / 3600)), '999999')
      FROM
        DUMMY LEFT OUTER JOIN
        _SYS_STATISTICS.HOST_RESOURCE_UTILIZATION_STATISTICS ON
          ROUND(USED_SWAP_SPACE / 1024 / 1024 / 1024) > 0
      GROUP BY 
        HOST
    )
    UNION ALL
    ( SELECT
        C.NAME,
        '',
        CASE
          WHEN C.NAME = 'HIGH_CRIT_SAVEPOINT_PHASE'  THEN TO_VARCHAR(SUM(CASE WHEN (CRITICAL_PHASE_WAIT_TIME + CRITICAL_PHASE_DURATION) / 1000000 > 10 THEN 1 ELSE 0 END))
          WHEN C.NAME = 'AVG_CRIT_SAVEPOINT_PHASE'   THEN TO_VARCHAR(TO_DECIMAL(IFNULL(AVG((CRITICAL_PHASE_WAIT_TIME + CRITICAL_PHASE_DURATION) / 1000000), 0), 10, 2))
          WHEN C.NAME = 'MAX_CRIT_SAVEPOINT_PHASE'   THEN TO_VARCHAR(TO_DECIMAL(IFNULL(MAX((CRITICAL_PHASE_WAIT_TIME + CRITICAL_PHASE_DURATION) / 1000000), 0), 10, 2))
          WHEN C.NAME = 'ENTER_CRIT_SAVEPOINT_PHASE' THEN TO_VARCHAR(SUM(CASE WHEN CRITICAL_PHASE_WAIT_TIME / 1000000 > 10 THEN 1 ELSE 0 END))
          WHEN C.NAME = 'CRIT_SAVEPOINT_PHASE'       THEN TO_VARCHAR(SUM(CASE WHEN CRITICAL_PHASE_DURATION / 1000000 > 10 AND CRITICAL_PHASE_WAIT_TIME / 1000000 <= 10 THEN 1 ELSE 0 END))
        END
      FROM
        ( SELECT 'HIGH_CRIT_SAVEPOINT_PHASE' NAME FROM DUMMY UNION ALL
          SELECT 'AVG_CRIT_SAVEPOINT_PHASE'       FROM DUMMY UNION ALL
          SELECT 'MAX_CRIT_SAVEPOINT_PHASE'       FROM DUMMY UNION ALL
          SELECT 'ENTER_CRIT_SAVEPOINT_PHASE'     FROM DUMMY UNION ALL
          SELECT 'CRIT_SAVEPOINT_PHASE'           FROM DUMMY
        ) C LEFT OUTER JOIN
          _SYS_STATISTICS.HOST_SAVEPOINTS S ON
            S.SERVER_TIMESTAMP >= ADD_SECONDS(CURRENT_TIMESTAMP, -86400)
      GROUP BY
        C.NAME
    )
    UNION ALL
    ( SELECT
        'DISK_SIZE',
        MAP(HOST, CHAR(60) || 'all>', '', HOST),
        TO_VARCHAR(ROUND(MAX(MAP(TOTAL_SIZE, 0, 0, USED_SIZE / TOTAL_SIZE)) * 100))
      FROM
        M_DISKS 
      WHERE
        TOTAL_SIZE > 0
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'MAX_UPDATE_TRANS_ID',
        '',
        TO_VARCHAR(MAX(TO_NUMBER(VALUE))) 
      FROM 
        M_MVCC_TABLES 
      WHERE 
        NAME = 'NEXT_WRITE_TID'
    )       
    UNION ALL
    ( SELECT
        'OLDEST_LOCK_WAIT',
        '',
        TO_VARCHAR(IFNULL(GREATEST(MAX(SECONDS_BETWEEN(BLOCKED_TIME, CURRENT_TIMESTAMP)), 0), 0))
      FROM
        M_BLOCKED_TRANSACTIONS 
    )
    UNION ALL
    ( SELECT
        'MVCC_TRANS_START_TIME',
        '', 
        IFNULL(TO_VARCHAR(SECONDS_BETWEEN(MIN(START_TIME), CURRENT_TIMESTAMP)), '0')
      FROM
        M_TRANSACTIONS
      WHERE
        MIN_MVCC_SNAPSHOT_TIMESTAMP = ( SELECT MIN(VALUE) FROM M_MVCC_TABLES WHERE NAME = 'MIN_SNAPSHOT_TS' )
    )
    UNION ALL
    ( SELECT
        'LONG_TABLE_MERGE_TIME',
        '',
        MAP(M.TABLE_NAME, NULL, 'none', M.TABLE_NAME || CHAR(32) || '(' || RUNTIME_H || CHAR(32) || 'h)')
      FROM
      ( SELECT 1 FROM DUMMY ) LEFT OUTER JOIN
      ( SELECT
          TABLE_NAME,
          TO_DECIMAL(SUM(EXECUTION_TIME) / 1000 / 3600, 10, 2) RUNTIME_H
        FROM
        ( SELECT DISTINCT(HOST) HOST FROM M_HOST_INFORMATION ) H,
        ( SELECT DISTINCT HOST, START_TIME, EXECUTION_TIME, SCHEMA_NAME, TABLE_NAME, PART_ID FROM _SYS_STATISTICS.HOST_DELTA_MERGE_STATISTICS ) M
        WHERE
          H.HOST = M.HOST AND
          SECONDS_BETWEEN(START_TIME, CURRENT_TIMESTAMP) <= 86400
        GROUP BY
          TABLE_NAME
        HAVING
          SUM(EXECUTION_TIME) > 7200000
      ) M ON
      1 = 1
    )
    UNION ALL
    ( SELECT
        'LONG_DELTA_MERGES',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        ( SELECT DISTINCT(HOST) HOST FROM M_HOST_INFORMATION ) H,
        ( SELECT DISTINCT HOST, START_TIME, EXECUTION_TIME, SCHEMA_NAME, TABLE_NAME, PART_ID FROM _SYS_STATISTICS.HOST_DELTA_MERGE_STATISTICS ) M
      WHERE
        H.HOST = M.HOST AND
        SECONDS_BETWEEN(START_TIME, CURRENT_TIMESTAMP) <= 86400 AND
        EXECUTION_TIME > 900000
    )
    UNION ALL
    ( SELECT
        C.NAME,
        M.HOST,
        CASE 
          WHEN C.NAME = 'FAILING_DELTA_MERGES_INFO' THEN TO_VARCHAR(SUM(CASE WHEN 
            M.ERROR_DESCRIPTION LIKE '%2465%' OR
            M.ERROR_DESCRIPTION LIKE '%2480%' OR
            M.ERROR_DESCRIPTION LIKE '%2481%' OR
            M.ERROR_DESCRIPTION LIKE '%2482%' OR
            M.ERROR_DESCRIPTION LIKE '%2486%' THEN 1 ELSE 0 END ))
          WHEN C.NAME = 'FAILING_DELTA_MERGES_ERROR' THEN TO_VARCHAR(SUM(CASE WHEN
            M.LAST_ERROR != 0 AND
            ( M.ERROR_DESCRIPTION NOT LIKE '%2465%' AND
              M.ERROR_DESCRIPTION NOT LIKE '%2480%' AND
              M.ERROR_DESCRIPTION NOT LIKE '%2481%' AND
              M.ERROR_DESCRIPTION NOT LIKE '%2482%' AND
              M.ERROR_DESCRIPTION NOT LIKE '%2486%' 
            ) THEN 1 ELSE 0 END ))
        END
      FROM
        ( SELECT 'FAILING_DELTA_MERGES_INFO' NAME FROM DUMMY UNION ALL
          SELECT 'FAILING_DELTA_MERGES_ERROR' FROM DUMMY
        ) C,
        M_DELTA_MERGE_STATISTICS M
      WHERE
        SECONDS_BETWEEN(M.START_TIME, CURRENT_TIMESTAMP) <= 86400 
      GROUP BY
        C.NAME,
        M.HOST
    )
    UNION ALL
    ( SELECT
        C.NAME,
        HOST,
        CASE
          WHEN C.NAME = 'NUM_TRACEFILES_TOTAL' THEN TO_VARCHAR(COUNT(*))
          WHEN C.NAME = 'SIZE_TRACEFILES_TOTAL' THEN TO_VARCHAR(TO_DECIMAL(SUM(FILE_SIZE) / 1024 / 1024 / 1024, 10, 2))
          WHEN C.NAME = 'LARGEST_TRACEFILE' THEN TO_VARCHAR(TO_DECIMAL(MAX(FILE_SIZE) / 1024 / 1024, 10, 2))
        END
      FROM
      ( SELECT 'NUM_TRACEFILES_TOTAL' NAME FROM DUMMY UNION ALL
        SELECT 'SIZE_TRACEFILES_TOTAL' FROM DUMMY UNION ALL
        SELECT 'LARGEST_TRACEFILE' FROM DUMMY
      ) C LEFT OUTER JOIN
        M_TRACEFILES T ON
          1 = 1
      GROUP BY
        C.NAME,
        T.HOST
    )
    UNION ALL
    ( SELECT
        C.NAME,
        HOST,
        CASE
          WHEN C.NAME = 'NUM_TRACEFILES_DAY' THEN TO_VARCHAR(COUNT(*))
          WHEN C.NAME = 'SIZE_TRACEFILES_DAY' THEN TO_VARCHAR(TO_DECIMAL(SUM(FILE_SIZE) / 1024 / 1024 / 1024, 10, 2))
          WHEN C.NAME = 'NUM_OOM_TRACEFILES' THEN TO_VARCHAR(SUM(CASE WHEN FILE_NAME LIKE '%rtedump%oom%' AND FILE_NAME NOT LIKE '%compositelimit_oom%' THEN 1 ELSE 0 END))
          WHEN C.NAME = 'NUM_COMP_OOM_TRACEFILES' THEN TO_VARCHAR(SUM(CASE WHEN FILE_NAME LIKE '%rtedump%%compositelimit_oom%' THEN 1 ELSE 0 END))
          WHEN C.NAME = 'NUM_CRASHDUMP_TRACEFILES' THEN TO_VARCHAR(SUM(CASE WHEN FILE_NAME LIKE '%crashdump%' THEN 1 ELSE 0 END))
          WHEN C.NAME = 'NUM_RTEDUMP_TRACEFILES' THEN TO_VARCHAR(SUM(CASE WHEN FILE_NAME LIKE '%rtedump%' AND FILE_NAME NOT LIKE '%rtedump%oom%' AND FILE_NAME NOT LIKE '%rtedump%page%' THEN 1 ELSE 0 END))
          WHEN C.NAME = 'NUM_PAGEDUMP_TRACEFILES' THEN TO_VARCHAR(SUM(CASE WHEN FILE_NAME LIKE '%rtedump%page%' THEN 1 ELSE 0 END))
        END
      FROM
      ( SELECT 'NUM_TRACEFILES_DAY' NAME FROM DUMMY UNION ALL
        SELECT 'SIZE_TRACEFILES_DAY' FROM DUMMY UNION ALL
        SELECT 'NUM_OOM_TRACEFILES' FROM DUMMY UNION ALL
        SELECT 'NUM_COMP_OOM_TRACEFILES' FROM DUMMY UNION ALL
        SELECT 'NUM_CRASHDUMP_TRACEFILES' FROM DUMMY UNION ALL
        SELECT 'NUM_RTEDUMP_TRACEFILES' FROM DUMMY UNION ALL
        SELECT 'NUM_PAGEDUMP_TRACEFILES' FROM DUMMY
      ) C LEFT OUTER JOIN
        M_TRACEFILES T ON
          1 = 1
      WHERE
        SECONDS_BETWEEN(T.FILE_MTIME, CURRENT_TIMESTAMP) <= 86400
      GROUP BY
        C.NAME,
        T.HOST
    )
    UNION ALL
    ( SELECT
        'NUM_TRACE_ENTRIES_HOUR',
        HOST,
        TO_VARCHAR(COUNT(*))
      FROM
        M_MERGED_TRACES
      WHERE
        TIMESTAMP >= ADD_SECONDS(CURRENT_TIMESTAMP, -3600) AND
        TRACE_FILE_NAME NOT LIKE 'nameserver%0000.%'
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'EXP_TRACE_LONG_RUNNING_SQL',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_EXPENSIVE_STATEMENTS
      WHERE
        SECONDS_BETWEEN(START_TIME, CURRENT_TIMESTAMP) <= 86400 AND
        DURATION_MICROSEC / 1000000 > 3600 AND
        TO_VARCHAR(STATEMENT_STRING) NOT LIKE 'backup%'
    )
    UNION ALL
    ( SELECT TOP 1
        'ANALYSIS_DATE',
        '',
        TO_VARCHAR(CURRENT_TIMESTAMP, 'YYYY/MM/DD HH24:MI:SS') || CHAR(32) || '(' || VALUE || ')'
      FROM
        M_HOST_INFORMATION
      WHERE
        KEY = 'timezone_name'
    )
    UNION ALL
    ( SELECT
        'DATABASE_NAME',
        '',
        DATABASE_NAME
      FROM
        M_DATABASE
    )
    UNION ALL
    ( SELECT
        C.NAME,
        '',
        MAP(TABLE_NAME, NULL, 'none', TABLE_NAME || MAP(PART_ID, 0, '', CHAR(32) || '(' || PART_ID || ')') || CHAR(32) || '(' || 
          MAP(C.NAME, 'LARGE_MEMORY_TABLES', ROUND(MEMORY_SIZE_IN_TOTAL / 1024 / 1024 / 1024) || CHAR(32) || 'GB)', 
            'LARGE_ALLOC_LIM_TABLES', ROUND(T.MEMORY_SIZE_IN_TOTAL / T.GLOBAL_ALLOCATION_LIMIT * 100) || CHAR(32) || '%)'))
      FROM
      ( SELECT 'LARGE_MEMORY_TABLES' NAME FROM DUMMY UNION ALL
        SELECT 'LARGE_ALLOC_LIM_TABLES'   FROM DUMMY
      ) C LEFT OUTER JOIN
      ( SELECT
          T.TABLE_NAME,
          T.PART_ID,
          T.MEMORY_SIZE_IN_TOTAL,
          H.ALLOCATION_LIMIT GLOBAL_ALLOCATION_LIMIT
        FROM
          M_CS_TABLES T,
          M_HOST_RESOURCE_UTILIZATION H
        WHERE
          T.HOST = H.HOST AND
          ( T.MEMORY_SIZE_IN_TOTAL / 1024 / 1024 / 1024 > 100 OR
            T.MEMORY_SIZE_IN_TOTAL > 0.1 * H.ALLOCATION_LIMIT AND
          H.ALLOCATION_LIMIT > 0
          )
      ) T ON
        C.NAME = 'LARGE_MEMORY_TABLES'    AND T.MEMORY_SIZE_IN_TOTAL / 1024 / 1024 / 1024 > 100 OR
        C.NAME = 'LARGE_ALLOC_LIM_TABLES' AND T.MEMORY_SIZE_IN_TOTAL > 0.1 * T.GLOBAL_ALLOCATION_LIMIT
    )
    UNION ALL
    ( SELECT
        C.NAME,
        '',
        CASE C.NAME
          WHEN 'LARGE_DELTA_STORAGE_AUTO'   THEN IFNULL(TABLE_NAME || ' (' || TO_DECIMAL(MEMORY_SIZE_IN_DELTA / 1024 / 1024 / 1024, 10, 2) || ' GB)', 'none')
          WHEN 'MANY_DELTA_RECORDS_AUTO'    THEN IFNULL(TABLE_NAME || ' (' || RAW_RECORD_COUNT_IN_DELTA || ' rows, ' || DELTA_PCT || ' %)', 'none')
          WHEN 'LARGE_DELTA_STORAGE_NOAUTO' THEN IFNULL(TABLE_NAME || ' (' || TO_DECIMAL(MEMORY_SIZE_IN_DELTA / 1024 / 1024 / 1024, 10, 2) || ' GB)', 'none')
          WHEN 'MANY_DELTA_RECORDS_NOAUTO'  THEN IFNULL(TABLE_NAME || ' (' || RAW_RECORD_COUNT_IN_DELTA || ' rows, ' || DELTA_PCT || ' %)', 'none')
        END
      FROM
      ( SELECT 'LARGE_DELTA_STORAGE_AUTO' NAME FROM DUMMY UNION ALL
        SELECT 'MANY_DELTA_RECORDS_AUTO'       FROM DUMMY UNION ALL
        SELECT 'LARGE_DELTA_STORAGE_NOAUTO'    FROM DUMMY UNION ALL
        SELECT 'MANY_DELTA_RECORDS_NOAUTO'     FROM DUMMY
      ) C LEFT OUTER JOIN
      ( SELECT
          CT.TABLE_NAME,
          T.AUTO_MERGE_ON,
          MAX(NUM_HOURS) NUM_HOURS,
          SUM(CT.MEMORY_SIZE_IN_DELTA) MEMORY_SIZE_IN_DELTA,
          SUM(CT.RAW_RECORD_COUNT_IN_MAIN) RAW_RECORD_COUNT_IN_MAIN,
          SUM(CT.RAW_RECORD_COUNT_IN_DELTA) RAW_RECORD_COUNT_IN_DELTA,
          TO_DECIMAL(ROUND(MAP(SUM(CT.RAW_RECORD_COUNT_IN_DELTA + CT.RAW_RECORD_COUNT_IN_MAIN), 0, 0, SUM(CT.RAW_RECORD_COUNT_IN_DELTA) / SUM(CT.RAW_RECORD_COUNT_IN_DELTA + CT.RAW_RECORD_COUNT_IN_MAIN) * 100)), 10, 0) DELTA_PCT,
          SUM(TH.MIN_RECENT_MEMORY_SIZE_IN_DELTA) MIN_RECENT_MEMORY_SIZE_IN_DELTA,
          SUM(TH.MIN_RECENT_RAW_RECORD_COUNT_IN_DELTA) MIN_RECENT_RAW_RECORD_COUNT_IN_DELTA
        FROM
          M_CS_TABLES CT INNER JOIN
          TABLES T ON
            CT.SCHEMA_NAME = T.SCHEMA_NAME AND
            CT.TABLE_NAME = T.TABLE_NAME LEFT OUTER JOIN
          ( SELECT
              SCHEMA_NAME,
              TABLE_NAME,
              COUNT(DISTINCT(TO_VARCHAR(SERVER_TIMESTAMP, 'HH24'))) NUM_HOURS,
              MIN(RAW_RECORD_COUNT_IN_DELTA) MIN_RECENT_RAW_RECORD_COUNT_IN_DELTA,
              MIN(MEMORY_SIZE_IN_DELTA) MIN_RECENT_MEMORY_SIZE_IN_DELTA
            FROM
              _SYS_STATISTICS.HOST_COLUMN_TABLES_PART_SIZE
            WHERE
              SERVER_TIMESTAMP > ADD_SECONDS(CURRENT_TIMESTAMP, -86400)
            GROUP BY
              SCHEMA_NAME,
              TABLE_NAME
          ) TH ON
            TH.SCHEMA_NAME = T.SCHEMA_NAME AND
            TH.TABLE_NAME = T.TABLE_NAME
        GROUP BY
          CT.TABLE_NAME,
          T.AUTO_MERGE_ON
        HAVING
          SUM(CT.MEMORY_SIZE_IN_DELTA) > 5368709120 OR
          SUM(CT.RAW_RECORD_COUNT_IN_DELTA) >= GREATEST(9 * SUM(CT.RAW_RECORD_COUNT_IN_MAIN), 1000000)
      ) T ON
          C.NAME = 'LARGE_DELTA_STORAGE_AUTO' AND T.AUTO_MERGE_ON = 'TRUE' AND T.MEMORY_SIZE_IN_DELTA > 5368709120 OR
          C.NAME = 'MANY_DELTA_RECORDS_AUTO' AND T.AUTO_MERGE_ON = 'TRUE' AND T.RAW_RECORD_COUNT_IN_DELTA >= GREATEST(9 * T.RAW_RECORD_COUNT_IN_MAIN, 1000000) OR
          C.NAME = 'LARGE_DELTA_STORAGE_NOAUTO' AND T.AUTO_MERGE_ON = 'FALSE' AND T.MEMORY_SIZE_IN_DELTA > 5368709120 AND T.NUM_HOURS >= 20 AND
            ( T.MIN_RECENT_MEMORY_SIZE_IN_DELTA > 5368709120 OR T.MIN_RECENT_MEMORY_SIZE_IN_DELTA IS NULL ) OR
          C.NAME = 'MANY_DELTA_RECORDS_NOAUTO' AND T.AUTO_MERGE_ON = 'FALSE' AND T.RAW_RECORD_COUNT_IN_DELTA >= GREATEST(9 * T.RAW_RECORD_COUNT_IN_MAIN, 1000000) AND T.NUM_HOURS >= 20 AND
            ( T.MIN_RECENT_RAW_RECORD_COUNT_IN_DELTA IS NULL OR T.MIN_RECENT_RAW_RECORD_COUNT_IN_DELTA >= GREATEST(9 * T.RAW_RECORD_COUNT_IN_MAIN, 1000000) )
      ORDER BY
        T.MEMORY_SIZE_IN_DELTA DESC
    )
    UNION ALL
    ( SELECT
        'CURRENT_UNLOADS',
        IFNULL(HOST, ''),
        TO_VARCHAR(SUM(MAP(REASON, NULL, 0, 1)))
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          U.HOST,
          U.REASON
        FROM
          TABLES T,
          M_CS_UNLOADS U
        WHERE
          T.SCHEMA_NAME = U.SCHEMA_NAME AND
          T.TABLE_NAME = U.TABLE_NAME AND
          T.UNLOAD_PRIORITY <= 5 AND
          U.UNLOAD_TIME >= ADD_DAYS(CURRENT_TIMESTAMP, -1) AND
          U.REASON = 'LOW MEMORY'
      ) U ON
        1 = 1
        GROUP BY
          HOST
    )
    UNION ALL
    ( SELECT
        'LAST_UNLOAD',
        IFNULL(HOST, ''),
        MAP(U.UNLOAD_TIME, NULL, '999999', TO_VARCHAR(TO_DECIMAL(SECONDS_BETWEEN(U.UNLOAD_TIME, CURRENT_TIMESTAMP) / 86400, 10, 2)))
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          U.HOST,
          MAX(U.UNLOAD_TIME) UNLOAD_TIME
        FROM
          TABLES T,
          M_CS_UNLOADS U
        WHERE
          T.SCHEMA_NAME = U.SCHEMA_NAME AND
          T.TABLE_NAME = U.TABLE_NAME AND
          T.UNLOAD_PRIORITY <= 5 AND
          U.REASON = 'LOW MEMORY'
        GROUP BY
          U.HOST
      ) U ON
        1 = 1
    )
    UNION ALL
    ( SELECT
        NAME,
        '',
        CASE NAME
          WHEN 'DATABASE_LOG_MODE'        THEN VALUE
          WHEN 'AUTO_LOG_BACKUP'          THEN VALUE
          WHEN 'SQL_TRACE'                THEN MAP(VALUE, 'off', 'no', 'yes')
          WHEN 'INDEXSERVER_PYTHON_TRACE' THEN MAP(VALUE, 'off', 'no', 'yes')
          WHEN 'EXECUTOR_PYTHON_TRACE'    THEN MAP(VALUE, 'off', 'no', 'yes')
          WHEN 'CLIENT_NETWORK_TRACE'     THEN MAP(VALUE, 'false', 'no', 'yes')
          WHEN 'CPU_TIME_MEASUREMENT'     THEN MAP(VALUE, 'off', 'no', 'yes')
        END
      FROM
      ( SELECT
          NAME,
          FILE_NAME,
          SECTION,
          KEY,
          IFNULL(USER_VALUE, DEFAULT_VALUE) VALUE
        FROM
        ( SELECT
            C.NAME,
            P.FILE_NAME,
            P.SECTION,
            P.KEY,
            MIN(MAP(P.LAYER_NAME, 'DEFAULT', P.VALUE)) DEFAULT_VALUE,
            MIN(MAP(P.LAYER_NAME, 'SYSTEM', P.VALUE)) USER_VALUE
          FROM
          ( SELECT 'DATABASE_LOG_MODE' NAME,   'global.ini' FILE_NAME, 'persistence' SECTION,   'log_mode' KEY              FROM DUMMY UNION ALL
            SELECT 'AUTO_LOG_BACKUP',          'global.ini',           'persistence',           'enable_auto_log_backup'    FROM DUMMY UNION ALL
            SELECT 'SQL_TRACE',                'indexserver.ini',      'sqltrace',              'trace'                     FROM DUMMY UNION ALL
            SELECT 'INDEXSERVER_PYTHON_TRACE', 'indexserver.ini',      'pythontrace',           'trace'                     FROM DUMMY UNION ALL
            SELECT 'EXECUTOR_PYTHON_TRACE',    'executor.ini',         'pythontrace',           'trace'                     FROM DUMMY UNION ALL
            SELECT 'CLIENT_NETWORK_TRACE',     'indexserver.ini',      'sql_client_network_io', 'enabled'                   FROM DUMMY UNION ALL
            SELECT 'CPU_TIME_MEASUREMENT',     'global.ini',           'resource_tracking',     'cpu_time_measurement_mode' FROM DUMMY
          ) C,   
            M_INIFILE_CONTENTS P   
          WHERE
            C.FILE_NAME = P.FILE_NAME AND
            C.SECTION = P.SECTION AND
            C.KEY = P.KEY 
          GROUP BY
            C.NAME,
            P.FILE_NAME,
            P.SECTION,
            P.KEY
        )   
      )
    )
    UNION ALL
    ( SELECT
        'DATABASE_TRACE_SETTINGS',
        IFNULL(HOST, ''),
        MAP(SUM(MAP(KEY, NULL, 0, 1)), 0, 'no', 'yes')
      FROM
        DUMMY LEFT OUTER JOIN
        M_INIFILE_CONTENTS ON
          SECTION = 'trace' AND
          LAYER_NAME IN ( 'SYSTEM', 'HOST' ) AND
          NOT (SUBSTR(KEY, 1, 3) = 'ha_' AND VALUE = 'info') AND
          NOT (KEY = 'tablereload' AND VALUE = 'info' )
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'USER_TRACE_SETTINGS',
        IFNULL(HOST, ''),
        MAP(SUM(MAP(KEY, NULL, 0, 1)), 0, 'no', 'yes')
      FROM
        DUMMY LEFT OUTER JOIN
        M_INIFILE_CONTENTS ON
          SECTION LIKE 'traceprofile%' AND
          SECTION NOT IN ('traceprofile_sap_passport_high', 'traceprofile_sap_passport_medium') AND
          LAYER_NAME IN ( 'SYSTEM', 'HOST' )
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'END_TO_END_TRACE_SETTINGS',
        IFNULL(HOST, ''),
        MAP(SUM(MAP(KEY, NULL, 0, 1)), 0, 'no', 'yes')
      FROM
        DUMMY LEFT OUTER JOIN
        M_INIFILE_CONTENTS ON
          SECTION IN ('traceprofile_sap_passport_high', 'traceprofile_sap_passport_medium') AND 
          LAYER_NAME IN ( 'SYSTEM', 'HOST' )
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'SQL_CACHE_EVICTIONS_LAST_DAY',
        HOST,
        TO_VARCHAR(ROUND(SUM(EVICT_PER_HOUR)))
      FROM
      ( SELECT
          HOST,
          ( GREATEST( 0, EVICTED_PLAN_COUNT - LAG(EVICTED_PLAN_COUNT, 1) OVER ( PARTITION BY HOST, PORT ORDER BY SERVER_TIMESTAMP ) ) ) / 24 EVICT_PER_HOUR
        FROM
          _SYS_STATISTICS.HOST_SQL_PLAN_CACHE_OVERVIEW
        WHERE
          SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) <= 88000
      )
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'SQL_CACHE_EVICTIONS',
        HOST,
        TO_VARCHAR(ROUND(SUM(EVICT_PER_HOUR)))
      FROM
      ( SELECT
          S.HOST,
          S.PORT,
          EVICTED_PLAN_COUNT / SECONDS_BETWEEN(SS.START_TIME, CURRENT_TIMESTAMP) * 3600 EVICT_PER_HOUR
        FROM
          M_SQL_PLAN_CACHE_OVERVIEW S,
          M_SERVICE_STATISTICS SS
        WHERE
          S.HOST = SS.HOST AND
          S.PORT = SS.PORT
      )
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'EXPENSIVE_SQL_TRACE_THLD',
        '',
        TO_VARCHAR(MIN(ROUND(IFNULL(SYSTEM_VALUE, IFNULL(HOST_VALUE, DEFAULT_VALUE)) / 1000)))
      FROM
      ( SELECT 
          MIN(MAP(LAYER_NAME, 'DEFAULT', VALUE)) DEFAULT_VALUE,
          MIN(MAP(LAYER_NAME, 'HOST',    VALUE)) HOST_VALUE,
          MIN(MAP(LAYER_NAME, 'SYSTEM',  VALUE, 'DATABASE', VALUE)) SYSTEM_VALUE
        FROM
          M_INIFILE_CONTENTS 
        WHERE 
          SECTION = 'expensive_statement' AND
          KEY = 'threshold_duration'
      )
    )
    UNION ALL
    ( SELECT
        'EXPENSIVE_SQL_TRACE_RECORDS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_EXPENSIVE_STATEMENTS
      WHERE
        SECONDS_BETWEEN(START_TIME, CURRENT_TIMESTAMP) <= 86400 AND
        OPERATION IN ('AGGREGATED_EXECUTION', 'CALL')
    )
    UNION ALL
    ( SELECT
        'TIME_SINCE_LAST_SAVEPOINT',
        HOST,
        TO_VARCHAR(GREATEST(0, SECONDS_BETWEEN(MAX(START_TIME), CURRENT_TIMESTAMP)))
      FROM
        M_SAVEPOINTS
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'LICENSE_EXPIRATION',
        '',
        TO_VARCHAR(MAP(EXPIRATION_DATE, NULL, '999999', DAYS_BETWEEN(CURRENT_DATE, EXPIRATION_DATE)))
      FROM 
        M_LICENSE
    )
    UNION ALL
    ( SELECT
        'SECURE_STORE_AVAILABLE',
        HOST,
        VALUE
      FROM
        M_HOST_INFORMATION
      WHERE
        KEY = 'secure_store'
    )
    UNION ALL
    ( SELECT
        'PERMANENT_LICENSE',
        '',
        MAP(PERMANENT, 'TRUE', 'yes', 'no')
      FROM
        M_LICENSE
    )
    UNION ALL
    ( SELECT
        'SERVICE_START_TIME_VARIATION',
        HOST,
        TO_VARCHAR(SECONDS_BETWEEN(MIN(START_TIME), MAX(START_TIME)))
      FROM
        M_SERVICE_STATISTICS
      WHERE
        SERVICE_NAME != 'webdispatcher'
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT TOP 1
        'BACKUP_CATALOG_SIZE',
        '',
        TO_VARCHAR(TO_DECIMAL(BF.BACKUP_SIZE / 1024 / 1024, 10, 2))
      FROM
        M_BACKUP_CATALOG B,
        M_BACKUP_CATALOG_FILES BF
      WHERE
        B.BACKUP_ID = BF.BACKUP_ID AND
        BF.SOURCE_TYPE_NAME = 'catalog' AND
        B.STATE_NAME = 'successful'
     ORDER BY
       B.SYS_START_TIME DESC
    )         
    UNION ALL
    ( SELECT
        'OLDEST_BACKUP_IN_CATALOG',
        '',
        TO_VARCHAR(DAYS_BETWEEN(MIN(SYS_START_TIME), CURRENT_TIMESTAMP))
      FROM
        M_BACKUP_CATALOG
    )
    UNION ALL
    ( SELECT
        NAME,
        HOST,
        TO_VARCHAR(VALUE)
      FROM
      ( SELECT
          C.NAME,
          L.HOST,
          CASE C.NAME
            WHEN 'LOG_SEGMENTS_FREE'     THEN SUM(MAP(L.STATE, 'Free', 1, 0))
            WHEN 'LOG_SEGMENTS_NOT_FREE' THEN SUM(MAP(L.STATE, 'Free', 0, 1))
          END VALUE
        FROM
        ( SELECT 'LOG_SEGMENTS_FREE' NAME FROM DUMMY UNION ALL
          SELECT 'LOG_SEGMENTS_NOT_FREE' FROM DUMMY
        ) C,
          M_LOG_SEGMENTS L
        GROUP By
          C.NAME,
          L.HOST
      )
    )
    UNION ALL
    ( SELECT
        'MAX_GC_HISTORY_COUNT',
        HOST,
        TO_VARCHAR(SUM(HISTORY_COUNT))
      FROM
        M_GARBAGE_COLLECTION_STATISTICS
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'GC_UNDO_FILE_COUNT',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_UNDO_CLEANUP_FILES
      WHERE
        TYPE != 'FREE'
    )
    UNION ALL
    ( SELECT
        'GC_UNDO_FILE_SIZE',
        '',
        TO_VARCHAR(TO_DECIMAL(SUM(IFNULL(RAW_SIZE, 0)) / 1024 / 1024 / 1024, 10, 2))
      FROM
        M_UNDO_CLEANUP_FILES
      WHERE
        TYPE != 'FREE'
    )
    UNION ALL
    ( SELECT
        C.NAME,
        SN.HOST,
        TO_VARCHAR(ROUND(MAP(C.NAME, 
          'SERVICE_SEND_INTRANODE', CASE WHEN SUM(SN.SEND_SIZE_INTRA) / 1024 / 1024 / 1024 < 10 THEN 
             999999 ELSE MAP(SUM(SN.SEND_DURATION_INTRA), 0, 0, SUM(SN.SEND_SIZE_INTRA) / 1024 / 1024 / ( MAP(SUM(SN.SEND_DURATION_INTRA), 0, 0, SUM(SN.SEND_DURATION_INTRA) / 1000 / 1000 ))) END,
          'SERVICE_SEND_INTERNODE', CASE WHEN SUM(SN.SEND_SIZE_INTER) / 1024 / 1024 / 1024 < 10 THEN 
             999999 ELSE MAP(SUM(SN.SEND_DURATION_INTER), 0, 0, SUM(SN.SEND_SIZE_INTER) / 1024 / 1024 / ( MAP(SUM(SN.SEND_DURATION_INTER), 0, 0, SUM(SN.SEND_DURATION_INTER) / 1000 / 1000 ))) END,
          'NETWORK_VOLUME_INTRANODE', SUM(MAP(SN.SECONDS, 0, 0, (SN.SEND_SIZE_INTRA + SN.RECEIVE_SIZE_INTRA) / SN.SECONDS)) / 1024 / 1024,
          'NETWORK_VOLUME_INTERNODE', SUM(MAP(SN.SECONDS, 0, 0, (SN.SEND_SIZE_INTER + SN.RECEIVE_SIZE_INTER) / SN.SECONDS)) / 1024 / 1024
        )))
      FROM
      ( SELECT 'SERVICE_SEND_INTRANODE' NAME FROM DUMMY UNION ALL
        SELECT 'SERVICE_SEND_INTERNODE'      FROM DUMMY UNION ALL
        SELECT 'NETWORK_VOLUME_INTRANODE'    FROM DUMMY UNION ALL
        SELECT 'NETWORK_VOLUME_INTERNODE'    FROM DUMMY
      ) C LEFT OUTER JOIN
      ( SELECT
          SECONDS_BETWEEN(S.START_TIME, CURRENT_TIMESTAMP) SECONDS,
          SENDER_HOST HOST,
          CASE WHEN SENDER_HOST = RECEIVER_HOST THEN SEND_SIZE        ELSE 0                END SEND_SIZE_INTRA,
          CASE WHEN SENDER_HOST = RECEIVER_HOST THEN 0                ELSE SEND_SIZE        END SEND_SIZE_INTER,
          CASE WHEN SENDER_HOST = RECEIVER_HOST THEN SEND_DURATION    ELSE 0                END SEND_DURATION_INTRA,
          CASE WHEN SENDER_HOST = RECEIVER_HOST THEN 0                ELSE SEND_DURATION    END SEND_DURATION_INTER,
          CASE WHEN SENDER_HOST = RECEIVER_HOST THEN RECEIVE_SIZE     ELSE 0                END RECEIVE_SIZE_INTRA,
          CASE WHEN SENDER_HOST = RECEIVER_HOST THEN 0                ELSE RECEIVE_SIZE     END RECEIVE_SIZE_INTER,
          CASE WHEN SENDER_HOST = RECEIVER_HOST THEN RECEIVE_DURATION ELSE 0                END RECEIVE_DURATION_INTRA,
          CASE WHEN SENDER_HOST = RECEIVER_HOST THEN 0                ELSE RECEIVE_DURATION END RECEIVE_DURATION_INTER
        FROM
          M_SERVICE_NETWORK_IO N,
          M_SERVICE_STATISTICS S
        WHERE
          S.HOST = N.SENDER_HOST AND
          S.PORT = N.SENDER_PORT
      ) SN ON
        1 = 1
      GROUP BY
        C.NAME,
        SN.HOST
    )
    UNION ALL
    ( SELECT
        'ST_POINT_TABLES',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        TABLES T,
        TABLE_COLUMNS C
      WHERE
        T.SCHEMA_NAME = C.SCHEMA_NAME AND
        T.TABLE_NAME = C.TABLE_NAME AND
        C.DATA_TYPE_NAME = 'ST_POINT' AND
        T.TABLE_TYPE = 'ROW' AND
        T.IS_USER_DEFINED_TYPE != 'TRUE'
    )
    UNION ALL
    ( SELECT
        C.NAME,
        '',
        CASE C.NAME
          WHEN 'STAT_SERVER_TABLE_SIZE'  THEN TO_VARCHAR(TO_DECIMAL(SUM(TABLE_SIZE) / 1024 / 1024 / 1024, 10, 2))
          WHEN 'STAT_SERVER_TABLE_SHARE' THEN TO_VARCHAR(TO_DECIMAL(MAP(M.GAL, 0, 0, SUM(TABLE_SIZE) / AVG(M.GAL) * 100), 10, 2))
        END
      FROM
      ( SELECT 'STAT_SERVER_TABLE_SIZE' NAME FROM DUMMY UNION ALL
        SELECT 'STAT_SERVER_TABLE_SHARE'    FROM DUMMY
      ) C,
      ( SELECT
          MAX(ALLOCATION_LIMIT) GAL
        FROM
          M_HOST_RESOURCE_UTILIZATION
      ) M,
      ( SELECT
          SCHEMA_NAME,
          TABLE_NAME,
          ALLOCATED_FIXED_PART_SIZE + ALLOCATED_VARIABLE_PART_SIZE TABLE_SIZE
        FROM
          M_RS_TABLES 
        WHERE
          SCHEMA_NAME = '_SYS_STATISTICS'
        UNION ALL
        SELECT
          SCHEMA_NAME,
          TABLE_NAME,
          INDEX_SIZE TABLE_SIZE
        FROM
          M_RS_INDEXES 
        WHERE
          SCHEMA_NAME = '_SYS_STATISTICS'
        UNION ALL
        SELECT
          SCHEMA_NAME,
          TABLE_NAME,
          MEMORY_SIZE_IN_TOTAL SIZE_BYTE
        FROM
          M_CS_TABLES 	
        WHERE
          SCHEMA_NAME = '_SYS_STATISTICS'
      )
      GROUP BY
        M.GAL,
        C.NAME
    )
    UNION ALL
    ( SELECT
        'VARYING_MEMORY',
        '',
        CASE WHEN MAX(VALUE) - MIN(VALUE) <= 1024 * 1024 * 1024 THEN 'no' ELSE 'yes' END
      FROM
        M_HOST_INFORMATION
      WHERE
        KEY = 'mem_phys'
    )
    UNION ALL
    ( SELECT
        N.NAME,
        '',
        TO_VARCHAR(SUM(MAP(T.TABLE_NAME, NULL, 0, 1)))
      FROM
      ( SELECT 'QCM_TABLES' NAME, 'QCM%' PATTERN FROM DUMMY UNION ALL
        SELECT 'BPC_TABLES',      '$BPC$HC$%'    FROM DUMMY UNION ALL
        SELECT 'BPC_TABLES',      '$BPC$TMP%'    FROM DUMMY
      ) N LEFT OUTER JOIN
        TABLES T ON
          T.TABLE_NAME LIKE N.PATTERN AND
          T.IS_TEMPORARY = 'FALSE'
      GROUP BY
        N.NAME
    )
    UNION ALL
    ( SELECT
        'NAMESERVER_SHARED_MEMORY',
        HOST,
        TO_VARCHAR(ROUND(MAP(SHARED_MEMORY_ALLOCATED_SIZE, 0, 0, SHARED_MEMORY_USED_SIZE / SHARED_MEMORY_ALLOCATED_SIZE * 100)))
      FROM
        M_SERVICE_MEMORY
      WHERE
        SERVICE_NAME = 'nameserver'
    )
    UNION ALL
    ( SELECT
        'DISK_DATA_FRAGMENTATION',
        IFNULL(HOST, ''),
        IFNULL(TO_VARCHAR(ROUND((1 - MAP(SUM(F.TOTAL_SIZE), 0, 0, SUM(F.USED_SIZE) / SUM(F.TOTAL_SIZE))) * 100)), '999999')
      FROM
        DUMMY D LEFT OUTER JOIN
        M_VOLUME_FILES F ON
          1 = 1
      WHERE
        F.FILE_TYPE = 'DATA'
      GROUP BY
        F.HOST
      HAVING
        SUM(F.USED_SIZE) / 1024 / 1024 / 1024 >= 5
    )
/*    UNION ALL
    ( SELECT
        'DISK_DATA_MEMORY_RATIO',
        M.HOST,
        TO_VARCHAR(TO_DECIMAL(MAP(M.MEM_SIZE_GB, 0, 0, ( DF.DISK_FREE_GB + DU.DATA_USED_GB ) / M.MEM_SIZE_GB), 10, 2))
      FROM
      ( SELECT HOST, MAX(VALUE) / 1024 / 1024 / 1024 MEM_SIZE_GB FROM M_MEMORY WHERE NAME = 'GLOBAL_ALLOCATION_LIMIT' GROUP BY HOST ) M,
      ( SELECT HOST, SUM(TOTAL_SIZE - USED_SIZE) / 1024 / 1024 / 1024 DISK_FREE_GB FROM M_DISKS WHERE USAGE_TYPE = 'DATA' GROUP BY HOST ) DF,
      ( SELECT HOST, SUM(TOTAL_SIZE) / 1024 / 1024 / 1024 DATA_USED_GB FROM M_VOLUME_FILES WHERE FILE_TYPE = 'DATA' GROUP BY HOST ) DU
      WHERE
        M.HOST = DU.HOST AND
        DU.HOST = DF.HOST
    ) */
    UNION ALL
    ( SELECT
        'EMBEDDED_STAT_SERVER_USED',
        '',
        MAP(IFNULL(SYSTEM_VALUE, IFNULL(HOST_VALUE, DEFAULT_VALUE)), 'true', 'yes', 'false', 'no', 'unknown')     
      FROM
      ( SELECT 
          MAX(MAP(LAYER_NAME, 'DEFAULT', VALUE)) DEFAULT_VALUE,
          MAX(MAP(LAYER_NAME, 'HOST',    VALUE)) HOST_VALUE,
          MAX(MAP(LAYER_NAME, 'SYSTEM',  VALUE, 'DATABASE', VALUE)) SYSTEM_VALUE
        FROM
          M_INIFILE_CONTENTS 
        WHERE 
          FILE_NAME IN ('indexserver.ini', 'nameserver.ini') AND
          SECTION = 'statisticsserver' AND
          KEY = 'active'
      )
    )
    UNION ALL
    ( SELECT
        'XSENGINE_LOG_SEGMENT_SIZE',
        HOST,
        TO_VARCHAR(SEGMENT_SIZE)
      FROM
        M_LOG_BUFFERS
      WHERE
        TO_VARCHAR(PORT) LIKE '%07'
    ) 
    UNION ALL
    ( SELECT
        'CATALOG_READ_GRANTED',
        '',
        MAP(COUNT(*), 0, 'no', 'yes')
      FROM
        EFFECTIVE_PRIVILEGES
      WHERE
        USER_NAME = CURRENT_USER AND
        PRIVILEGE = 'CATALOG READ'
    )
    UNION ALL
    ( SELECT
        NAME,
        '',
        CASE NAME
          WHEN 'TABLES_AUTOMERGE_DISABLED' THEN TO_VARCHAR(SUM(MAP(AUTO_MERGE_ON, 'FALSE', 1, 0)))
          WHEN 'TABLES_AUTOCOMP_DISABLED'  THEN TO_VARCHAR(SUM(MAP(AUTO_OPTIMIZE_COMPRESSION_ON, 'FALSE', 1, 0)))
        END
      FROM
      ( SELECT 'TABLES_AUTOMERGE_DISABLED' NAME FROM DUMMY UNION ALL
        SELECT 'TABLES_AUTOCOMP_DISABLED' NAME FROM DUMMY
      ) BI,
        TABLES T
      WHERE
        ( TABLE_NAME NOT LIKE '/B%/%' OR TABLE_NAME LIKE '/BA1/%' ) AND
        TABLE_NAME NOT LIKE '0BW:BIA%' AND
        TABLE_NAME NOT LIKE '$BPC$HC$%' AND
        TABLE_NAME NOT LIKE '$BPC$TMP%' AND
        SUBSTR(TABLE_NAME, 1, 3) != 'TR_' AND            /* BW transformation tables */
        IS_COLUMN_TABLE = 'TRUE' AND
        IS_TEMPORARY = 'FALSE'
      GROUP BY
        NAME
    )
    UNION ALL
    ( SELECT
        'TABLES_PERSMERGE_DISABLED',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_CS_TABLES
      WHERE
        PERSISTENT_MERGE = 'FALSE' 
    )
    UNION ALL
    ( SELECT
        'OLDEST_REPLICATION_SNAPSHOT',
        IFNULL(HOST, ''),
        TO_VARCHAR(TO_DECIMAL(SECONDS_BETWEEN(MIN(TIMESTAMP), CURRENT_TIMESTAMP) / 3600, 10, 2))
      FROM
        DUMMY LEFT OUTER JOIN
        M_SNAPSHOTS ON
          FOR_BACKUP = 'FALSE'
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'OLDEST_BACKUP_SNAPSHOT',
        IFNULL(HOST, ''),
        TO_VARCHAR(TO_DECIMAL(SECONDS_BETWEEN(MIN(TIMESTAMP), CURRENT_TIMESTAMP) / 86400, 10, 2))
      FROM
        DUMMY LEFT OUTER JOIN
        M_SNAPSHOTS ON
          FOR_BACKUP = 'TRUE'
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'SAVEPOINT_THROUGHPUT',
        HOST,
        TO_VARCHAR(ROUND(MAP(SUM(TOTAL_SIZE), 0, NULL, MAP(SUM(DURATION - CRITICAL_PHASE_WAIT_TIME), 0, 0, SUM(TOTAL_SIZE)) / SUM(DURATION - CRITICAL_PHASE_WAIT_TIME)) / 1024 / 1024 * 1000 * 1000))
      FROM
        M_SAVEPOINTS
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'LONG_RUNNING_SAVEPOINTS',
        IFNULL(HOST, '') HOST,
        TO_VARCHAR(IFNULL(LONG_SAVEPOINTS, 0))
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          HOST,
          COUNT(*) LONG_SAVEPOINTS
        FROM
          M_SAVEPOINTS 
        WHERE
          DURATION > 900000000
        GROUP BY
          HOST
      ) ON
        1 = 1
    )
    UNION ALL
    ( SELECT
        'LARGE_TABLES_NOT_COMPRESSED',
        '',
        TO_VARCHAR(COUNT(DISTINCT(CT.SCHEMA_NAME || CT.TABLE_NAME)))
      FROM
        TABLES T,
        M_CS_TABLES CT
      WHERE
        T.SCHEMA_NAME = CT.SCHEMA_NAME AND
        T.TABLE_NAME = CT.TABLE_NAME AND
        T.IS_TEMPORARY = 'FALSE' AND
        CT.LAST_COMPRESSED_RECORD_COUNT = 0 AND
        CT.RAW_RECORD_COUNT_IN_MAIN > 10000000
    )
    UNION ALL
    ( SELECT
        'TABLE_ALLOCATION_LIMIT_RATIO',
        H.HOST,
        TO_VARCHAR(ROUND(MAP(H.ALLOCATION_LIMIT, 0, 0, T.TABLE_MEMORY_BYTES / H.ALLOCATION_LIMIT) * 100))
      FROM
        M_HOST_RESOURCE_UTILIZATION H,
        ( SELECT 
            HOST,
            SUM(USED_MEMORY_SIZE) TABLE_MEMORY_BYTES
          FROM
            M_SERVICE_COMPONENT_MEMORY
          WHERE
            UPPER(COMPONENT) IN 
            ( 'ROW STORE TABLES',
              'ROW STORE TABLES + INDEXES', 
              'COLUMN STORE TABLES'
            )
          GROUP BY
            HOST
        ) T
      WHERE
        H.HOST = T.HOST
    )
    UNION ALL
    ( SELECT
        'HOST_SQL_PLAN_CACHE_ZERO',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.HOST_SQL_PLAN_CACHE
      WHERE
        EXECUTION_COUNT = 0
    )
    UNION ALL
    ( SELECT
        'HOST_OBJ_LOCK_UNKNOWN',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.HOST_OBJECT_LOCK_STATISTICS_BASE
      WHERE
        OBJECT_NAME = '(unknown)'
    )
    UNION ALL
    ( SELECT
        I.NAME,
        '',
        CASE I.NAME
          WHEN 'ABAP_BUFFER_LOADING' THEN
            TO_VARCHAR(TO_DECIMAL(SUM(CASE WHEN TO_VARCHAR(SUBSTR(STATEMENT_STRING, 1, 5000)) LIKE '%/* Buffer Loading */%' THEN TOTAL_EXECUTION_TIME ELSE 0 END) / 1000000 / 86400, 10, 2))
          WHEN 'FDA_WRITE' THEN
            TO_VARCHAR(TO_DECIMAL(SUM(CASE WHEN TO_VARCHAR(SUBSTR(STATEMENT_STRING, 1, 5000)) LIKE '%' || CHAR(63) || ' AS "t_00"%' THEN TOTAL_EXECUTION_TIME ELSE 0 END) / 1000000 / 86400, 10, 2))
        END
      FROM
      ( SELECT 'ABAP_BUFFER_LOADING' NAME FROM DUMMY UNION ALL
        SELECT 'FDA_WRITE'                FROM DUMMY
      ) I,
       _SYS_STATISTICS.HOST_SQL_PLAN_CACHE S
      WHERE
        SERVER_TIMESTAMP >= ADD_SECONDS(CURRENT_TIMESTAMP, -88000)
      GROUP BY
        I.NAME
    )
    UNION ALL
    ( SELECT
        'CPBTREE_LEAK',
        '',
        TO_VARCHAR(TO_DECIMAL(GREATEST(0, HEAP_SIZE_GB - INDEX_SIZE_GB), 10, 2))
      FROM
      ( SELECT
          ( SELECT IFNULL(SUM(INDEX_SIZE) / 1024 / 1024 / 1024, 0) FROM M_RS_INDEXES ) INDEX_SIZE_GB,
          ( SELECT IFNULL(SUM(EXCLUSIVE_SIZE_IN_USE) / 1024 / 1024 / 1024, 0) FROM M_HEAP_MEMORY WHERE CATEGORY like 'Pool/Row%/CpbTree' ) HEAP_SIZE_GB
        FROM
          DUMMY
      ) 
    )
    UNION ALL
    ( SELECT
        'ROW_STORE_TABLE_LEAK',
        '',
        TO_VARCHAR ( TO_DECIMAL ( GREATEST ( 0, ( GLOBAL_USED - SUM_INDIVIDUAL_USED ) / 1024 / 1024 / 1024 ), 10, 2 ) )
      FROM
      ( SELECT SUM(USED_SIZE) GLOBAL_USED FROM M_RS_MEMORY WHERE CATEGORY = 'TABLE' ),
      ( SELECT SUM(ALLOCATED_FIXED_PART_SIZE + ALLOCATED_VARIABLE_PART_SIZE) SUM_INDIVIDUAL_USED FROM M_RS_TABLES )
    )
    UNION ALL
    ( SELECT
        'SQL_PREPARATION_SHARE',
        HOST,
        TO_VARCHAR(TO_DECIMAL(MAP(ELAPSED_TIME, 0, 0, PREP_TIME / ELAPSED_TIME * 100), 10, 2))  
      FROM
      ( SELECT
          HOST,
          SUM(TOTAL_EXECUTION_TIME) + SUM(TOTAL_PREPARATION_TIME) ELAPSED_TIME,
          SUM(TOTAL_PREPARATION_TIME) PREP_TIME
        FROM
          M_SQL_PLAN_CACHE
        GROUP BY
          HOST
      )
    )
    UNION ALL
    ( SELECT
        'SQL_CACHE_USED_BY_TABLE',
        HOST,
        TO_VARCHAR(MAP(HOST, NULL, 0, COUNT(*)))
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          HOST
        FROM
        ( SELECT
            SUM(PLAN_MEMORY_SIZE) OVER (PARTITION BY HOST) TOTAL_PLAN_MEMORY_SIZE,
            *
          FROM
            M_SQL_PLAN_CACHE
        )
        GROUP BY
          HOST,
          TOTAL_PLAN_MEMORY_SIZE,
          ACCESSED_OBJECTS
        HAVING
          SUM(PLAN_MEMORY_SIZE) * 10 > TOTAL_PLAN_MEMORY_SIZE
      ) ON
          1 = 1
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'AVG_DB_REQUEST_TIME',
        '',
        TO_VARCHAR(TO_DECIMAL(MAP(SUM(EXECUTION_COUNT), 0, 0, SUM(TOTAL_EXECUTION_TIME) / SUM(EXECUTION_COUNT)) / 1000, 10, 2))
      FROM
        M_SQL_PLAN_CACHE
    )
    UNION ALL
    ( SELECT
        'QIWKTAB_ACCESSES',
        '',
        TO_VARCHAR(IFNULL(ROUND(SUM(EXECUTION_COUNT) / ((SECONDS_BETWEEN(MIN(LAST_PREPARATION_TIMESTAMP), CURRENT_TIMESTAMP) + 1) / 3600)), 0))
      FROM
        M_SQL_PLAN_CACHE
      WHERE
        STATEMENT_HASH = '5105b71d85f1608a672a7676c7f64868'
    )
    UNION ALL
    ( SELECT
        'REPLICATION_ERROR',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_SERVICE_REPLICATION
      WHERE
        REPLICATION_STATUS = 'ERROR'
    )
    UNION ALL
    ( SELECT
        'REPLICATION_UNKNOWN',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_SERVICES S,
        M_SERVICE_REPLICATION SR
      WHERE
        S.HOST = SR.HOST AND
        S.PORT = SR.PORT AND
        S.COORDINATOR_TYPE != 'STANDBY' AND
        SR.REPLICATION_STATUS = 'UNKNOWN'
    )
    UNION ALL
    ( SELECT
        'OLD_LOG_POSITION',
        '',
        TO_CHAR(ROUND(MAX(LOG_POS_DIFF)))
      FROM
      ( SELECT
          L.HOST,
          L.PORT,
          GREATEST(0, (MAX(L.MAX_POSITION) - MAX(R.LAST_LOG_POSITION)) / 1024 / 16) LOG_POS_DIFF
        FROM
          M_LOG_SEGMENTS L,
          M_SERVICE_REPLICATION R
        WHERE
          L.HOST = R.HOST AND
          L.PORT = R.PORT
        GROUP BY
          L.HOST,
          L.PORT
      )
    )
    UNION ALL
    ( SELECT
        'LOG_SHIPPING_DELAY',
        '',
        IFNULL(TO_VARCHAR(MAX(SECONDS_BETWEEN(SHIPPED_LOG_POSITION_TIME, LAST_LOG_POSITION_TIME))), '0')
      FROM
        DUMMY LEFT OUTER JOIN
        M_SERVICE_REPLICATION ON
          1 = 1
    )
    UNION ALL
    ( SELECT
        'LOG_SHIPPING_ASYNC_BUFF_FILL',
        R.HOST,
        TO_VARCHAR(TO_DECIMAL((GREATEST(0, MAP(P.BUFFER_SIZE, 0, 0, R.BUFFER_FILLED / P.BUFFER_SIZE * 100))), 10, 0))
      FROM
      ( SELECT
          IFNULL(TO_BIGINT(SYSTEM_VALUE), IFNULL(TO_BIGINT(HOST_VALUE), TO_BIGINT(DEFAULT_VALUE))) BUFFER_SIZE
        FROM
        ( SELECT 
            MAX(MAP(LAYER_NAME, 'DEFAULT', VALUE)) DEFAULT_VALUE,
            MAX(MAP(LAYER_NAME, 'HOST',    VALUE)) HOST_VALUE,
            MAX(MAP(LAYER_NAME, 'SYSTEM',  VALUE)) SYSTEM_VALUE
          FROM
            M_INIFILE_CONTENTS 
          WHERE 
            FILE_NAME = 'global.ini' AND
            SECTION = 'system_replication' AND
            KEY = 'logshipping_async_buffer_size'
        )
      ) P LEFT OUTER JOIN
      ( SELECT
          HOST,
          MAX( LAST_LOG_POSITION - SHIPPED_LOG_POSITION ) * 64 BUFFER_FILLED
        FROM
          M_SERVICE_REPLICATION
        GROUP BY
          HOST
      ) R ON
        1 = 1
      GROUP BY
        R.HOST,
        P.BUFFER_SIZE,
        R.BUFFER_FILLED
    )
    UNION ALL
    ( SELECT
        NAME,
        HOST,
        CASE NAME
          WHEN 'SYNC_LOG_SHIPPING_TIME_HIST' THEN TO_VARCHAR(TO_DECIMAL(MAX_LOG_SHIP_MS_PER_REQ, 10, 2))
          ELSE TO_VARCHAR(TO_DECIMAL(IFNULL(MAP(LOG_SHIP_CNT, 0, 0, LOG_SHIP_MS / LOG_SHIP_CNT), 0), 10, 2))
        END
      FROM
      ( SELECT
          C.NAME,
          R.HOST,
          SUM(CASE WHEN SECONDS_BETWEEN(R.SERVER_TIMESTAMP, M.SERVER_TIMESTAMP) <= C.SECONDS THEN R.LOG_SHIP_CNT ELSE 0 END) LOG_SHIP_CNT,
          SUM(CASE WHEN SECONDS_BETWEEN(R.SERVER_TIMESTAMP, M.SERVER_TIMESTAMP) <= C.SECONDS THEN R.LOG_SHIP_MS ELSE 0 END) LOG_SHIP_MS,
          MAX(MAP(LOG_SHIP_CNT, 0, 0, LOG_SHIP_MS / LOG_SHIP_CNT)) MAX_LOG_SHIP_MS_PER_REQ
        FROM
        ( SELECT 'SYNC_LOG_SHIPPING_TIME_CURR' NAME, 1 SECONDS FROM DUMMY UNION ALL
          SELECT 'SYNC_LOG_SHIPPING_TIME_REC',       86400     FROM DUMMY UNION ALL
          SELECT 'SYNC_LOG_SHIPPING_TIME_HIST',      99999999  FROM DUMMY
        ) C,
        ( SELECT
            MAX(SERVER_TIMESTAMP) SERVER_TIMESTAMP,
            HOST
          FROM
            _SYS_STATISTICS.HOST_SERVICE_REPLICATION
          GROUP BY HOST
        ) M,
        ( SELECT
            SERVER_TIMESTAMP,
            HOST,
            LOG_SHIP_CNT,
            LOG_SHIP_MS
          FROM
          ( SELECT
              SERVER_TIMESTAMP,
              HOST,
              ( SUM(SHIPPED_LOG_BUFFERS_COUNT)      - LAG(SUM(SHIPPED_LOG_BUFFERS_COUNT), 1)      OVER (PARTITION BY HOST ORDER BY SERVER_TIMESTAMP))        LOG_SHIP_CNT,
              ( SUM(SHIPPED_LOG_BUFFERS_DURATION)   - LAG(SUM(SHIPPED_LOG_BUFFERS_DURATION), 1)   OVER (PARTITION BY HOST ORDER BY SERVER_TIMESTAMP)) / 1000 LOG_SHIP_MS
            FROM
              _SYS_STATISTICS.HOST_SERVICE_REPLICATION
            WHERE
              REPLICATION_MODE LIKE 'SYNC%'
            GROUP BY
              SERVER_TIMESTAMP,
              HOST
          )
          WHERE
            LOG_SHIP_CNT >= 0
        ) R
        GROUP BY
          C.NAME,
          R.HOST
      )
    )
    UNION ALL
    ( SELECT
        'ASYNC_BUFFER_FULL_LAST_DAY',
        R.HOST,
        TO_VARCHAR(BUFF_FULL)
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          SUM(BUFF_FULL) BUFF_FULL,
          HOST
        FROM
        ( SELECT
            SERVER_TIMESTAMP,
            HOST,
            ASYNC_BUFFER_FULL_COUNT - LAG(ASYNC_BUFFER_FULL_COUNT, 1) OVER (PARTITION BY HOST, PORT ORDER BY SERVER_TIMESTAMP) BUFF_FULL
          FROM
            _SYS_STATISTICS.HOST_SERVICE_REPLICATION
          WHERE
            SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) <= 88000
        )
        WHERE
          BUFF_FULL >= 0
        GROUP BY
          HOST
      ) R ON
        1 = 1
    )
    UNION ALL
    ( SELECT
        'LAST_SPECIAL_DUMP',
        '',
        TO_VARCHAR(TO_DECIMAL(SECONDS_BETWEEN(MAX(FILE_MTIME), CURRENT_TIMESTAMP) / 86400, 10, 2))
      FROM
        M_TRACEFILES
      WHERE
        FILE_NAME LIKE '%.crashdump.%.trc' OR
        FILE_NAME LIKE '%.emergencydump.%.trc' OR
        FILE_NAME LIKE '%.rtedump.%.trc'
    )
    UNION ALL
    ( SELECT
       'SQL_CACHE_LONG_INLIST',
       '',
       TO_VARCHAR(TO_DECIMAL(MAP(TOTAL_SIZE, 0, 0, INLIST_SIZE / TOTAL_SIZE * 100), 10, 2))
      FROM
        ( SELECT 
            SUM(PLAN_MEMORY_SIZE) INLIST_SIZE
          FROM
            M_SQL_PLAN_CACHE
          WHERE
            TO_VARCHAR(SUBSTR(STATEMENT_STRING, 1, 5000)) LIKE '%' || RPAD('', 396, CHAR(63) || CHAR(32) || ',' || CHAR(32)) || '%' OR
            LOCATE(SUBSTR(STATEMENT_STRING, 1, 5000), '(' || CHAR(63) || ',' || CHAR(32) || CHAR(63), 1, 100) != 0
        ),
        ( SELECT SUM(CACHED_PLAN_SIZE) TOTAL_SIZE FROM M_SQL_PLAN_CACHE_OVERVIEW )
    )
    UNION ALL
    ( SELECT
        C.NAME,
        SC.HOST,
        CASE C.NAME
          WHEN 'SQL_CACHE_DUPLICATE_HASHES' THEN 
            TO_VARCHAR(TO_DECIMAL(MAP(SC.TOTAL_ENTRIES, 0, 0, 100 - SC.DISTINCT_HASHES / SC.TOTAL_ENTRIES * 100), 10, 2)) 
          WHEN 'SQL_CACHE_SESSION_LOCAL' THEN 
            TO_VARCHAR(TO_DECIMAL(MAP(SC.TOTAL_ENTRIES, 0, 0, SC.SESSION_LOCAL_ENTRIES / SC.TOTAL_ENTRIES * 100), 10, 2))
          WHEN 'SQL_CACHE_REFERENCED' THEN
            TO_VARCHAR(TO_DECIMAL(MAP(SC.TOTAL_PLAN_SIZE, 0, 0, SC.REFERENCED_PLAN_SIZE / SC.TOTAL_PLAN_SIZE * 100), 10, 2))
        END
      FROM
      ( SELECT 'SQL_CACHE_DUPLICATE_HASHES' NAME FROM DUMMY UNION ALL
        SELECT 'SQL_CACHE_SESSION_LOCAL' FROM DUMMY UNION ALL
        SELECT 'SQL_CACHE_REFERENCED' FROM DUMMY
      ) C,
      ( SELECT
          HOST,
          COUNT(*) TOTAL_ENTRIES,
          COUNT(DISTINCT(STATEMENT_HASH)) DISTINCT_HASHES,
          SUM(MAP(PLAN_SHARING_TYPE, 'SESSION LOCAL', 1, 0)) SESSION_LOCAL_ENTRIES,
          SUM(PLAN_MEMORY_SIZE) TOTAL_PLAN_SIZE,
          SUM(MAP(REFERENCE_COUNT, 0, 0, PLAN_MEMORY_SIZE)) REFERENCED_PLAN_SIZE
        FROM
          M_SQL_PLAN_CACHE
        GROUP BY
          HOST
      ) SC
    )
    UNION ALL
    ( SELECT
        'UDIV_OVERHEAD',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_CS_TABLES
      WHERE
        MAX_UDIV >= 10000000 AND
        MAX_UDIV >= ( RAW_RECORD_COUNT_IN_MAIN + RAW_RECORD_COUNT_IN_DELTA ) * 2
    )
    UNION ALL
    ( SELECT
        'SMALL_TABLES_DELTA_SIZE',
        '',
        TO_VARCHAR(TO_DECIMAL(SUM(CT.MEMORY_SIZE_IN_DELTA) / 1024 / 1024 / 1024, 10, 2))
      FROM
        TABLES T,
        M_CS_TABLES CT
      WHERE
        T.SCHEMA_NAME = CT.SCHEMA_NAME AND
        T.TABLE_NAME = CT.TABLE_NAME AND
        T.AUTO_MERGE_ON = 'TRUE' AND
        CT.MEMORY_SIZE_IN_MAIN < 50 * 1024 * 1024 AND
        CT.MEMORY_SIZE_IN_DELTA < 500 * 1024 * 1024
    )
    UNION ALL
    ( SELECT
        'REP_PARAMETER_DEVIATION',
        '',
        TO_VARCHAR(COUNT(DISTINCT(SUBSTR_AFTER(ALERT_DETAILS, 'parameter mismatch'))))
      FROM
        _SYS_STATISTICS.STATISTICS_ALERTS
      WHERE
        ALERT_ID IN ( 21, 79 ) AND
        SECONDS_BETWEEN(ALERT_TIMESTAMP, CURRENT_TIMESTAMP) <= 7200 AND
        ALERT_DETAILS LIKE '%parameter mismatch%'
    )
    UNION ALL
    ( SELECT
        'SDI_SUBSCRIPTION_EXCEPTIONS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        REMOTE_SUBSCRIPTION_EXCEPTIONS
      WHERE
        SECONDS_BETWEEN(EXCEPTION_TIME, CURRENT_TIMESTAMP) <= 86400
    )
    UNION ALL
    ( SELECT
        'EMPTY_TABLE_PLACEMENT',
        '',
        CASE WHEN B.IS_BW_USED = 'Yes' AND P.NUM_ENTRIES = 0 THEN 'yes' ELSE 'no' END
      FROM
        ( SELECT
            COUNT(*) NUM_ENTRIES 
          FROM 
            TABLE_PLACEMENT
          WHERE
            GROUP_TYPE LIKE 'sap.bw.%'
        ) P,
        ( SELECT
            CASE WHEN IFNULL(SUM(RECORD_COUNT), 0) <= 10 THEN 'No' ELSE 'Yes' END IS_BW_USED
          FROM
            M_CS_TABLES
          WHERE
            TABLE_NAME = '/BI0/SREQUID'
        ) B
    )
    UNION ALL
    ( SELECT
        'BW_SCALEOUT_TWO_NODES',
        '',
        CASE WHEN IS_BW_USED = 'Yes' AND D.DISTRIBUTED_SYSTEM = 'Yes (2 hosts)' THEN 'yes' ELSE 'no' END
      FROM
      ( SELECT
          VALUE DISTRIBUTED_SYSTEM
        FROM
          M_SYSTEM_OVERVIEW
        WHERE
          SECTION = 'System' AND
          NAME = 'Distributed'
      ) D,
      ( SELECT
          CASE WHEN IFNULL(SUM(RECORD_COUNT), 0) <= 10 THEN 'No' ELSE 'Yes' END IS_BW_USED
        FROM
          M_CS_TABLES
        WHERE
          TABLE_NAME = '/BI0/SREQUID'
      ) B
    )
    UNION ALL
    ( SELECT /* Starting with SAP HANA Rev. 1.00.122.03 only PREFIXED is critical, SPARSE will no longer be reported */
        'INDEXES_ON_SPARSE_PREFIXED',
        '',
        TO_CHAR(COUNT(*))
      FROM
      ( SELECT
          SCHEMA_NAME,
          TABLE_NAME,
          INDEX_NAME,
          COLUMN_NAME
        FROM
        ( SELECT
            SCHEMA_NAME,
            TABLE_NAME,
            INDEX_NAME,
            COLUMN_NAME,
            CONSTRAINT,
            COUNT(*) OVER (PARTITION BY SCHEMA_NAME, TABLE_NAME, INDEX_NAME) NUM_COLUMNS
          FROM
            INDEX_COLUMNS
        )
        WHERE
          NUM_COLUMNS = 1 OR ( CONSTRAINT IN ('PRIMARY KEY', 'UNIQUE', 'NOT NULL UNIQUE' ) )
      ) IC,
      ( SELECT
          SCHEMA_NAME,
          TABLE_NAME,
          COLUMN_NAME
        FROM
          M_CS_COLUMNS,
        ( SELECT
            SUBSTR(VALUE, 1, LOCATE(VALUE, '.', 1, 2) - 1) VERSION,
            TO_NUMBER(SUBSTR(VALUE, LOCATE(VALUE, '.', 1, 2) + 1, LOCATE(VALUE, '.', 1, 3) - LOCATE(VALUE, '.', 1, 2) - 1) ||
            MAP(LOCATE(VALUE, '.', 1, 4), 0, '', '.' || SUBSTR(VALUE, LOCATE(VALUE, '.', 1, 3) + 1, LOCATE(VALUE, '.', 1, 4) - LOCATE(VALUE, '.', 1, 3) - 1 ))) REVISION 
          FROM 
            M_SYSTEM_OVERVIEW 
          WHERE 
            SECTION = 'System' AND 
            NAME = 'Version' 
        )
        WHERE
          COUNT > 1000000 AND
          ( COMPRESSION_TYPE = 'PREFIXED' OR
            COMPRESSION_TYPE = 'SPARSE' AND VERSION = '1.00' AND TO_NUMBER(REVISION) <= 122.02
          )
      ) C
      WHERE
        IC.SCHEMA_NAME = C.SCHEMA_NAME AND
        IC.TABLE_NAME = C.TABLE_NAME AND
        IC.COLUMN_NAME = C.COLUMN_NAME AND NOT EXISTS
        ( SELECT
            *
          FROM
            INDEXES IR,
            INDEX_COLUMNS ICR
          WHERE
            IR.SCHEMA_NAME = ICR.SCHEMA_NAME AND
            IR.TABLE_NAME = ICR.TABLE_NAME AND
            IR.INDEX_NAME = ICR.INDEX_NAME AND
            IR.INDEX_TYPE = 'FULLTEXT' AND
            C.SCHEMA_NAME = ICR.SCHEMA_NAME AND
            C.TABLE_NAME = ICR.TABLE_NAME AND
            C.COLUMN_NAME = ICR.COLUMN_NAME
        )
    )
    UNION ALL
    ( SELECT
        'MISSING_INVERTED_INDEXES',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_CS_COLUMNS C,
        ( SELECT IC.*, COUNT(*) OVER (PARTITION BY SCHEMA_NAME, TABLE_NAME, INDEX_NAME) NUM_COLUMNS FROM INDEX_COLUMNS IC ) IC
      WHERE
        C.SCHEMA_NAME = IC.SCHEMA_NAME AND
        C.TABLE_NAME = IC.TABLE_NAME AND
        C.COLUMN_NAME = IC.COLUMN_NAME AND
        C.LOADED = 'TRUE' AND
        C.INDEX_TYPE = 'NONE' AND
        ( IC.CONSTRAINT IN ('PRIMARY KEY', 'UNIQUE', 'NOT NULL UNIQUE' ) OR
          IC.NUM_COLUMNS = 1
        ) AND NOT EXISTS
        ( SELECT
            *
          FROM
            INDEXES IR,
            INDEX_COLUMNS ICR
          WHERE
            IR.SCHEMA_NAME = ICR.SCHEMA_NAME AND
            IR.TABLE_NAME = ICR.TABLE_NAME AND
            IR.INDEX_NAME = ICR.INDEX_NAME AND
            IR.INDEX_TYPE LIKE 'FULLTEXT%' AND
            C.SCHEMA_NAME = ICR.SCHEMA_NAME AND
            C.TABLE_NAME = ICR.TABLE_NAME AND
            C.COLUMN_NAME = ICR.COLUMN_NAME
        )
    )
    UNION ALL
    ( SELECT
        'LARGE_COLUMNS_NOT_COMPRESSED',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_CS_COLUMNS C,
        TABLE_COLUMNS TC
      WHERE
        C.SCHEMA_NAME = TC.SCHEMA_NAME AND
        C.TABLE_NAME = TC.TABLE_NAME AND
        C.COLUMN_NAME = TC.COLUMN_NAME AND
        C.COUNT > 10000000 AND
        C.DISTINCT_COUNT <= COUNT * 0.05 AND
        C.COMPRESSION_TYPE = 'DEFAULT' AND
        TC.GENERATION_TYPE IS NULL AND
        C.MEMORY_SIZE_IN_TOTAL >= 500 * 1024 * 1024
    )
    UNION ALL
    ( SELECT
        'MAX_CURR_SERV_ALL_LIMIT_USED',
        HOST,
        TO_VARCHAR(ROUND(MAX(MAP(EFFECTIVE_ALLOCATION_LIMIT, 0, 0, TOTAL_MEMORY_USED_SIZE / EFFECTIVE_ALLOCATION_LIMIT * 100))))
      FROM
        M_SERVICE_MEMORY
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'MAX_HIST_SERV_ALL_LIMIT_USED',
        IFNULL(HOST, ''),
        IFNULL(TO_VARCHAR(HOURS), '999999')
      FROM
        DUMMY BI LEFT OUTER JOIN
      ( SELECT
          HOST,
          ROUND(MIN(SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) / 3600)) HOURS
        FROM
          _SYS_STATISTICS.HOST_SERVICE_MEMORY
        WHERE
          TOTAL_MEMORY_USED_SIZE > EFFECTIVE_ALLOCATION_LIMIT * 0.8
        GROUP BY
          HOST
      ) R ON
        1 = 1
    )
    UNION ALL
    ( SELECT
        'AUDIT_LOG_SIZE',
        '',
        TO_VARCHAR(TO_DECIMAL(SUM(DISK_SIZE) / 1024 / 1024 / 1024, 10, 2))
      FROM
        M_TABLE_PERSISTENCE_STATISTICS
      WHERE
        SCHEMA_NAME = '_SYS_AUDIT' AND
        TABLE_NAME = 'CS_AUDIT_LOG_'
    )
    UNION ALL
    ( SELECT
        'MAX_OBJECT_OID',
        '',
        TO_VARCHAR(MAX(OBJECT_OID))
      FROM
        OBJECTS
    )
    UNION ALL
    ( SELECT
        'LARGE_SWAP_SPACE',
        HOST,
        TO_VARCHAR(TO_DECIMAL(VALUE / 1024 / 1024 / 1024, 10, 2))
      FROM
        M_HOST_INFORMATION
      WHERE
        KEY = 'mem_swap' 
    )
/* SAP HANA bug 102065    UNION ALL
    ( SELECT
        'TEMPORARY_TABLES',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_TEMPORARY_TABLES 
    ) */
    UNION ALL
    ( SELECT
        C.NAME,
        '',
        TO_VARCHAR(MAP(MAX(T.TABLE_NAME), NULL, 0, COUNT(*)))
      FROM
      ( SELECT 'MANY_RECORDS' NAME            FROM DUMMY UNION ALL
        SELECT 'SID_TABLES_WITH_MANY_RECORDS' FROM DUMMY UNION ALL
        SELECT 'MANY_RECORDS_HISTORY'         FROM DUMMY UNION ALL
        SELECT 'MANY_RECORDS_UDIV'            FROM DUMMY
      ) C LEFT OUTER JOIN
        M_CS_TABLES T ON
        ( C.NAME = 'MANY_RECORDS' AND T.RECORD_COUNT > 1500000000 AND T.TABLE_NAME NOT LIKE '/B%/S%' ) OR
        ( C.NAME = 'SID_TABLES_WITH_MANY_RECORDS' AND T.RECORD_COUNT > 1500000000 AND T.TABLE_NAME LIKE '/B%/S%' ) OR
        ( C.NAME = 'MANY_RECORDS_HISTORY' AND T.RAW_RECORD_COUNT_IN_HISTORY_MAIN + T.RAW_RECORD_COUNT_IN_HISTORY_DELTA > 1500000000 ) OR
        ( C.NAME = 'MANY_RECORDS_UDIV' AND T.MAX_UDIV > 1500000000 AND T.RECORD_COUNT < 1500000000 )
      GROUP BY
        C.NAME
    )
    UNION ALL
    ( SELECT
        C.NAME,
        '',
        TO_VARCHAR(MAP(MAX(T.TABLE_NAME), NULL, 0, COUNT(*)))
      FROM
      ( SELECT 'NUM_PARTITIONED_SID_TABLES' NAME FROM DUMMY UNION ALL
        SELECT 'NUM_PART_SPECIAL_TABLES'         FROM DUMMY
      ) C LEFT OUTER JOIN
      ( SELECT
          SCHEMA_NAME,
          TABLE_NAME,
          SUM(RECORD_COUNT) RECORD_COUNT
        FROM
          M_CS_TABLES
        WHERE
          TABLE_NAME LIKE '/B%/%'
        GROUP BY
          SCHEMA_NAME,
          TABLE_NAME
        HAVING
          COUNT(*) > 1
      ) T ON
      ( C.NAME = 'NUM_PARTITIONED_SID_TABLES' AND T.TABLE_NAME LIKE '/B%/S%' ) OR
      ( C.NAME = 'NUM_PART_SPECIAL_TABLES' AND T.RECORD_COUNT <= 1500000000 AND
        ( TABLE_NAME LIKE '/B%/H%' OR TABLE_NAME LIKE '/B%/I%' OR TABLE_NAME LIKE '/B%/J%' OR
          TABLE_NAME LIKE '/B%/K%' OR TABLE_NAME LIKE '/B%/P%' OR TABLE_NAME LIKE '/B%/Q%' OR
          TABLE_NAME LIKE '/B%/T%' OR TABLE_NAME LIKE '/B%/X%' OR TABLE_NAME LIKE '/B%/Y%' 
        )
      )
      GROUP BY
        C.NAME
    )
    UNION ALL
    ( SELECT
        'TABLES_WRONG_SERVICE',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_CS_TABLES T,
        M_SERVICES S,
      ( SELECT
          MAP(COUNT(*), 0, 'No', 'Yes') IS_SYSTEMDB
        FROM
          M_DATABASE D1,
          M_DATABASES D2
        WHERE
          D1.DATABASE_NAME = D2.DATABASE_NAME AND
          D2.DESCRIPTION LIKE 'SystemDB%'
      ) M
      WHERE
        S.PORT = T.PORT AND
        ( M.IS_SYSTEMDB = 'No' AND S.SERVICE_NAME != 'indexserver' OR
          M.IS_SYSTEMDB = 'Yes' AND S.SERVICE_NAME NOT IN ( 'indexserver', 'nameserver')
        )
    )
    UNION ALL
    ( SELECT
        'TABLES_WITH_EMPTY_LOCATION',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_TABLE_LOCATIONS
      WHERE
        LOCATION IS NULL OR LOCATION = ''
    )
    UNION ALL
    ( SELECT
        'UNKNOWN_HARDWARE',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_HOST_INFORMATION
      WHERE
        KEY IN ( 'hw_model', 'hw_manufacturer' ) AND
        UPPER(VALUE) = '<UNKNOWN>'
    )
    UNION ALL
    ( SELECT
        'OS_RELEASE',
        HOST,
        CASE OS_PPMS_NAME
          WHEN 'LINUX_PPC64' THEN
            CASE 
              WHEN OS_NAME = 'SUSE Linux Enterprise Server 11.4'           AND VERSION = 1.00                                           THEN 'yes' 
              WHEN OS_NAME = 'SUSE Linux Enterprise Server 12.1'           AND VERSION = 2.00                                           THEN 'yes' 
              ELSE 'no (' || OS_NAME || ')'
            END
          ELSE
            CASE 
              WHEN OS_NAME = 'SUSE Linux Enterprise Server 11.1'           AND VERSION = 1.00 AND REVISION <  100                                           THEN 'yes'
              WHEN OS_NAME = 'SUSE Linux Enterprise Server 11.2'           AND VERSION = 1.00 AND REVISION <  120                                           THEN 'yes'
              WHEN OS_NAME = 'SUSE Linux Enterprise Server 11.3'           AND VERSION = 1.00 AND REVISION <  130                                           THEN 'yes'
              WHEN OS_NAME = 'SUSE Linux Enterprise Server 11.4'           AND VERSION = 1.00 AND REVISION >= 100                                           THEN 'yes'
              WHEN OS_NAME = 'SUSE Linux Enterprise Server 12.0'           AND VERSION = 1.00 AND REVISION >= 100                                           THEN 'yes'
              WHEN OS_NAME = 'SUSE Linux Enterprise Server 12.1'           AND ( VERSION = 1.00 AND REVISION >= 120 OR VERSION = 2.00 )                     THEN 'yes'
              WHEN OS_NAME = 'SUSE Linux Enterprise Server 12.2'           AND ( VERSION = 1.00 AND REVISION >= 120 OR VERSION = 2.00 AND REVISION >= 10 )  THEN 'yes'
              WHEN OS_NAME = 'Red Hat Enterprise Linux Server release 6.5' AND VERSION = 1.00 AND REVISION <  120                                           THEN 'yes'
              WHEN OS_NAME = 'Red Hat Enterprise Linux Server release 6.6' AND VERSION = 1.00 AND REVISION <  120                                           THEN 'yes'
              WHEN OS_NAME = 'Red Hat Enterprise Linux Server release 6.7' AND VERSION = 1.00 AND REVISION >= 110                                           THEN 'yes'
              WHEN OS_NAME = 'Red Hat Enterprise Linux Server release 7.2' AND ( VERSION = 1.00 AND REVISION >= 120 OR VERSION = 2.00 )                     THEN 'yes'
              WHEN OS_NAME = 'Red Hat Enterprise Linux Server release 7.3' AND ( VERSION = 1.00 AND REVISION >= 120 OR VERSION = 2.00 AND REVISION >=  21 ) THEN 'yes'
              WHEN OS_NAME LIKE 'Linux 2.6.32-431%'                        AND VERSION = 1.00 AND REVISION <  120                                           THEN 'yes'
              WHEN OS_NAME LIKE 'Linux 2.6.32-504%'                        AND VERSION = 1.00 AND REVISION <  120                                           THEN 'yes'
              WHEN OS_NAME LIKE 'Linux 2.6.32-573%'                        AND VERSION = 1.00 AND REVISION >= 110                                           THEN 'yes'
              WHEN OS_NAME LIKE 'Linux 3.10.0-327%'                        AND ( VERSION = 1.00 AND REVISION >= 120 OR VERSION = 2.00 )                     THEN 'yes'
              ELSE 'no (' || OS_NAME || ')'
          END
        END
      FROM
      ( SELECT
          HOST,
          MAX(MAP(KEY, 'os_name', VALUE)) OS_NAME,
          MAX(MAP(KEY, 'os_ppms_name', VALUE)) OS_PPMS_NAME
        FROM
          M_HOST_INFORMATION
        GROUP BY
          HOST
      ),
      ( SELECT
          TO_NUMBER(SUBSTR(VALUE, 1, 4)) VERSION,
          TO_NUMBER(LTRIM(CASE
            WHEN LOCATE(VALUE, '.', 1, 4) - LOCATE(VALUE, '.', 1, 3) = 3 THEN
              SUBSTR(VALUE, LOCATE(VALUE, '.', 1, 2) + 1, LOCATE(VALUE, '.', 1, 4) - LOCATE(VALUE, '.', 1, 2) - 1)
            ELSE 
              SUBSTR(VALUE, LOCATE(VALUE, '.', 1, 2) + 1, LOCATE(VALUE, '.', 1, 3) - LOCATE(VALUE, '.', 1, 2) - 1) || '.00'
          END, '0')) REVISION
        FROM 
          M_SYSTEM_OVERVIEW 
        WHERE 
          SECTION = 'System' AND 
          NAME = 'Version' 
      )
    )
    UNION ALL
    ( SELECT
        'OS_KERNEL_BIGMEM',
        IFNULL(HOST, ''),
        MAP(HOST, NULL, 'no', 'yes')
      FROM
        DUMMY D LEFT OUTER JOIN
      ( SELECT
          HOST
        FROM
        ( SELECT
            HOST,
            MAX(MAP(KEY, 'os_name', VALUE)) OS_NAME,
            MAX(MAP(KEY, 'os_ppms_name', VALUE)) OS_PPMS_NAME,
            MAX(MAP(KEY, 'os_kernel_version', VALUE)) OS_KERNEL_VERSION
          FROM
            M_HOST_INFORMATION
          GROUP BY
            HOST
        )
        WHERE
          OS_NAME LIKE 'SUSE Linux Enterprise Server 11%' AND
          OS_PPMS_NAME = 'LINUX_PPC64' AND
          OS_KERNEL_VERSION NOT LIKE '%bigmem%'
      ) ON
        1 = 1
    )
    UNION ALL
    ( SELECT /* Needs to be able to extract the first up to three numbers after the first "-" (e.g. 0, 47, 71) from versions like 
                3.0.101-0.47.71.7930.0.PTF-default, 3.0.101-0.47-bigsmp or 3.0.101-0.47.71-default or 
                3.0.101-63-default / 3.0.101-65.1.9526.1.PTF-default (SLES 11.4, 12.1) / 3.12.62-60.62-default,
                3.10.0-327.el7.x86_64, 3.10.0-327.44.2.el7.x86_64 (same also with "el6")
                ".1" is usually redundant, so 88.1 is identical to 88  */
        'OS_KERNEL_VERSION',
        HOST,
        CASE 
          WHEN OS_NAME = 'SUSE Linux Enterprise Server 11.2' AND NFS_USED = 'X' AND ( KV_2 < 7   OR KV_2 = 7   AND KV_3 < 23 )                                          THEN 'no' || CHAR(32) || '(' || KV || ' instead of >= 0.7.23)'
          WHEN OS_NAME = 'SUSE Linux Enterprise Server 11.3' AND NFS_USED = 'X' AND ( KV_2 < 40 )                                                                       THEN 'no' || CHAR(32) || '(' || KV || ' instead of >= 0.40)'
          WHEN OS_NAME = 'SUSE Linux Enterprise Server 11.3' AND XFS_USED = 'X' AND ( KV_2 < 47  OR KV_2 = 47  AND KV_3 < 71 )                                          THEN 'no' || CHAR(32) || '(' || KV || ' instead of >= 0.47.71)'
          WHEN OS_NAME = 'SUSE Linux Enterprise Server 11.4'                    AND ( KV_1 < 104 OR KV_1 = 104 AND KV_2 < 2  )                                          THEN 'no' || CHAR(32) || '(' || KV || ' instead of >= 0.104.2)'
          WHEN OS_NAME = 'SUSE Linux Enterprise Server 12'                      AND ( KV_1 < 52  OR KV_1 = 52  AND KV_2 < 72 )                                          THEN 'no' || CHAR(32) || '(' || KV || ' instead of >= 52.72)'
          WHEN OS_NAME = 'SUSE Linux Enterprise Server 12.1'                    AND ( KV_1 < 60  OR KV_1 = 60  AND KV_2 < 64 OR KV_1 = 60 AND KV_2 = 64 AND KV_3 < 40 ) THEN 'no' || CHAR(32) || '(' || KV || ' instead of >= 60.64.40)'
          WHEN OS_NAME = 'SUSE Linux Enterprise Server 12.2'                    AND ( KV_1 < 92  OR KV_1 = 92  AND KV_2 < 35 )                                          THEN 'no' || CHAR(32) || '(' || KV || ' instead of >= 92.35)'
          ELSE 'yes'
        END 
      FROM
      ( SELECT
          HOST,
          OS_NAME,
          OS_PPMS_NAME,
          TO_NUMBER(CASE 
            WHEN LOCATE(KV, '.', 1, 1) = 0 THEN KV 
            ELSE SUBSTR(KV, 1, LOCATE(KV, '.', 1, 1) - 1)
          END )  KV_1,
          TO_NUMBER(CASE 
            WHEN LOCATE(KV, '.', 1, 1) = 0 THEN 1 
            WHEN LOCATE(KV, '.', 1, 2) = 0 THEN SUBSTR(KV, LOCATE(KV, '.', 1, 1) + 1)
            ELSE SUBSTR(KV, LOCATE(KV, '.', 1, 1) + 1, LOCATE(KV, '.', 1, 2) - LOCATE(KV, '.', 1, 1) - 1)
          END ) KV_2,
          TO_NUMBER(CASE 
            WHEN LOCATE(KV, '.', 1, 2) = 0 THEN 1 
            WHEN LOCATE(KV, '.', 1, 3) = 0 THEN SUBSTR(KV, LOCATE(KV, '.', 1, 2) + 1)
            ELSE SUBSTR(KV, LOCATE(KV, '.', 1, 2) + 1, LOCATE(KV, '.', 1, 3) - LOCATE(KV, '.', 1, 2) - 1)
          END ) KV_3,
          KV_ORIG KV,
          NFS_USED,
          XFS_USED
        FROM
        ( SELECT
            O.HOST,
            O.OS_NAME,
            O.OS_PPMS_NAME,
            CASE
              WHEN KV LIKE '%.el_.%' THEN
                SUBSTR(KV, LOCATE(KV, '-', 1, 1) + 1, LEAST(LOCATE(KV, '.el', 1, 1), MAP(LOCATE(KV, '.', 1, 5), 0, 999, LOCATE(KV, '.', 1, 5))) - LOCATE(KV, '-', 1, 1) - 1)
              ELSE
                SUBSTR(KV, LOCATE(KV, '-', 1, 1) + 1, LEAST(LOCATE(KV, '-', 1, 2),   MAP(LOCATE(KV, '.', 1, 5), 0, 999, LOCATE(KV, '.', 1, 5))) - LOCATE(KV, '-', 1, 1) - 1)
            END KV,
            O.KV KV_ORIG,
            D.NFS_USED,
            D.XFS_USED
          FROM
          ( SELECT
              HOST,
              MAX(MAP(KEY, 'os_name', VALUE)) OS_NAME,
              MAX(MAP(KEY, 'os_ppms_name', VALUE)) OS_PPMS_NAME,
              MAX(MAP(KEY, 'os_kernel_version', VALUE)) KV
            FROM
              M_HOST_INFORMATION
            GROUP BY
              HOST
          ) O,
          ( SELECT 
              CASE SUM(MAP(FILESYSTEM_TYPE, 'nfs', 1, 0)) WHEN 0 THEN ' ' ELSE 'X' END NFS_USED,
              CASE SUM(MAP(FILESYSTEM_TYPE, 'xfs', 1, 0)) WHEN 0 THEN ' ' ELSE 'X' END XFS_USED 
            FROM 
              M_DISKS 
          ) D
        )
      )
    )
    UNION ALL
    ( SELECT
        'SERVICE_LOG_BACKUPS',
        '',
        TO_VARCHAR(MAX(LOG_BACKUPS))
      FROM
      ( SELECT
          CF.HOST,
          CF.SERVICE_TYPE_NAME,
          COUNT(*) LOG_BACKUPS
        FROM
          M_BACKUP_CATALOG C,
          M_BACKUP_CATALOG_FILES CF
        WHERE
          C.BACKUP_ID = CF.BACKUP_ID AND
          C.ENTRY_TYPE_NAME = 'log backup' AND
          C.STATE_NAME = 'successful' AND
          C.SYS_START_TIME >= ADD_SECONDS(CURRENT_TIMESTAMP, -86400) AND
          CF.SOURCE_TYPE_NAME = 'volume'
        GROUP BY
          CF.HOST,
          CF.SERVICE_TYPE_NAME
      )
    )
    UNION ALL
    ( SELECT
        'OPEN_CONNECTIONS',
        HOST,
        TO_VARCHAR(TO_DECIMAL(MAP(MAX_CONNECTIONS, 0, 0, NUM_CONNECTIONS / MAX_CONNECTIONS * 100), 10, 2))
      FROM
      ( SELECT
          C.HOST,
          C.NUM_CONNECTIONS,
          IFNULL(P.SYSTEM_VALUE, IFNULL(P.HOST_VALUE, IFNULL(P.DEFAULT_VALUE, 65536))) MAX_CONNECTIONS
        FROM
        ( SELECT
            HOST,
            COUNT(*) NUM_CONNECTIONS
          FROM
            M_CONNECTIONS
          WHERE
            CONNECTION_TYPE IN ('Local', 'Remote')
          GROUP BY
            HOST
        ) C LEFT OUTER JOIN
        ( SELECT 
            HOST,
            MAX(MAP(LAYER_NAME, 'DEFAULT', VALUE)) DEFAULT_VALUE,
            MAX(MAP(LAYER_NAME, 'HOST',    VALUE)) HOST_VALUE,
            MAX(MAP(LAYER_NAME, 'SYSTEM',  VALUE)) SYSTEM_VALUE
          FROM
            M_INIFILE_CONTENTS 
          WHERE 
            FILE_NAME = 'indexserver.ini' AND
            SECTION = 'session' AND
            KEY = 'maximum_connections'
          GROUP BY
            HOST
        ) P ON
          C.HOST = P.HOST
      )
    )
    UNION ALL
    ( SELECT
        'OPEN_TRANSACTIONS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_TRANSACTIONS
    )
    UNION ALL
    ( SELECT
        'SERVER_TIME_VARIATION',
        '',
        TO_VARCHAR(SECONDS_BETWEEN(MIN(SYS_TIMESTAMP), MAX(SYS_TIMESTAMP)))
      FROM
        M_HOST_RESOURCE_UTILIZATION
    )
    UNION ALL
    ( SELECT
        'CALCENGINE_CACHE_UTILIZATION',
        '',
        TO_VARCHAR(ROUND(MAP(P.CONF_SIZE_KB, 0, 100, C.USED_SIZE_KB / P.CONF_SIZE_KB * 100))) USED_PCT
      FROM
      ( SELECT
          IFNULL(MAX(USED_SIZE_BYTE) / 1024, 0) USED_SIZE_KB
        FROM
        ( SELECT
            SUM(MEMORY_SIZE) USED_SIZE_BYTE
          FROM
            M_CE_CALCSCENARIOS
          WHERE 
            IS_PERSISTENT = 'TRUE'
          GROUP BY
            HOST,
            PORT
        )
      ) C,
      ( SELECT
          MAP(VALUE, NULL, 1048576, VALUE) CONF_SIZE_KB
        FROM
          DUMMY LEFT OUTER JOIN
          M_INIFILE_CONTENTS ON
            FILE_NAME = 'indexserver.ini' AND
            SECTION = 'calcengine' AND
            KEY = 'max_cache_size_kb'
      ) P
    )
    UNION ALL
    ( SELECT
        'SQL_CACHE_FREQUENT_HASH',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
      ( SELECT
          STATEMENT_HASH
        FROM
          M_SQL_PLAN_CACHE
        WHERE
        ( STATEMENT_HASH IS NOT NULL AND STATEMENT_HASH != '' )
        GROUP BY
          HOST,
          STATEMENT_HASH
        HAVING
          COUNT(*) > 100
      )
    )
    UNION ALL
    ( SELECT
        'INVALID_PROCEDURES',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        PROCEDURES
      WHERE
        IS_VALID = 'FALSE'
    )
    UNION ALL
    ( SELECT
        'PARKED_JOBWORKERS',
        '',
        TO_VARCHAR(TO_DECIMAL(MAX(MAP(TOTAL_WORKER_COUNT, 0, 0, PARKED_WORKER_COUNT / TOTAL_WORKER_COUNT)), 10, 2))
      FROM
        M_JOBEXECUTORS
    )
    UNION ALL
    ( SELECT
        'QUEUED_JOBWORKERS',
        '',
        TO_VARCHAR(MAX(QUEUED_JOBS))
      FROM
      ( SELECT
          SUM(QUEUED_WAITING_JOB_COUNT) QUEUED_JOBS
        FROM
          M_JOBEXECUTORS
        GROUP BY
         HOST
      )
    )
    UNION ALL
    ( SELECT
        C.NAME,
        '',
        CASE C.NAME
          WHEN 'TRANSACTIONS_LARGE_UNDO' THEN TO_VARCHAR(TO_DECIMAL(MAX(UNDO_LOG_AMOUNT / 1024 / 1024), 10, 2))
          WHEN 'TRANSACTIONS_LARGE_REDO' THEN TO_VARCHAR(TO_DECIMAL(MAX(REDO_LOG_AMOUNT / 1024 / 1024), 10, 2))
        END
      FROM
      ( SELECT 'TRANSACTIONS_LARGE_UNDO' NAME FROM DUMMY UNION ALL
        SELECT 'TRANSACTIONS_LARGE_REDO' FROM DUMMY
      ) C,
        M_TRANSACTIONS T
      GROUP BY
        C.NAME
    )
    UNION ALL
    ( SELECT
        'LONG_RUNNING_JOB',
        '',
        TO_VARCHAR(IFNULL(MAX(GREATEST( 0, SECONDS_BETWEEN(START_TIME, CURRENT_TIMESTAMP))), 0))
      FROM
        M_JOB_PROGRESS
    )
    UNION ALL
    ( SELECT
        'TOPOLOGY_DAEMON_INCONSISTENT',
        S.HOST,
        TO_VARCHAR(SUM(MAP(S.ACTIVE_STATUS, 'NO', 1, 0)))
      FROM
        M_SERVICES D,
        M_SERVICES S
      WHERE
        D.SERVICE_NAME = 'daemon' AND
        D.ACTIVE_STATUS = 'YES' AND
        S.HOST = D.HOST
      GROUP BY
        S.HOST
    )
    UNION ALL
    ( SELECT
        'TOPOLOGY_ROLES_INCONSISTENT',
        '',
        MAP(C.CONF_WORKERS, A.ACT_WORKERS, 'no', 'yes')
      FROM
      ( SELECT COUNT(*) CONF_WORKERS FROM M_LANDSCAPE_HOST_CONFIGURATION WHERE INDEXSERVER_CONFIG_ROLE = 'WORKER' ) C,
      ( SELECT COUNT(*) ACT_WORKERS  FROM M_LANDSCAPE_HOST_CONFIGURATION WHERE INDEXSERVER_ACTUAL_ROLE IN ('MASTER', 'SLAVE' ) ) A
    )
    UNION ALL
    ( SELECT
        'CORRUPTION_RISK_LARGE_TABLES',
        '',
        TO_VARCHAR(COUNT(DISTINCT(T.SCHEMA_NAME || T.TABLE_NAME || T.PART_ID)))
      FROM
        M_CS_TABLES T,
        M_CS_ALL_COLUMNS C
      WHERE
        T.SCHEMA_NAME = C.SCHEMA_NAME AND
        T.TABLE_NAME = C.TABLE_NAME AND
        T.RAW_RECORD_COUNT_IN_MAIN > 1000000000 AND
        C.INDEX_TYPE = 'FULL'
    )
    UNION ALL
    ( SELECT
        'NOLOGGING_TABLES',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        TABLES
      WHERE
        IS_LOGGED = 'FALSE'
    )
    UNION ALL
    ( SELECT
        'ABAP_POOL_CLUSTER_TABLES',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_CS_TABLES
      WHERE
        TABLE_NAME IN ('CDCLS', 'EDI40', 'KAPOL', 'KOCLU', 'RFBLG' ) AND
        RECORD_COUNT > 0
    )
/*  UNION ALL
    ( SELECT
        'SR_LOGREPLAY',
        '',
        CASE WHEN SR_USED = 'Yes' AND OPERATION_MODE = 'delta_datashipping' THEN 'no' ELSE 'yes' END       
      FROM
      ( SELECT
          MAP(COUNT(*), 0, 'No', 'Yes') SR_USED
        FROM
          M_SERVICE_REPLICATION
        WHERE
          REPLICATION_MODE != '' 
      ) R,
      ( SELECT
          IFNULL(SYSTEM_VALUE, IFNULL(HOST_VALUE, IFNULL(DEFAULT_VALUE, 'delta_datashipping'))) OPERATION_MODE
        FROM
        ( SELECT 
            MAX(MAP(LAYER_NAME, 'DEFAULT', VALUE)) DEFAULT_VALUE,
            MAX(MAP(LAYER_NAME, 'HOST',    VALUE)) HOST_VALUE,
            MAX(MAP(LAYER_NAME, 'SYSTEM',  VALUE)) SYSTEM_VALUE
          FROM
            M_INIFILE_CONTENTS 
          WHERE 
            FILE_NAME = 'global.ini' AND
            SECTION = 'system_replication' AND
            KEY = 'operation_mode'
        )
      )
    ) */
    UNION ALL
    ( SELECT
        I.NAME,
        '',
        TO_VARCHAR(SUM(CASE I.NAME
          WHEN 'TRANS_LOCKS_GLOBAL' THEN 1
          WHEN 'OLD_TRANS_LOCKS'    THEN CASE WHEN R.ACQUIRED_TIME != '' AND SECONDS_BETWEEN(R.ACQUIRED_TIME, CURRENT_TIMESTAMP) >= 86400 THEN 1 ELSE 0 END
        END))
      FROM
      ( SELECT 'TRANS_LOCKS_GLOBAL' NAME FROM DUMMY UNION ALL
        SELECT 'OLD_TRANS_LOCKS' FROM DUMMY
      ) I LEFT OUTER JOIN
      ( SELECT ACQUIRED_TIME FROM M_OBJECT_LOCKS UNION ALL
        SELECT ACQUIRED_TIME FROM M_RECORD_LOCKS WHERE TABLE_NAME LIKE '%'
      ) R ON
        1 = 1
      GROUP BY
        I.NAME
    )
    UNION ALL
    ( SELECT
        'MULTI_COLUMN_HASH_PART',
        '',
        TO_VARCHAR(SUM(MAP(LOCATE(HASH_SPEC, ','), 0, 0, 1)))
      FROM
      ( SELECT 
          TABLE_NAME,
          SUBSTR(PARTITION_SPEC, 1, MAP(LOCATE(PARTITION_SPEC, ';', 1), 0, 9999, LOCATE(PARTITION_SPEC, ';', 1)) - 1) HASH_SPEC
        FROM 
          TABLES 
        WHERE 
          PARTITION_SPEC LIKE 'HASH%' AND
          TABLE_NAME NOT LIKE '/B%/%' AND
          SUBSTR(TABLE_NAME, 1, 3) != 'TR_'             /* BW transformation tables */
      )
    )
    UNION ALL
    ( SELECT
        'CONNECTIONS_CANCEL_REQUESTED',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_CONNECTIONS
      WHERE
        CONNECTION_STATUS LIKE '%CANCEL REQUESTED%' AND
        CREATED_BY != 'Dynamic Range Partitioning'
    )
    UNION ALL
    ( SELECT
        'TWO_COLUMN_MANDT_INDEXES',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
      ( SELECT
          SCHEMA_NAME,
          INDEX_NAME,
          SUM(MAP(COLUMN_NAME, 'MANDT', 1, 'MANDANT', 1, 'CLIENT', 1, 'DCLIENT', 1, 0)) NUM_CLIENT_COLUMNS,
          COUNT(*) NUM_COLUMNS
        FROM
          INDEX_COLUMNS
        WHERE
          CONSTRAINT NOT LIKE '%UNIQUE%' AND CONSTRAINT NOT LIKE '%PRIMARY KEY%'
        GROUP BY
          SCHEMA_NAME,
          INDEX_NAME
      )
      WHERE
        NUM_CLIENT_COLUMNS > 0 AND
        NUM_COLUMNS = 2
    )
    UNION ALL
    ( SELECT
        'UNSUPPORTED_FILESYSTEMS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_DISKS
      WHERE
        FILESYSTEM_TYPE LIKE 'UNSUPPORTED%'
    )
    UNION ALL
    ( SELECT
        'DPSERVER_ON_SLAVE_NODES',
        '', 
        TO_VARCHAR(COUNT(*))
      FROM
      ( SELECT DISTINCT HOST FROM M_SERVICES WHERE SERVICE_NAME = 'dpserver' ) S1,
      ( SELECT DISTINCT HOST FROM M_SERVICES WHERE SERVICE_NAME = 'indexserver' AND COORDINATOR_TYPE != 'MASTER' ) S2
      WHERE
        S1.HOST = S2.HOST 
    )
    UNION ALL
    ( SELECT
        'TEMPORARY_BW_TABLES',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        TABLES
      WHERE
        TABLE_NAME LIKE '/BI0/0%'
    )
    UNION ALL
    ( SELECT
        'HDBSTUDIO_CONNECTIONS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_SESSION_CONTEXT
      WHERE
        KEY = 'APPLICATION' AND
        VALUE = 'HDBStudio'
    )
    UNION ALL
    ( SELECT
        'OUTDATED_HDBSTUDIO_VERSION',
        '',
        TO_VARCHAR(SUM( CASE 
          WHEN D.VERSION = '1' AND D.SUBVERSION = '12' AND SC2.VALUE < '2.3' THEN 1
          WHEN D.VERSION = '1' AND D.SUBVERSION = '11' AND SC2.VALUE < '2.2' THEN 1
          WHEN D.VERSION = '1' AND D.SUBVERSION = '10' AND SC2.VALUE < '2.1' THEN 1
          WHEN D.VERSION = '1' AND D.SUBVERSION = '90' AND SC2.VALUE < '2.0' THEN 1
          ELSE 0 END ))
      FROM
        ( SELECT SUBSTR(VERSION, 1, 1) VERSION, SUBSTR(VERSION, 6, 2) SUBVERSION FROM M_DATABASE ) D,
        M_SESSION_CONTEXT SC1,
        M_SESSION_CONTEXT SC2
      WHERE
        SC1.HOST = SC2.HOST AND
        SC1.PORT = SC2.PORT AND
        SC1.CONNECTION_ID = SC2.CONNECTION_ID AND
        SC1.KEY = 'APPLICATION' AND
        SC1.VALUE = 'HDBStudio' AND
        SC2.KEY = 'APPLICATIONVERSION' 
    )
    UNION ALL
    ( SELECT
        'SHADOW_PAGE_SIZE',
        HOST, 
        TO_VARCHAR(TO_DECIMAL(MAX(SIZE_GB), 10, 2))
      FROM
      ( SELECT
          HOST,
          SUM(PAGE_SIZE * SHADOW_BLOCK_COUNT) / 1024 / 1024 / 1024 SIZE_GB
        FROM
          _SYS_STATISTICS.HOST_DATA_VOLUME_PAGE_STATISTICS
        WHERE
          SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) <= 86400
        GROUP BY
          HOST,
          SERVER_TIMESTAMP
      )
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'DATASHIPPING_LOGRETENTION',
        '',
        CASE WHEN MODE = 'delta_datashipping' AND LOG_RETENTION = 'on' THEN 'yes' ELSE 'no' END
      FROM
      ( SELECT
          MAX(MAP(KEY, 'operation_mode', IFNULL(SYSTEM_VALUE, IFNULL(HOST_VALUE, IFNULL(DEFAULT_VALUE, KEY))))) MODE,
          MAX(MAP(KEY, 'enable_log_retention', IFNULL(SYSTEM_VALUE, IFNULL(HOST_VALUE, IFNULL(DEFAULT_VALUE, KEY))))) LOG_RETENTION
        FROM
        ( SELECT
            KEY,
            MAX(MAP(LAYER_NAME, 'DEFAULT', VALUE)) DEFAULT_VALUE,
            MAX(MAP(LAYER_NAME, 'HOST',    VALUE)) HOST_VALUE,
            MAX(MAP(LAYER_NAME, 'SYSTEM',  VALUE)) SYSTEM_VALUE
          FROM
            M_INIFILE_CONTENTS 
          WHERE 
            FILE_NAME = 'global.ini' AND
            SECTION = 'system_replication' AND
            KEY IN ('operation_mode', 'enable_log_retention')
          GROUP BY
            KEY
        )
      )
    )
    UNION ALL
    ( SELECT
        'REPLICATION_SAVEPOINT_DELAY',
        '',
        TO_VARCHAR(TO_DECIMAL(MAX(SECONDS_BETWEEN(R.SHIPPED_SAVEPOINT_START_TIME, CURRENT_TIMESTAMP) / 3600), 10, 2))
      FROM
        M_SERVICE_REPLICATION R,
      ( SELECT
          MAX(IFNULL(SYSTEM_VALUE, IFNULL(HOST_VALUE, IFNULL(DEFAULT_VALUE, KEY)))) MODE
        FROM
        ( SELECT
            KEY,
            MAX(MAP(LAYER_NAME, 'DEFAULT', VALUE)) DEFAULT_VALUE,
            MAX(MAP(LAYER_NAME, 'HOST',    VALUE)) HOST_VALUE,
            MAX(MAP(LAYER_NAME, 'SYSTEM',  VALUE)) SYSTEM_VALUE
          FROM
            M_INIFILE_CONTENTS 
          WHERE 
            FILE_NAME = 'global.ini' AND
            SECTION = 'system_replication' AND
            KEY = 'operation_mode'
          GROUP BY
            KEY
        )
      ) P
      WHERE
        P.MODE = 'delta_datashipping'
    )
    UNION ALL
    ( SELECT
        'HOST_NAME_RESOLUTION',
        '',
        TO_CHAR(COUNT(*))
      FROM
        M_INIFILE_CONTENTS
      WHERE
        SECTION = 'internal_hostname_resolution' AND
        KEY NOT LIKE '%.%.%.%' AND
        KEY != ''
    )
    UNION ALL
    ( SELECT
        'INVERTED_HASH_ON_BW_TABLE',
        '',
        TO_VARCHAR(COUNT(DISTINCT(TABLE_NAME)))
      FROM
        INDEXES
      WHERE
        INDEX_TYPE = 'INVERTED HASH' AND
        TABLE_NAME LIKE '/B%/%'
    )
    UNION ALL
    ( SELECT
        'INVERTED_HASH_ON_PART_TABLE',
        '',
        TO_VARCHAR(COUNT(DISTINCT(I.TABLE_NAME)))
      FROM
        INDEXES I,
        TABLES T
      WHERE
        I.SCHEMA_NAME = T.SCHEMA_NAME AND
        I.TABLE_NAME = T.TABLE_NAME AND
        I.INDEX_TYPE = 'INVERTED HASH' AND
        TO_VARCHAR(T.PARTITION_SPEC) != CHAR(63)
    )
    UNION ALL
    ( SELECT
        'LAST_CTC_RUN',
        '',
        IFNULL(TO_VARCHAR(TO_DECIMAL(MAX(SECONDS) / 86400, 10, 2)), 'never')
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          SECONDS_BETWEEN(LATEST_START_SERVERTIME, CURRENT_TIMESTAMP) SECONDS
        FROM
          _SYS_STATISTICS.STATISTICS_SCHEDULE
        WHERE
          ID = 5047
        UNION ALL
        SELECT
          SECONDS_BETWEEN(MAX(SERVER_TIMESTAMP), CURRENT_TIMESTAMP) SECONDS
        FROM
          _SYS_STATISTICS.HOST_SERVICE_THREAD_SAMPLES
        WHERE
          UPPER(THREAD_DETAIL) LIKE '%CALL%CHECK_TABLE_CONSISTENCY%' || CHAR(39) || 'CHECK' || CHAR(39) || '%NULL%NULL%' OR
          ( APPLICATION_SOURCE LIKE 'CL_SQL_STATEMENT==============CP%' AND THREAD_DETAIL = 'CALL "CHECK_TABLE_CONSISTENCY"(' || CHAR(32) || CHAR(32) || CHAR(63) || CHAR(32) || ',' || 
            CHAR(32) || CHAR(32) || CHAR(63) || CHAR(32) || ',' || CHAR(32) || CHAR(32) || CHAR(63) || CHAR(32) || CHAR(32) || ')' || CHAR(32) )
      ) ON
        1 = 1
    )
    UNION ALL
    ( SELECT
        'ADDRESS_SPACE_UTILIZATION',
        M.HOST,
        TO_VARCHAR(TO_DECIMAL(ROUND(M.SIZE_GB / L.LIMIT_GB * 100), 10, 0))
      FROM
      ( SELECT
          HOST,
          SUM(EXCLUSIVE_SIZE_IN_USE) / 1024 / 1024 / 1024 SIZE_GB
        FROM
          M_HEAP_MEMORY
        WHERE
          CATEGORY = 'AllocateOnlyAllocator-unlimited/FLA-UL<3145728,1>/MemoryMapLevel2Blocks'
        GROUP BY
          HOST
      ) M,
      ( SELECT
          HOST,
          CASE 
            WHEN OS_PPMS_NAME = 'LINUX_X86_64'                                      THEN 768
            WHEN OS_PPMS_NAME = 'LINUX_PPC64' AND OS_KERNEL_VERSION LIKE '%bigmem%' THEN 384
            ELSE                                                                         96
          END LIMIT_GB
        FROM
        ( SELECT
            HOST,
            MAX(MAP(KEY, 'os_name', VALUE)) OS_NAME,
            MAX(MAP(KEY, 'os_ppms_name', VALUE)) OS_PPMS_NAME,
            MAX(MAP(KEY, 'os_kernel_version', VALUE)) OS_KERNEL_VERSION
          FROM
            M_HOST_INFORMATION
          GROUP BY
            HOST
        )
      ) L
      WHERE
        M.HOST = L.HOST
    )
    UNION ALL
    ( SELECT
        'METADATA_DEP_INCONSISTENT',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        OBJECT_DEPENDENCIES D
      WHERE
        NOT EXISTS
        ( SELECT
            *
          FROM
            OBJECTS O
          WHERE
            O.SCHEMA_NAME = D.BASE_SCHEMA_NAME AND
            O.OBJECT_NAME = D.BASE_OBJECT_NAME AND
            O.OBJECT_TYPE = D.BASE_OBJECT_TYPE 
        ) OR
        NOT EXISTS
        ( SELECT
            *
          FROM
            OBJECTS O
          WHERE
            O.SCHEMA_NAME = D.DEPENDENT_SCHEMA_NAME AND
            O.OBJECT_NAME = D.DEPENDENT_OBJECT_NAME AND
            O.OBJECT_TYPE = D.DEPENDENT_OBJECT_TYPE
        )
    )
    UNION ALL
    ( SELECT
        'LAST_HDBCONS_EXECUTION',
        '',
        IFNULL(TO_VARCHAR(TO_DECIMAL(ROUND(SECONDS_BETWEEN(MAX(TIMESTAMP), CURRENT_TIMESTAMP) / 3600), 10, 0)), 'never')
      FROM
      ( SELECT
          MAX(TIMESTAMP) TIMESTAMP
        FROM
          M_SERVICE_THREAD_SAMPLES
        WHERE
          THREAD_METHOD IN ('core/ngdb_console', 'ngdb_console', 'ServerJob')
        UNION ALL
        SELECT
          MAX(TIMESTAMP) TIMESTAMP
        FROM
          _SYS_STATISTICS.HOST_SERVICE_THREAD_SAMPLES
        WHERE
          THREAD_METHOD IN ('core/ngdb_console', 'ngdb_console', 'ServerJob')
      )
    )
    UNION ALL
    ( SELECT
        'CONNECTION_USER_EXPIRATION',
        '',
        IFNULL(U.USER_NAME, 'none')
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          U.USER_NAME
        FROM
          USERS U,
        ( SELECT
            USER_NAME
          FROM
            M_CONNECTIONS
          WHERE
            CONNECTION_ID > 0
          GROUP BY
            USER_NAME
          HAVING
            COUNT(*) >= 20
        ) C
        WHERE
          U.USER_NAME = C.USER_NAME AND
          U.USER_NAME != 'SYSTEM' AND
          ( U.VALID_UNTIL IS NOT NULL OR
            U.PASSWORD_CHANGE_TIME IS NOT NULL )
      ) U ON
        1 = 1
    )
    UNION ALL
    ( SELECT
        'LAST_TRACEFILE_MODIFICATION',
        T.HOST,
        TO_VARCHAR(GREATEST(0, SECONDS_BETWEEN(MAX(FILE_MTIME), CURRENT_TIMESTAMP)))
      FROM
        M_TRACEFILES T,
        M_SERVICES S
      WHERE
        T.HOST = S.HOST AND
        FILE_NAME LIKE '%.trc' AND
        S.COORDINATOR_TYPE != 'STANDBY' AND
        S.SERVICE_NAME IN ('nameserver', 'indexserver')
      GROUP BY
        T.HOST
    )
    UNION ALL
    ( SELECT
        'SUSPENDED_SQL',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_ACTIVE_STATEMENTS
      WHERE
        STATEMENT_STATUS = 'SUSPENDED'
    )
    UNION ALL
    ( SELECT
        'SNAP_GROWTH_LAST_DAY',
        '',
        MAP(TH.DISK_SIZE, NULL, 'n/a', TO_VARCHAR(TO_DECIMAL(GREATEST(0, (TC.DISK_SIZE - TH.DISK_SIZE) / 1024 / 1024 / 1024), 10, 2)))
      FROM
        DUMMY D LEFT OUTER JOIN
      ( SELECT
          MAX(DISK_SIZE) DISK_SIZE
        FROM
          M_TABLE_PERSISTENCE_STATISTICS TC
        WHERE
          TABLE_NAME = 'SNAP'
      ) TC ON
        1 = 1 LEFT OUTER JOIN
      ( SELECT TOP 1
          MAX(TA.DISK_SIZE) DISK_SIZE
        FROM
          _SYS_STATISTICS.GLOBAL_TABLE_PERSISTENCE_STATISTICS TA,
        ( SELECT
            MAX(SERVER_TIMESTAMP) SERVER_TIMESTAMP
          FROM
            _SYS_STATISTICS.GLOBAL_TABLE_PERSISTENCE_STATISTICS
          WHERE
            TABLE_NAME = 'SNAP' AND
            SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) > 88000
        ) TI
        WHERE
          TA.TABLE_NAME = 'SNAP' AND
          TA.SERVER_TIMESTAMP = TI.SERVER_TIMESTAMP
      ) TH ON
        1 = 1
    )
    UNION ALL
    ( SELECT
        'CUR_HIGH_DURATION_THREADS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_SERVICE_THREADS
      WHERE
        IS_ACTIVE = 'TRUE' AND
        THREAD_TYPE = 'SqlExecutor' AND
        DURATION / 1000 > 60
    )
    UNION ALL
    ( SELECT
        'CUR_APP_USER_THREADS',
        '',
        IFNULL(T.APPLICATION_USER_NAME || CHAR(32) || '(' || T.NUM_THREADS || CHAR(32) || 'threads)', 'none')
      FROM
        DUMMY D LEFT OUTER JOIN
      ( SELECT
          APPLICATION_USER_NAME,
          COUNT(*) NUM_THREADS
        FROM
          M_SERVICE_THREADS
        WHERE
          IS_ACTIVE = 'TRUE' AND
          CONNECTION_ID != CURRENT_CONNECTION AND
          APPLICATION_USER_NAME != ''
        GROUP BY
          APPLICATION_USER_NAME
        HAVING
          COUNT(*) > 30
      ) T ON
        1 = 1
    )
    UNION ALL
    ( SELECT
        'REC_POPULAR_THREAD_METHODS',
        '',
        IFNULL(T.THREAD_METHOD || CHAR(32) || '(' || TO_DECIMAL(T.ACTIVE_THREADS, 10, 2) || CHAR(32) || 'threads)', 'none')
      FROM
        DUMMY D LEFT OUTER JOIN
      ( SELECT
          THREAD_METHOD,
          COUNT(*) / 3600 ACTIVE_THREADS
        FROM
          M_SERVICE_THREAD_SAMPLES
        WHERE
          SECONDS_BETWEEN(TIMESTAMP, CURRENT_TIMESTAMP) <= 3600 AND
          THREAD_METHOD NOT IN ('ExecutePrepared', 'PlanExecutor calc', CHAR(63))
        GROUP BY
          THREAD_METHOD
        HAVING
          COUNT(*) > 3600 * 3
      ) T ON
        1 = 1
    )
    UNION ALL
    ( SELECT
        'CURRENT_UTID',
        '',
        TO_VARCHAR(MAX(NEXT_WRITE_TRANSACTION_ID))
      FROM
        M_MVCC_OVERVIEW
    )
/* Available as of Revision 60 */
    UNION ALL
    ( SELECT
        'SDA_TABLES_WITHOUT_STATS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        VIRTUAL_TABLES T
      WHERE
        NOT EXISTS ( SELECT 1 FROM STATISTICS S WHERE S.SCHEMA_NAME = T.SCHEMA_NAME AND S.TABLE_NAME = T.TABLE_NAME )
    )
    UNION ALL
    ( SELECT
        'LONGEST_CURRENT_SQL',
        '',
        TO_VARCHAR(MAX(TO_DECIMAL(SECONDS_BETWEEN(LAST_EXECUTED_TIME, CURRENT_TIMESTAMP) / 3600, 10, 2)))
      FROM
        M_ACTIVE_STATEMENTS
      WHERE
        LAST_EXECUTED_TIME IS NOT NULL
    )
    UNION ALL
    ( SELECT 
        'TRIGGER_READ_RATIO',
        HOST,
        IFNULL(TO_VARCHAR(TO_DECIMAL(MAX(TRIGGER_READ_RATIO), 5, 2)), '999999')
      FROM
        DUMMY LEFT OUTER JOIN
        M_VOLUME_IO_TOTAL_STATISTICS
      ON
        TYPE = 'DATA' AND
        TOTAL_READ_SIZE > 1024 * 1024 * 1024
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT 
        'TRIGGER_WRITE_RATIO',
        HOST,
        IFNULL(TO_VARCHAR(TO_DECIMAL(MAX(TRIGGER_WRITE_RATIO), 5, 2)), '999999')
      FROM
        DUMMY LEFT OUTER JOIN
        M_VOLUME_IO_TOTAL_STATISTICS
      ON
        TYPE IN ( 'DATA', 'LOG' ) AND
        TOTAL_WRITE_SIZE > 1024 * 1024 * 1024
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        C.NAME,
        I.HOST,
        CASE
          WHEN C.NAME = 'FAILED_IO_READS' THEN TO_VARCHAR(SUM(TOTAL_FAILED_READS))
          WHEN C.NAME = 'FAILED_IO_WRITES' THEN TO_VARCHAR(SUM(TOTAL_FAILED_WRITES))
        END
      FROM
      ( SELECT 'FAILED_IO_READS' NAME FROM DUMMY UNION ALL
        SELECT 'FAILED_IO_WRITES' FROM DUMMY 
      ) C,
        M_VOLUME_IO_TOTAL_STATISTICS_RESET I
      GROUP BY
        C.NAME,
        I.HOST
    )
    UNION ALL
    ( SELECT
        C.NAME || '_' || I.TYPE,
        I.HOST,
        CASE
          WHEN C.NAME = 'MIN_IO_READ_THROUGHPUT'  THEN TO_VARCHAR(ROUND(MIN(CASE WHEN I.TOTAL_READ_SIZE / 1000000000 < 3 AND I.TOTAL_READ_TIME < 60000000 THEN 999999 ELSE I.TOTAL_READ_SIZE / I.TOTAL_READ_TIME END )))
          WHEN C.NAME = 'AVG_IO_READ_THROUGHPUT'  THEN TO_VARCHAR(ROUND(CASE WHEN SUM(I.TOTAL_READ_SIZE) / 1000000000 < 10 AND SUM(I.TOTAL_READ_TIME) < 200000000 THEN 999999 ELSE SUM(I.TOTAL_READ_SIZE) / SUM(I.TOTAL_READ_TIME) END ))
          WHEN C.NAME = 'MIN_IO_WRITE_THROUGHPUT' THEN TO_VARCHAR(ROUND(MIN(CASE WHEN I.TOTAL_WRITE_SIZE / 1000000000 < 3 AND I.TOTAL_WRITE_TIME < 60000000 THEN 999999 ELSE I.TOTAL_WRITE_SIZE / I.TOTAL_WRITE_TIME END )))
          WHEN C.NAME = 'AVG_IO_WRITE_THROUGHPUT' THEN TO_VARCHAR(ROUND(CASE WHEN SUM(I.TOTAL_WRITE_SIZE) / 1000000000 < 10 AND SUM(I.TOTAL_WRITE_TIME) < 200000000 THEN 999999 ELSE SUM(I.TOTAL_WRITE_SIZE) / SUM(I.TOTAL_WRITE_TIME) END ))
          WHEN C.NAME = 'MAX_IO_READ_LATENCY'     THEN TO_VARCHAR(MAX(CASE WHEN I.TOTAL_READ_TIME < 60000000 THEN -999999 ELSE TO_DECIMAL(I.TOTAL_READ_TIME / I.TOTAL_READS / 1000, 10, 2) END))
          WHEN C.NAME = 'AVG_IO_READ_LATENCY'     THEN TO_VARCHAR(CASE WHEN SUM(I.TOTAL_READ_TIME) < 200000000 THEN 999999 ELSE TO_DECIMAL(SUM(I.TOTAL_READ_TIME) / SUM(I.TOTAL_READS) / 1000, 10, 2) END)
          WHEN C.NAME = 'MAX_IO_WRITE_LATENCY'    THEN TO_VARCHAR(MAX(CASE WHEN I.TOTAL_WRITE_TIME < 60000000 THEN -999999 ELSE TO_DECIMAL(I.TOTAL_WRITE_TIME / I.TOTAL_WRITES / 1000, 10, 2) END))
          WHEN C.NAME = 'AVG_IO_WRITE_LATENCY'    THEN TO_VARCHAR(CASE WHEN SUM(I.TOTAL_WRITE_TIME) < 200000000 THEN 999999 ELSE TO_DECIMAL(SUM(I.TOTAL_WRITE_TIME) / SUM(I.TOTAL_WRITES) / 1000, 10, 2) END)
        END VALUE
      FROM
      ( SELECT 'MIN_IO_READ_THROUGHPUT' NAME FROM DUMMY UNION ALL
        SELECT 'AVG_IO_READ_THROUGHPUT' FROM DUMMY UNION ALL
        SELECT 'MAX_IO_READ_LATENCY' FROM DUMMY UNION ALL
        SELECT 'AVG_IO_READ_LATENCY' FROM DUMMY UNION ALL
        SELECT 'MIN_IO_WRITE_THROUGHPUT' FROM DUMMY UNION ALL
        SELECT 'AVG_IO_WRITE_THROUGHPUT' FROM DUMMY UNION ALL
        SELECT 'MAX_IO_WRITE_LATENCY' FROM DUMMY UNION ALL
        SELECT 'AVG_IO_WRITE_LATENCY' FROM DUMMY
      ) C,
      ( SELECT
          HOST,
          TYPE,
          SUM(TOTAL_READS) TOTAL_READS,
          SUM(TOTAL_READ_SIZE) TOTAL_READ_SIZE,
          SUM(TOTAL_READ_TIME) TOTAL_READ_TIME,
          SUM(TOTAL_WRITES) TOTAL_WRITES,
          SUM(TOTAL_WRITE_SIZE) TOTAL_WRITE_SIZE,
          SUM(TOTAL_WRITE_TIME) TOTAL_WRITE_TIME
        FROM
        ( SELECT
            HOST,
            TYPE,
            SERVER_TIMESTAMP,
            TOTAL_READS + TOTAL_TRIGGER_ASYNC_READS - LEAD(TOTAL_READS + TOTAL_TRIGGER_ASYNC_READS, 1) OVER (PARTITION BY HOST, PORT, TYPE, PATH ORDER BY SERVER_TIMESTAMP DESC) + 0.01 TOTAL_READS,
            TOTAL_READ_SIZE - LEAD(TOTAL_READ_SIZE, 1) OVER (PARTITION BY HOST, PORT, TYPE, PATH ORDER BY SERVER_TIMESTAMP DESC) + 0.01 TOTAL_READ_SIZE,
            TOTAL_READ_TIME - LEAD(TOTAL_READ_TIME, 1) OVER (PARTITION BY HOST, PORT, TYPE, PATH ORDER BY SERVER_TIMESTAMP DESC) + 0.01 TOTAL_READ_TIME,
            TOTAL_WRITES + TOTAL_TRIGGER_ASYNC_WRITES - LEAD(TOTAL_WRITES + TOTAL_TRIGGER_ASYNC_WRITES, 1) OVER (PARTITION BY HOST, PORT, TYPE, PATH ORDER BY SERVER_TIMESTAMP DESC) + 0.01 TOTAL_WRITES,
            TOTAL_WRITE_SIZE - LEAD(TOTAL_WRITE_SIZE, 1) OVER (PARTITION BY HOST, PORT, TYPE, PATH ORDER BY SERVER_TIMESTAMP DESC) + 0.01 TOTAL_WRITE_SIZE,
            TOTAL_WRITE_TIME - LEAD(TOTAL_WRITE_TIME, 1) OVER (PARTITION BY HOST, PORT, TYPE, PATH ORDER BY SERVER_TIMESTAMP DESC) + 0.01 TOTAL_WRITE_TIME
          FROM
            _SYS_STATISTICS.HOST_VOLUME_IO_TOTAL_STATISTICS
          WHERE
            SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) <= 86400 AND
            TYPE IN ('LOG', 'DATA')
        )
        WHERE
          TOTAL_READS >= 0 AND
          TOTAL_READS >= 0 AND
          TOTAL_WRITES >= 0 AND
          TOTAL_READ_SIZE >= 0 AND
          TOTAL_READ_TIME >= 0 AND
          TOTAL_WRITE_SIZE >= 0 AND
          TOTAL_WRITE_TIME >= 0
        GROUP BY
          HOST,
          TYPE,
          TO_VARCHAR(SERVER_TIMESTAMP, 'YYYY/MM/DD HH24')
      ) I
      GROUP BY
        C.NAME,
        I.HOST,
        I.TYPE
    )
    UNION ALL
    ( SELECT
        'CURR_ALLOCATION_LIMIT_USED',
        HOST,
        TO_VARCHAR(ROUND(MAP(ALLOCATION_LIMIT, 0, 0, INSTANCE_TOTAL_MEMORY_USED_SIZE / ALLOCATION_LIMIT * 100)))
      FROM
        M_HOST_RESOURCE_UTILIZATION
    )
    UNION ALL
    ( SELECT
        'HIST_ALLOCATION_LIMIT_USED',
        IFNULL(HOST, ''),
        IFNULL(TO_VARCHAR(HOURS), '999999')
      FROM
        DUMMY BI LEFT OUTER JOIN
      ( SELECT
          HOST,
          ROUND(MIN(SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP)) / 3600) HOURS
        FROM
          _SYS_STATISTICS.HOST_RESOURCE_UTILIZATION_STATISTICS
        WHERE
          INSTANCE_TOTAL_MEMORY_USED_SIZE > ALLOCATION_LIMIT * 0.8
        GROUP BY
          HOST
      ) R ON
        1 = 1
    )
    UNION ALL
    ( SELECT
        'DDLOG_SEQUENCE_CACHING',
        '',
        TO_VARCHAR(MIN(CACHE_SIZE))
      FROM
        SEQUENCES
      WHERE
        SEQUENCE_NAME = 'DDLOG_SEQ'
    )
    UNION ALL
    ( SELECT
        'LONG_LOCK_WAITS',
        '',
        TO_VARCHAR(COUNT(DISTINCT(BLOCKED_TIME||BLOCKED_CONNECTION_ID)))
      FROM
        DUMMY LEFT OUTER JOIN
        _SYS_STATISTICS.HOST_BLOCKED_TRANSACTIONS ON
          1 = 1
      WHERE
        SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) <= 86400 AND
        SECONDS_BETWEEN(BLOCKED_TIME, SERVER_TIMESTAMP) > 600
    )
    UNION ALL
    ( SELECT
        'LOCKED_THREADS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_SERVICE_THREADS T
      WHERE
        T.THREAD_STATE IN 
        ( 'BarrierSemaphore Wait', 'Barrier Wait', 'ConditionalVariable Wait', 'ExclusiveLock Enter', 'IntentLock Enter', 'Mutex Wait', 
          'Semaphore Wait', 'SharedLock Enter', 'Speculative Lock Retry backoff', 'Speculative Lock Wait for fallback' ) AND
        ( T.CALLING IS NULL OR T.CALLING = '' ) AND
        T.CONNECTION_ID != CURRENT_CONNECTION AND NOT
        ( T.THREAD_TYPE = 'AgentPingThread'                 AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_WAIT_NAME = 'DPPeriodicThreadWaitSemaphore'                     OR
          T.THREAD_TYPE = 'BackupMonitor_TransferThread'    AND T.THREAD_STATE = 'Sleeping'                                                                                            OR
          T.THREAD_TYPE = 'Generic'                         AND T.THREAD_STATE = 'Running'                                                                                             OR
          T.THREAD_TYPE = 'PostCommitExecutor'              AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'RegularTaskQueueCV'                                OR
          T.THREAD_TYPE = 'PriPostCommitExecutor'           AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'PrioritizedTaskQueueCV'                            OR
          T.THREAD_TYPE = 'StatsThread'                     AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'DPStatsThreadCond'                                 OR
          T.THREAD_TYPE = 'SystemReplicationAsyncLogSender' AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_WAIT_NAME = 'system replication: AsyncLogBufferHandlerQueueSem'
        )
    )
    UNION ALL
    ( SELECT
        'TOP_SQL_SQLCACHE',
        '',
        IFNULL(STATEMENT_HASH || ' (' || TO_DECIMAL(TOTAL_EXECUTION_TIME / 1000000 / 86400, 10, 2) || ' connections)', 'none')
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          STATEMENT_HASH,
          SUM(TOTAL_EXECUTION_TIME) TOTAL_EXECUTION_TIME
        FROM
          _SYS_STATISTICS.HOST_SQL_PLAN_CACHE 
        WHERE
          SECONDS_BETWEEN(SERVER_TIMESTAMP, CURRENT_TIMESTAMP) <= 88200
        GROUP BY
          STATEMENT_HASH
        HAVING
          SUM(TOTAL_EXECUTION_TIME) / 1000000 > 86400
      ) ON
        1 = 1
      ORDER BY
        TOTAL_EXECUTION_TIME DESC
    ) 
    UNION ALL
    ( SELECT
        'HIGH_SELFWATCHDOG_ACTIVITY',
        HOST,
        TO_VARCHAR(TO_DECIMAL(COUNT(*) / 3600 * 100, 10, 2))
      FROM
        DUMMY LEFT OUTER JOIN
        M_SERVICE_THREAD_SAMPLES ON 
          SECONDS_BETWEEN(TIMESTAMP, CURRENT_TIMESTAMP) <= 3600 AND
          THREAD_TYPE = 'SelfWatchDog'
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'TOP_SQL_THREADSAMPLES_CURR',
        '',
        IFNULL(STATEMENT_HASH || ' (' || TO_DECIMAL(ELAPSED_S / 3600, 10, 2) || ' threads)', 'none')
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          STATEMENT_HASH,
          COUNT(*) ELAPSED_S
        FROM
          M_SERVICE_THREAD_SAMPLES 
        WHERE
          SECONDS_BETWEEN(TIMESTAMP, CURRENT_TIMESTAMP) <= 3600 AND
          STATEMENT_HASH != CHAR(63)
        GROUP BY
          STATEMENT_HASH
        HAVING
          COUNT(*) > 3600
      ) ON
        1 = 1
      ORDER BY
        ELAPSED_S DESC
    )
    UNION ALL
    ( SELECT
        'INTERNAL_LOCKS_LAST_HOUR',
        '',
        IFNULL(LOCK_WAIT_NAME || ' (' || TO_DECIMAL(ELAPSED_S / 3600, 10, 2) || ' threads)', 'none')
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          LOCK_WAIT_NAME,
          COUNT(*) ELAPSED_S
        FROM
          M_SERVICE_THREAD_SAMPLES T
        WHERE
          SECONDS_BETWEEN(TIMESTAMP, CURRENT_TIMESTAMP) <= 3600 AND
          THREAD_STATE != 'Job Exec Waiting' AND
          LOCK_WAIT_NAME NOT IN ('', CHAR(63), 'capacityReached', 'ChannelUtilsSynchronousCopyHandler', 'CSPlanExecutorLock', 'CSPlanExecutorWaitForResult', 
            'JoinEvaluator_JEPlanData_Lock', 'RecordLockWaitCondStat', 'SaveMergedAttributeJobSemaphore', 'TableLockWaitCondStat', 'TransactionLockWaitCondStat') AND
          LOCK_WAIT_NAME NOT LIKE '%TRexAPI::Mergedog::checkAutomerge%' AND NOT
        ( T.THREAD_TYPE = 'AgentPingThread'                 AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_WAIT_NAME = 'DPPeriodicThreadWaitSemaphore'                     OR
          T.THREAD_TYPE = 'BackupMonitor_TransferThread'    AND T.THREAD_STATE = 'Sleeping'                                                                                            OR
          T.THREAD_TYPE = 'PostCommitExecutor'              AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'RegularTaskQueueCV'                                OR
          T.THREAD_TYPE = 'PriPostCommitExecutor'           AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'PrioritizedTaskQueueCV'                            OR
          T.THREAD_TYPE = 'StatsThread'                     AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'DPStatsThreadCond'                                 OR
          T.THREAD_TYPE = 'SystemReplicationAsyncLogSender' AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_WAIT_NAME = 'system replication: AsyncLogBufferHandlerQueueSem'
        )
        GROUP BY
          LOCK_WAIT_NAME
        HAVING
          COUNT(*) > 3600
       ) ON
         1 = 1
    )
    UNION ALL
    ( SELECT
        'MAX_LOG_BACKUP_DURATION',
        '',
        TO_VARCHAR(MAX(SECONDS_BETWEEN(SYS_START_TIME, SYS_END_TIME)))
      FROM
        M_BACKUP_CATALOG
      WHERE
        ENTRY_TYPE_NAME = 'log backup' AND
        SECONDS_BETWEEN(SYS_START_TIME, CURRENT_TIMESTAMP) <= 86400
    )
    UNION ALL
    ( SELECT
        'CATALOG_BACKUP_SIZE_SHARE',
        '',
        TO_VARCHAR(TO_DECIMAL(MAP(TOTAL_SIZE, 0, 0, CATALOG_SIZE / TOTAL_SIZE * 100), 10, 2))
      FROM
      ( SELECT
          SUM(CF.BACKUP_SIZE) TOTAL_SIZE,
          SUM(CASE WHEN CF.SOURCE_TYPE_NAME = 'catalog' THEN CF.BACKUP_SIZE ELSE 0 END) CATALOG_SIZE
        FROM
          M_BACKUP_CATALOG C,
          M_BACKUP_CATALOG_FILES CF
        WHERE
          C.BACKUP_ID = CF.BACKUP_ID AND
          SECONDS_BETWEEN(C.SYS_END_TIME, CURRENT_TIMESTAMP) <= 86400
      )
    )
/* Available as of Revision 70 */
    UNION ALL
    ( SELECT
        'AVG_COMMIT_IO_TIME',
        HOST,
        TO_VARCHAR(TO_DECIMAL(MAP(SUM(COMMIT_COUNT), 0, 0, SUM(SUM_COMMIT_IO_LATENCY) / SUM(COMMIT_COUNT) / 1000), 10, 2))
      FROM
        M_LOG_PARTITIONS
      GROUP BY
        HOST
    )
    UNION ALL
    ( SELECT
        'LARGE_MEMORY_LOBS',
        '',
        TO_VARCHAR(COUNT(DISTINCT(T.SCHEMA_NAME || T.TABLE_NAME)))
      FROM
        M_TABLES T,
        TABLE_COLUMNS C
      WHERE
        T.SCHEMA_NAME = C.SCHEMA_NAME AND
        T.TABLE_NAME = C.TABLE_NAME AND
        C.CS_DATA_TYPE_NAME = 'ST_MEMORY_LOB' AND
        T.TABLE_NAME != 'CE_SCENARIOS_' AND
        T.TABLE_SIZE / 1024 / 1024 / 1024 >= 2
    )
    UNION ALL
    ( SELECT
        C.NAME,
        '',
        IFNULL(CASE C.NAME
          WHEN 'CONCAT_ATTRIBUTES_SIZE'  THEN TO_VARCHAR(TO_DECIMAL(SUM(IFNULL(AC.SIZE_GB, 0)), 10, 2))
          WHEN 'CONCAT_ATTRIBUTES_PCT'   THEN TO_VARCHAR(TO_DECIMAL(MAP(AVG(H.GAL_GB), 0, 0, SUM(IFNULL(AC.SIZE_GB, 0)) / AVG(H.GAL_GB) * 100), 10, 2))
        END, '0')
      FROM
      ( SELECT
          SUM(ALLOCATION_LIMIT) / 1024 / 1024 / 1024 GAL_GB
        FROM
          M_HOST_RESOURCE_UTILIZATION
      ) H,
      ( SELECT 'CONCAT_ATTRIBUTES_SIZE' NAME FROM DUMMY UNION ALL
        SELECT 'CONCAT_ATTRIBUTES_PCT'       FROM DUMMY
      ) C LEFT OUTER JOIN
      ( SELECT
          C.TABLE_NAME,
          C.COLUMN_NAME,
          TC.CS_DATA_TYPE_NAME DATA_TYPE,
          C.INTERNAL_ATTRIBUTE_TYPE,
          C.MEMORY_SIZE_IN_TOTAL / 1024 / 1024 / 1024 SIZE_GB
        FROM
          M_CS_ALL_COLUMNS C LEFT OUTER JOIN
          TABLE_COLUMNS TC ON
            TC.SCHEMA_NAME = C.SCHEMA_NAME AND
            TC.TABLE_NAME = C.TABLE_NAME AND
            TC.COLUMN_NAME = C.COLUMN_NAME
      ) AC ON
        ( C.NAME LIKE 'CONCAT_ATTRIBUTES%' AND AC.INTERNAL_ATTRIBUTE_TYPE = 'CONCAT_ATTRIBUTE' AND AC.COLUMN_NAME NOT LIKE '$uc%' OR
          C.NAME = 'TREX_UDIV_FRAGMENTATION' AND AC.COLUMN_NAME = '$trex_udiv$' )
      GROUP BY
        C.NAME
    )
    UNION ALL
    ( SELECT
        'LOCKED_THREADS_LAST_DAY',
        '',
        TO_VARCHAR(CEILING(MAX(SAMPLES_PER_MINUTE) / 60))
      FROM
      ( SELECT
          COUNT(*) SAMPLES_PER_MINUTE
        FROM
          M_SERVICE_THREAD_SAMPLES T
        WHERE
          T.THREAD_STATE IN 
          ( 'BarrierSemaphore Wait', 'Barrier Wait', 'ConditionalVariable Wait', 'ExclusiveLock Enter', 'IntentLock Enter', 'Mutex Wait', 
            'Semaphore Wait', 'SharedLock Enter', 'Speculative Lock Retry backoff', 'Speculative Lock Wait for fallback' ) AND
          T.TIMESTAMP BETWEEN ADD_SECONDS(CURRENT_TIMESTAMP, -86400) AND CURRENT_TIMESTAMP AND
          ( T.CALLING IS NULL OR T.CALLING = '' ) AND NOT
          ( T.THREAD_TYPE = 'AgentPingThread'                 AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_WAIT_NAME = 'DPPeriodicThreadWaitSemaphore'                     OR
            T.THREAD_TYPE = 'BackupMonitor_TransferThread'    AND T.THREAD_STATE = 'Sleeping'                                                                                       OR
            T.THREAD_TYPE = 'PostCommitExecutor'              AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'RegularTaskQueueCV'                                OR
            T.THREAD_TYPE = 'PriPostCommitExecutor'           AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'PrioritizedTaskQueueCV'                            OR
            T.THREAD_TYPE = 'StatsThread'                     AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'DPStatsThreadCond'                                 OR
            T.THREAD_TYPE = 'SystemReplicationAsyncLogSender' AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_WAIT_NAME = 'system replication: AsyncLogBufferHandlerQueueSem'
        )
        GROUP BY
          TO_VARCHAR(TIMESTAMP, 'YYYY/MM/DD HH24:MI')
      )
    ) 
    UNION ALL
    ( SELECT
        'SQL_CACHE_HIT_RATIO',
        HOST,
        TO_VARCHAR(TO_DECIMAL(PLAN_CACHE_HIT_RATIO * 100, 10, 2))
      FROM
        M_SQL_PLAN_CACHE_OVERVIEW
      WHERE
        CACHED_PLAN_SIZE > 100000000
    )
    UNION ALL
    ( SELECT
        'KERNEL_PROFILER',
        '',
        MAP(COUNT(*), 0, 'no', 'yes')
      FROM
        M_KERNEL_PROFILER
    )
/* Available as of Revision 90 */
    UNION ALL
    ( SELECT
        'LARGE_CS_MVCC_TIMESTAMPS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
      ( SELECT
          SUM( CTS_MEMORY_SIZE + DTS_MEMORY_SIZE ) / 1024 / 1024 / 1024 TS_SIZE_GB
        FROM
          M_CS_MVCC
        GROUP BY
          SCHEMA_NAME,
          TABLE_NAME
      )
      WHERE
        TS_SIZE_GB > 5
    )
    UNION ALL
    ( SELECT
        'TABLE_MVCC_SNAPSHOT_RANGE',
        '',
        IFNULL(TO_VARCHAR(CUR_COMMIT_ID - MIN_TS_ID), '0')
      FROM
      ( SELECT
          (MIN(MIN_MVCC_SNAPSHOT_TIMESTAMP)) MIN_TS_ID
        FROM
          M_TABLE_SNAPSHOTS
      ),
      ( SELECT
          MAX(TO_NUMBER(VALUE)) CUR_COMMIT_ID
        FROM
          M_MVCC_TABLES
      )
    )
    UNION ALL
    ( SELECT
        C.NAME,
        L.HOST,
        CASE C.NAME
          WHEN 'PING_TIME_HOUR'        THEN TO_VARCHAR(TO_DECIMAL(GREATEST(0, AVG(PING_TIME)), 10, 2))
          WHEN 'CONC_BLOCK_TRANS_HOUR' THEN TO_VARCHAR(GREATEST(0, MAX(L.BLOCKED_TRANSACTION_COUNT)))
        END
      FROM
      ( SELECT 'PING_TIME_HOUR' NAME FROM DUMMY UNION ALL
        SELECT 'CONC_BLOCK_TRANS_HOUR' NAME FROM DUMMY
      ) C,
        M_LOAD_HISTORY_SERVICE L
      WHERE
        SECONDS_BETWEEN(L.TIME, CURRENT_TIMESTAMP) <= 3600
      GROUP BY
        C.NAME,
        L.HOST
    )
    UNION ALL
    ( SELECT
        C.NAME,
        L.HOST,
        CASE C.NAME
          WHEN 'PING_TIME_DAY'              THEN TO_VARCHAR(TO_DECIMAL(AVG(PING_TIME), 10, 2))
          WHEN 'CONC_BLOCK_TRANS_DAY'       THEN TO_VARCHAR(MAX(GREATEST(0, L.BLOCKED_TRANSACTION_COUNT)))
          WHEN 'VERSIONS_ROW_STORE_DAY'     THEN TO_VARCHAR(MAX(GREATEST(0, L.MVCC_VERSION_COUNT)))
          WHEN 'ACTIVE_UPDATE_TRANS_DAY'    THEN TO_VARCHAR(MAX(GREATEST(0, L.TRANSACTION_ID_RANGE)))
          WHEN 'ACTIVE_COMMIT_ID_RANGE_DAY' THEN TO_VARCHAR(MAX(GREATEST(0, L.COMMIT_ID_RANGE)))
          WHEN 'WRONG_SYSTEM_CPU'           THEN CASE WHEN SUM(CPU) < 10 THEN NULL ELSE MAP(SUM(CPU), SUM(SYSTEM_CPU), 'yes', 'no') END
        END
      FROM
      ( SELECT 'PING_TIME_DAY' NAME         FROM DUMMY UNION ALL
        SELECT 'CONC_BLOCK_TRANS_DAY'       FROM DUMMY UNION ALL
        SELECT 'VERSIONS_ROW_STORE_DAY'     FROM DUMMY UNION ALL
        SELECT 'ACTIVE_UPDATE_TRANS_DAY'    FROM DUMMY UNION ALL
        SELECT 'ACTIVE_COMMIT_ID_RANGE_DAY' FROM DUMMY UNION ALL
        SELECT 'WRONG_SYSTEM_CPU'           FROM DUMMY
      ) C,
        M_LOAD_HISTORY_SERVICE L
      WHERE
        SECONDS_BETWEEN(L.TIME, CURRENT_TIMESTAMP) <= 86400
      GROUP BY
        C.NAME,
        L.HOST
    )
    UNION ALL
    ( SELECT
        'PENDING_SESSIONS_CURRENT',
        '',
        TO_VARCHAR(GREATEST(0, SUM(PENDING_SESSION_COUNT)))
      FROM
        M_LOAD_HISTORY_SERVICE
      WHERE
        TIME = ( SELECT MAX(TIME) FROM M_LOAD_HISTORY_SERVICE )
    )
    UNION ALL
    ( SELECT
        'PENDING_SESSIONS_RECENT',
        '',
        TO_VARCHAR(TO_DECIMAL(GREATEST(0, AVG(PENDING_SESSION_COUNT)), 10, 2))
      FROM
      ( SELECT
          SUM(PENDING_SESSION_COUNT) PENDING_SESSION_COUNT
        FROM
          M_LOAD_HISTORY_SERVICE
        WHERE
          SECONDS_BETWEEN(TIME, CURRENT_TIMESTAMP) <= 86400
        GROUP BY
          TIME
      )
    )
/* Available with embedded statistics server (ESS) */
    UNION ALL
    ( SELECT
        'INTERNAL_LOCKS_LAST_DAY',
        '',
        IFNULL(LOCK_WAIT_NAME || ' (' || TO_DECIMAL(ELAPSED_S / 86400, 10, 2) || ' threads)', 'none')
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          LOCK_WAIT_NAME,
          COUNT(*) * 50 ELAPSED_S
        FROM
          _SYS_STATISTICS.HOST_SERVICE_THREAD_SAMPLES T
        WHERE
          SECONDS_BETWEEN(TIMESTAMP, CURRENT_TIMESTAMP) <= 88000 AND
          THREAD_STATE != 'Job Exec Waiting' AND
          LOCK_WAIT_NAME NOT IN ('', CHAR(63), 'capacityReached', 'ChannelUtilsSynchronousCopyHandler', 'CSPlanExecutorLock', 'CSPlanExecutorWaitForResult', 
            'JoinEvaluator_JEPlanData_Lock', 'RecordLockWaitCondStat', 'SaveMergedAttributeJobSemaphore', 'TableLockWaitCondStat', 'TransactionLockWaitCondStat') AND
          LOCK_WAIT_NAME NOT LIKE '%TRexAPI::Mergedog::checkAutomerge%' AND NOT
        ( T.THREAD_TYPE = 'AgentPingThread'                 AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_WAIT_NAME = 'DPPeriodicThreadWaitSemaphore'                     OR
          T.THREAD_TYPE = 'BackupMonitor_TransferThread'    AND T.THREAD_STATE = 'Sleeping'                                                                                            OR
          T.THREAD_TYPE = 'PostCommitExecutor'              AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'RegularTaskQueueCV'                                OR
          T.THREAD_TYPE = 'PriPostCommitExecutor'           AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'PrioritizedTaskQueueCV'                            OR
          T.THREAD_TYPE = 'StatsThread'                     AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_WAIT_NAME = 'DPStatsThreadCond'                                 OR
          T.THREAD_TYPE = 'SystemReplicationAsyncLogSender' AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_WAIT_NAME = 'system replication: AsyncLogBufferHandlerQueueSem'
        )
        GROUP BY
          LOCK_WAIT_NAME
        HAVING
          COUNT(*) > 1728
       ) ON
         1 = 1
    )
    UNION ALL
    ( SELECT
        'TOP_SQL_THREADSAMPLES_HIST',
        '',
        IFNULL(STATEMENT_HASH || ' (' || TO_DECIMAL(ELAPSED_S / 86400, 10, 2) || ' threads)', 'none')
      FROM
        DUMMY LEFT OUTER JOIN
      ( SELECT
          STATEMENT_HASH,
          COUNT(*) * 50 ELAPSED_S
        FROM
          _SYS_STATISTICS.HOST_SERVICE_THREAD_SAMPLES 
        WHERE
          SECONDS_BETWEEN(TIMESTAMP, CURRENT_TIMESTAMP) <= 88000 AND
          STATEMENT_HASH != CHAR(63)
        GROUP BY
          STATEMENT_HASH
        HAVING
          COUNT(*) > 1728
      ) ON
        1 = 1
      ORDER BY
        ELAPSED_S DESC
    ) 
    UNION ALL
    ( SELECT
        'OLD_PENDING_ALERT_EMAILS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.STATISTICS_EMAIL_PROCESSING 
      WHERE
        SECONDS_BETWEEN(SNAPSHOT_ID, CURRENT_TIMESTAMP) > 3 * 24 * 3600
    )
    UNION ALL
    ( SELECT
        'STAT_SERVER_DISABLED_CHECKS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.STATISTICS_SCHEDULE
      WHERE
       STATUS = 'Disabled'
    )
    UNION ALL
    ( SELECT
        'STAT_SERVER_UNKNOWN_STATES',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.STATISTICS_SCHEDULE
      WHERE
       STATUS NOT IN ( 'Disabled', 'Idle', 'Inactive', 'Scheduled' )
    )
    UNION ALL
    ( SELECT
        'STAT_SERVER_INACTIVE_CHECKS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        "_SYS_STATISTICS"."STATISTICS_SCHEDULE" 
      WHERE
       STATUS = 'Inactive' AND
       ID NOT IN (41, 58, 77, 83, 95, 96, 5008, 5024, 5025, 5033, 5035, 5047)
    )
    UNION ALL
    ( SELECT
        'STAT_SERVER_WRONG_HOST',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        M_TABLE_LOCATIONS
      WHERE
        SCHEMA_NAME = '_SYS_STATISTICS' AND
        LOCATION !=
        ( SELECT 
            HOST || ':' || PORT
          FROM
            M_SERVICES
          WHERE
            SERVICE_NAME = 'indexserver' AND
            DETAIL = 'master'
        )
    )
    UNION ALL
    ( SELECT
        'ESS_MIGRATION_SUCCESSFUL',
        '',
        LOWER(SUBSTR(VALUE, 1, LOCATE(VALUE, ')')))
      FROM
        DUMMY LEFT OUTER JOIN
        _SYS_STATISTICS.STATISTICS_PROPERTIES 
      ON
        KEY = 'internal.installation.state'
    )
    UNION ALL
    ( SELECT
        'STAT_SERVER_LAST_ACTIVE',
        '',
        TO_VARCHAR(SECONDS_BETWEEN(MAX(LATEST_START_SERVERTIME), CURRENT_TIMESTAMP))
      FROM
        _SYS_STATISTICS.STATISTICS_SCHEDULE
    )
    UNION ALL
    ( SELECT
        'STAT_SERVER_RETENTION',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.STATISTICS_SCHEDULE SS,
        _SYS_STATISTICS.STATISTICS_OBJECTS SO
      WHERE
        SS.ID = SO.ID AND
        SO.TYPE = 'Collector' AND
        SS.ID NOT IN ( 5008, 5024, 5025, 5026, 5033, 5035 ) AND
        SS.RETENTION_DAYS_CURRENT < 42
    )
    UNION ALL
    ( SELECT
        MAP(ID, 5033, 'HOST_RECORD_LOCKS_ACTIVE', 'HOST_CS_UNLOADS_ACTIVE'),
        '',
        MAP(STATUS, 'Inactive', 'no', 'yes')
      FROM
        _SYS_STATISTICS.STATISTICS_SCHEDULE
      WHERE
        ID IN ( 5033, 5035 )
    )
    UNION ALL
    ( SELECT
        'REP_CONNECTION_CLOSED',
        '',
        TO_VARCHAR(MAP(COUNT(*), 0, 'no', 'yes'))
      FROM
        _SYS_STATISTICS.STATISTICS_ALERTS_BASE
      WHERE
        SECONDS_BETWEEN(ALERT_TIMESTAMP, CURRENT_TIMESTAMP) <= 86400 AND
        ALERT_ID = 78
    )
    UNION ALL
    ( SELECT
        'STAT_SERVER_OLD_ALERTS',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.STATISTICS_ALERTS_BASE
      WHERE
        ALERT_TIMESTAMP < ADD_DAYS(CURRENT_TIMESTAMP, -42)
    )
    UNION ALL
    ( SELECT
        'STAT_SERVER_FREQUENT_ALERTS',
        '',
        TO_VARCHAR(SUM(CASE WHEN NUM_ALERTS > 1000000 THEN 1 ELSE 0 END ))
      FROM
      ( SELECT
          ALERT_ID,
          COUNT(*) NUM_ALERTS
        FROM
          DUMMY LEFT OUTER JOIN
          _SYS_STATISTICS.STATISTICS_ALERTS_BASE
        ON
          1 = 1
        GROUP BY
          ALERT_ID
      )
    )
/* Available as of Revision 100 */
    UNION ALL
    ( SELECT
        'CTC_ERRORS_LAST_MONTH',
        '',
        TO_VARCHAR(COUNT(*))
      FROM
        _SYS_STATISTICS.GLOBAL_TABLE_CONSISTENCY
      WHERE
        SERVER_TIMESTAMP >= ADD_DAYS(CURRENT_TIMESTAMP, -31) AND
        ERROR_CODE > 0
    )
    UNION ALL
    ( SELECT
        C.NAME,
        '',
        CASE C.NAME
          WHEN 'TCP_RETRANSMITTED_SEGMENTS' THEN
            TO_VARCHAR(MAX(TO_DECIMAL(MAP(N.TCP_SEGMENTS_SENT_OUT, 0, 0, N.TCP_SEGMENTS_RETRANSMITTED * 100 / N.TCP_SEGMENTS_SENT_OUT), 9, 5)))
          WHEN 'TCP_BAD_SEGMENTS' THEN
            TO_VARCHAR(MAX(TO_DECIMAL(MAP(N.TCP_SEGMENTS_RECEIVED, 0, 0, N.TCP_BAD_SEGMENTS_RECEIVED * 100 / N.TCP_SEGMENTS_RECEIVED), 9, 5)))
        END 
      FROM
      ( SELECT 'TCP_RETRANSMITTED_SEGMENTS' NAME FROM DUMMY UNION ALL
        SELECT 'TCP_BAD_SEGMENTS' FROM DUMMY
      ) C,
        M_HOST_NETWORK_STATISTICS N
      GROUP BY
        C.NAME
    )
/* Available as of Revision 102.01 */
    UNION ALL
    ( SELECT /* available as of Revision 102.01 */
        'AVG_COMMIT_TIME',
        HOST,
        MAP(SUM(COMMIT_COUNT), 0, 'n/a', TO_VARCHAR(TO_DECIMAL(SUM(COMMIT_TOTAL_EXECUTION_TIME) / 1000 / SUM(COMMIT_COUNT), 10, 2)))
      FROM
        M_CONNECTION_STATISTICS
      GROUP BY
        HOST
    )
/* TMC_GENERATION_END_1 */
  ) C,
  ( SELECT                                               /* Modification section */
      '%' HOST,
      ' ' ONLY_POTENTIALLY_CRITICAL_RESULTS,
      ' ' REPEAT_CHECK_IDS,
      52 MAX_VALUE_LENGTH,
      'CHECK' ORDER_BY                            /* HOST, CHECK */
    FROM
      DUMMY
  ) BI,
  ( SELECT
      TO_NUMBER(SUBSTR(VALUE, LOCATE(VALUE, '.', 1, 2) + 1, LOCATE(VALUE, '.', 1, 3) - LOCATE(VALUE, '.', 1, 2) - 1) ||
      MAP(LOCATE(VALUE, '.', 1, 4), 0, '', '.' || SUBSTR(VALUE, LOCATE(VALUE, '.', 1, 3) + 1, LOCATE(VALUE, '.', 1, 4) - LOCATE(VALUE, '.', 1, 3) - 1 ))) REVISION 
    FROM 
      M_SYSTEM_OVERVIEW 
    WHERE 
      SECTION = 'System' AND 
      NAME = 'Version' 
  ) REL,
  ( SELECT -1 CHECK_NUM, '' NAME,                  '' DESCRIPTION,                                    '' SAP_NOTE, '' EXPECTED_OP, '' EXPECTED_VALUE, -1 MIN_REV, -1 MAX_REV FROM DUMMY WHERE 1 = 0 UNION ALL
/* TMC_GENERATION_START_2 */
    ( SELECT    1, 'INFO_LINE',                    'SAP HANA MINI CHECKS',                            '1999993', 'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT    2, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT    9, 'CHECK_VERSION',                'Mini check version',                              '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT   10, 'ANALYSIS_DATE',                'Analysis date',                                   '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT   11, 'DATABASE_NAME',                'Database name',                                   '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT   12, 'REVISION_LEVEL',               'Revision level',                                  '2617548', '>=',       '122.03',        -1,129.99 FROM DUMMY ) UNION ALL
    ( SELECT  110, 'EVERYTHING_STARTED',           'Everything started',                              '2177064', '=',        'yes',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  111, 'HOST_START_TIME_VARIATION',    'Host startup time variation (s)',                 '2177064', '<=',       '600',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  115, 'SERVICE_START_TIME_VARIATION', 'Service startup time variation (s)',              '2177064', '<=',       '600',           -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT  200, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  201, 'INFO_LINE',                    'OPERATING SYSTEM',                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  202, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  207, 'OS_KERNEL_BIGMEM',             'Recommended bigmem kernel flavor not used',       '2240716', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  208, 'OS_RELEASE',                   'Supported operating system',                      '2235581', '=',        'yes',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  209, 'OS_KERNEL_VERSION',            'Recommended operating system kernel version',     '2235581', '=',        'yes',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  210, 'SLOW_CPU',                     'Minimum CPU rate (MHz)',                          '2235581', '>=',       '1950',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  211, 'VARYING_CPU',                  'Hosts with varying CPU rates',                    '2235581', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  220, 'CPU_BUSY_CURRENT',             'Current CPU utilization (%)',                     '2100040', '<=',       '80',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  221, 'CPU_BUSY_RECENT',              'Peak CPU utilization (%, last day)',              '2100040', '<=',       '90',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  222, 'CPU_BUSY_HISTORY',             'Time since CPU utilization > 95 % (h)',           '2100040', '>=',       '12.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  226, 'CPU_BUSY_SYSTEM_RECENT',       'Peak system CPU utilization (%, last day)',       '2100040', '<=',       '30',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  228, 'WRONG_SYSTEM_CPU',             'Erroneous system CPU calculation',                '2222110', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  235, 'VARYING_MEMORY',               'Hosts with varying physical memory size',         '1999997', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  245, 'LARGE_SWAP_SPACE',             'Swap space size (GB)',                            '1999997', '<=',       '35.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  250, 'DISK_SIZE',                    'Max. used disk size (%)',                         '1870858', '<=',       '90',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  260, 'OS_OPEN_FILES',                'Open files limit (OS)',                           '1771873', '>=',       '100000',        -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  270, 'UNKNOWN_HARDWARE',             'Unknown hardware components',                     '1828631', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  280, 'SERVER_TIME_VARIATION',        'Maximum time variation between hosts (s)',        '',        '<=',       '5',             -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT  300, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  301, 'INFO_LINE',                    'DISKS',                                           '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  302, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  312, 'MAX_IO_READ_LATENCY_DATA',     'I/O read latency data max. (ms, last day)',       '1999930', '<=',       '20.00',         -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  313, 'AVG_IO_READ_LATENCY_DATA',     'I/O read latency data avg. (ms, last day)',       '1999930', '<=',       '10.00',         -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  315, 'MIN_IO_WRITE_THROUGHPUT_DATA', 'I/O write throughput data min. (MB/s, last day)', '1999930', '>=',       '20',            -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  316, 'AVG_IO_WRITE_THROUGHPUT_DATA', 'I/O write throughput data avg. (MB/s, last day)', '1999930', '>=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  327, 'MAX_IO_WRITE_LATENCY_LOG',     'I/O write latency log max. (ms, last day)',       '1999930', '<=',       '20.00',         -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  329, 'AVG_IO_WRITE_LATENCY_LOG',     'I/O write latency log avg. (ms, last day)',       '1999930', '<=',       '10.00',         -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  330, 'TRIGGER_READ_RATIO',           'Max. trigger read ratio (data)',                  '1930979', '<=',       '0.50',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  331, 'TRIGGER_WRITE_RATIO',          'Max. trigger write ratio (data, log)',            '1930979', '<=',       '0.50',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  340, 'LOG_WAIT_RATIO',               'Log switch wait count ratio (%)',                 '2215131', '<=',       '1',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  341, 'LOG_RACE_RATIO',               'Log switch race count ratio (%)',                 '2215131', '<=',       '1',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  346, 'ENTER_CRIT_SAVEPOINT_PHASE',   'Long waitForLock savepoint phases (last day)',    '2100009', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  348, 'CRIT_SAVEPOINT_PHASE',         'Long critical savepoint phases (last day)',       '2100009', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  351, 'AVG_CRIT_SAVEPOINT_PHASE',     'Blocking savepoint phase avg. (s, last day)',     '2100009', '<=',       '2.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  355, 'TIME_SINCE_LAST_SAVEPOINT',    'Time since last savepoint (s)',                   '2100009', '<=',       '900',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  357, 'SAVEPOINT_THROUGHPUT',         'Savepoint write throughput (MB/s)',               '2100009', '>=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  358, 'LONG_RUNNING_SAVEPOINTS',      'Savepoints taking longer than 900 s (last day)',  '2100009', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  360, 'FAILED_IO_READS',              'Number of failed I/O reads',                      '',        '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  361, 'FAILED_IO_WRITES',             'Number of failed I/O writes',                     '',        '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  367, 'UNSUPPORTED_FILESYSTEMS',      'Filesystems with unsupported types',              '1999930', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  370, 'DISK_DATA_FRAGMENTATION',      'Unused space in data files (%)',                  '1870858', '<=',       '40',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  380, 'OLDEST_BACKUP_SNAPSHOT',       'Age of oldest backup snapshot (days)',            '2100009', '<=',       '30.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  383, 'SHADOW_PAGE_SIZE',             'Max. size of shadow pages (GB, last day)',        '2100009', '<=',       '200.00',        -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT  400, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  401, 'INFO_LINE',                    'MEMORY',                                          '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  402, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  410, 'CURR_ALLOCATION_LIMIT_USED',   'Current allocation limit used (%)',               '1999997', '<=',       '80',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  411, 'TABLE_ALLOCATION_LIMIT_RATIO', 'Current allocation limit used by tables (%)',     '1999997', '<=',       '50',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  413, 'HIST_ALLOCATION_LIMIT_USED',   'Time since allocation limit used > 80 % (h)',     '1999997', '>=',       '24',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  415, 'MAX_CURR_SERV_ALL_LIMIT_USED', 'Curr. max. service allocation limit used (%)',    '1999997', '<=',       '80',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  417, 'MAX_HIST_SERV_ALL_LIMIT_USED', 'Time since service alloc. limit used > 80 % (h)', '1999997', '>=',       '24',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  420, 'CURRENT_LARGE_HEAP_AREAS',     'Heap areas currently larger than 50 GB',          '1999997', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  421, 'RECENT_LARGE_HEAP_AREAS',      'Heap areas larger than 100 GB (last day)',        '1999997', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  422, 'HISTORIC_LARGE_HEAP_AREAS',    'Heap areas larger than 200 GB (history)',         '1999997', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  425, 'CPBTREE_LEAK',                 'Pool/RowEngine/CpbTree leak size (GB)',           '1999997', '<=',       '20.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  426, 'ROW_STORE_TABLE_LEAK',         'Row store table leak size (GB)',                  '2362759', '<=',       '20.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  430, 'CURRENT_UNLOADS',              'Number of column store unloads (last day)',       '1977207', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  431, 'LAST_UNLOAD',                  'Time since last column store unload (days)',      '1977207', '>=',       '5.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  440, 'NAMESERVER_SHARED_MEMORY',     'Shared memory utilization of nameserver (%)',     '1977101', '<=',       '70',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  450, 'LARGE_MEMORY_LOBS',            'Tables with memory LOBs > 2 GB',                  '1994962', '=',        '0',             70,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  454, 'CONCAT_ATTRIBUTES_PCT',        'Size of non-unique concat attributes (%)',        '1986747', '<=',       '5 .00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  460, 'CALCENGINE_CACHE_UTILIZATION', 'Calc engine cache utilization (%)',               '2000002', '<=',       '70',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  470, 'FREQUENT_ALLOCATORS',          'Heap allocators with many instantiations',        '1999997', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  480, 'ADDRESS_SPACE_UTILIZATION',    'Address space utilization (%)',                   '1999997', '<=',       '80',            -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT  500, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  501, 'INFO_LINE',                    'TABLES',                                          '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  502, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  510, 'MANY_PARTITIONS',              'Tables with > 100 partitions',                    '2044468', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  512, 'MULTI_COLUMN_HASH_PART',       'Hash partitioning on multiple columns',           '2044468', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  515, 'INVERTED_HASH_ON_PART_TABLE',  'Partitioned tables with inverted hash indexes',   '2436619', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  520, 'MANY_RECORDS',                 'Tables / partitions > 1.5 billion rows',          '1921694', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  521, 'MANY_RECORDS_HISTORY',         'Table histories > 1.5 billion rows',              '1921694', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  522, 'MANY_RECORDS_UDIV',            'Tables / partitions > 1.5 billion UDIV rows',     '2112604', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  525, 'LARGE_MEMORY_TABLES',          'Tables / partitions with large memory size',      '2044468', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  526, 'LARGE_ALLOC_LIM_TABLES',       'Tables / partitions with large memory share',     '2044468', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  530, 'ROW_STORE_SIZE',               'Row store size (GB)',                             '2050579', '<=',       '300',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  533, 'ROW_STORE_CONTAINERS',         'Row store tables with more than 1 container',     '2000002', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  535, 'ROW_STORE_FRAGMENTATION',      'Row store fragmentation (%)',                     '1813245', '<=',       '30',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  537, 'LONG_TABLE_MERGE_TIME',        'Tables with long total merge time (last day)',    '2057046', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  538, 'LONG_DELTA_MERGES',            'Delta merges > 900 s (last day)',                 '2057046', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  540, 'FAILING_DELTA_MERGES_INFO',    'Failing delta merges (info messages, last day)',  '2057046', '<=',       '5000',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  541, 'FAILING_DELTA_MERGES_ERROR',   'Failing delta merges (error messages, last day)', '2057046', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  542, 'LARGE_DELTA_STORAGE_AUTO',     'Auto merge tables with delta storage > 5 GB',     '2057046', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  543, 'MANY_DELTA_RECORDS_AUTO',      'Auto merge tables with many delta records',       '2057046', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  544, 'LARGE_DELTA_STORAGE_NOAUTO',   'Non-auto merge tables with delta storage > 5 GB', '2057046', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  545, 'MANY_DELTA_RECORDS_NOAUTO',    'Non-auto merge tables with many delta records',   '2057046', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  546, 'SMALL_TABLES_DELTA_SIZE',      'Delta size of small auto merge tables (GB)',      '2057046', '<=',       '3.00',          -1,    99 FROM DUMMY ) UNION ALL
    ( SELECT  547, 'TABLES_AUTOMERGE_DISABLED',    'Non BW tables with disabled auto merge',          '2057046', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  548, 'TABLES_PERSMERGE_DISABLED',    'Tables with disabled persistent merge',           '2057046', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  549, 'TABLES_AUTOCOMP_DISABLED',     'Non BW tables with disabled auto compression',    '2112604', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  550, 'ST_POINT_TABLES',              'Row store tables with ST_POINT columns',          '2038897', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  555, 'TABLES_MOVED_LOGICALLY',       'Tables / partitions moved only logically',        '2066313', '=',        '0',             -1,    82 FROM DUMMY ) UNION ALL
    ( SELECT  560, 'LARGE_TABLES_NOT_COMPRESSED',  'Tables > 10 Mio. rows not compressed',            '2105761', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  561, 'LARGE_COLUMNS_NOT_COMPRESSED', 'Columns > 10 Mio. rows not compressed',           '2112604', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  562, 'MISSING_INVERTED_INDEXES',     'Columns with missing inverted indexes',           '2160391', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  563, 'INDEXES_ON_SPARSE_PREFIXED',   'Indexes on large SPARSE / PREFIXED columns',      '2112604', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  565, 'UDIV_OVERHEAD',                'Tables > 10 Mio. rows and > 200 % UDIV rows',     '2112604', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  566, 'TREX_UDIV_FRAGMENTATION',      'Tables with fragmented $trex_udiv$ column',       '2112604', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  567, 'LARGE_CS_MVCC_TIMESTAMPS',     'Tables with MVCC timestamps > 5 GB',              '2112604', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  570, 'TEMPORARY_TABLES',             'Number of temporary tables',                      '',        '<=',       '100000',        -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  572, 'NOLOGGING_TABLES',             'Number of NO LOGGING tables',                     '',        '<=',       '7000',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  580, 'TABLES_WRONG_SERVICE',         'Tables assigned to wrong service',                '',        '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  582, 'TABLES_WITH_EMPTY_LOCATION',   'Tables with empty table location',                '',        '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT  600, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  601, 'INFO_LINE',                    'TRACES, DUMPS AND LOGS',                          '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  602, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  610, 'KERNEL_PROFILER',              'Kernel profiler active',                          '1804811', '=',        'no',            70,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  612, 'PERFORMANCE_TRACE',            'Performance trace enabled',                       '1787489', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  613, 'FUNCTION_PROFILER',            'Function profiler enabled',                       '1787489', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  614, 'SQL_TRACE',                    'SQL trace enabled',                               '2031647', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  616, 'INDEXSERVER_PYTHON_TRACE',     'Indexserver python trace enabled',                '1935113', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  617, 'EXECUTOR_PYTHON_TRACE',        'Executor python trace enabled',                   '2020877', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  618, 'CLIENT_NETWORK_TRACE',         'SQL client network trace enabled',                '2222200', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  620, 'EXPENSIVE_SQL_TRACE_THLD',     'Minimum expensive SQL trace threshold (ms)',      '2180165', '>=',       '1000',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  623, 'EXPENSIVE_SQL_TRACE_RECORDS',  'Traced expensive SQL statements (last day)',      '2180165', '<=',       '5000',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  630, 'DATABASE_TRACE_SETTINGS',      'Existence of database trace settings',            '2380176', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  635, 'USER_TRACE_SETTINGS',          'Existence of user specific trace settings',       '2119087', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  637, 'END_TO_END_TRACE_SETTINGS',    'Existence of end-to-end trace settings',          '2119087', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  639, 'NUM_TRACE_ENTRIES_HOUR',       'Number of trace entries (last hour)',             '2380176', '<=',       '1000',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  640, 'NUM_TRACEFILES_TOTAL',         'Number of trace files (total)',                   '1977162', '<=',       '200',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  641, 'NUM_TRACEFILES_DAY',           'Number of trace files (last day)',                '1977162', '<=',       '30',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  642, 'SIZE_TRACEFILES_TOTAL',        'Size of trace files (GB, total)',                 '1977162', '<=',       '6.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  643, 'SIZE_TRACEFILES_DAY',          'Size of trace files (GB, last day)',              '1977162', '<=',       '1.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  644, 'LARGEST_TRACEFILE',            'Size of largest trace file (MB)',                 '1977162', '<=',       '50.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  645, 'NUM_OOM_TRACEFILES',           'Number of OOM trace files (last day)',            '1999997', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  646, 'NUM_COMP_OOM_TRACEFILES',      'Number of statement OOM trace files (last day)',  '1999997', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  650, 'NUM_CRASHDUMP_TRACEFILES',     'Number of crash dumps (last day)',                '2177064', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  652, 'NUM_PAGEDUMP_TRACEFILES',      'Number of page dumps (last day)',                 '1977242', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  655, 'NUM_RTEDUMP_TRACEFILES',       'Number of RTE dumps (last day)',                  '2119087', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  658, 'LAST_SPECIAL_DUMP',            'Time since last dump (days)',                     '2119087', '>=',       '7.00',          -1,    -1 FROM DUMMY ) UNION ALL 
    ( SELECT  660, 'CPU_TIME_MEASUREMENT',         'CPU time measurement enabled',                    '2100040', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  670, 'LAST_TRACEFILE_MODIFICATION',  'Time since last trace file modification (s)',     '2119087', '<=',       '600',           -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT  700, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  701, 'INFO_LINE',                    'STATISTICS SERVER',                               '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  702, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  710, 'OPEN_ALERTS_HIGH',             'Open alerts (high priority)',                     '2053330', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  711, 'OPEN_ALERTS_ERROR',            'Open alerts (error state)',                       '2053330', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  712, 'STAT_SERVER_INTERNAL_ERRORS',  'Internal statistics server errors (last day)',    '2147247', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  715, 'CHECKS_NOT_RUNNING',           'Number of actions not executed as expected',      '2147247', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  716, 'STAT_SERVER_NO_WORKERS',       'Number of statistics server worker threads',      '2147247', '>=',       '1',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  717, 'STAT_SERVER_DISABLED_CHECKS',  'Number of disabled actions',                      '2113228', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  718, 'STAT_SERVER_INACTIVE_CHECKS',  'Number of relevant inactive actions',             '2147247', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  719, 'STAT_SERVER_UNKNOWN_STATES',   'Number of actions with unknown state',            '2147247', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  720, 'OPEN_EVENTS',                  'Events not acknowledged since >= 1800 s',         '2126236', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  730, 'OLD_PENDING_ALERT_EMAILS',     'Pending e-mails older than 3 days',               '2133799', '<=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  735, 'STAT_SERVER_OLD_ALERTS',       'Alerts older than 42 days',                       '2170779', '<=',       '10000',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  736, 'STAT_SERVER_FREQUENT_ALERTS',  'Alerts reported frequently',                      '2147247', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  740, 'STAT_SERVER_LAST_ACTIVE',      'Time since statistics server run (s)',            '2147247', '<=',       '3600',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  745, 'STAT_SERVER_TABLE_SIZE',       'Total size of statistics server tables (GB)',     '2147247', '<=',       '30.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  746, 'STAT_SERVER_TABLE_SHARE',      'Total memory share of statistics server (%)',     '2147247', '<=',       '2.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  747, 'HOST_SQL_PLAN_CACHE_ZERO',     'Number of zero entries in HOST_SQL_PLAN_CACHE',   '2084747', '<=',       '1000000',       -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  748, 'HOST_CS_UNLOADS_ACTIVE',       'History of M_CS_UNLOADS collected',               '2147247', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  749, 'HOST_RECORD_LOCKS_ACTIVE',     'History of M_RECORD_LOCKS collected',             '2147247', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  750, 'STAT_SERVER_RETENTION',        'Stat. server tables with retention < 42 days',    '2147247', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  755, 'EMBEDDED_STAT_SERVER_USED',    'Embedded statistics server used',                 '2092033', '=',        'yes',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  760, 'ESS_MIGRATION_SUCCESSFUL',     'Status of embedded statistics server migration',  '2092033', '=',        'done (okay)',   -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  765, 'STAT_SERVER_LOG_SEGMENT_SIZE', 'Log segment size of statisticsserver (MB)',       '2019148', '>=',       '1024',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  770, 'STAT_SERVER_WRONG_HOST',       'Number of stat. server tables not on master',     '2091256', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  780, 'HOST_OBJ_LOCK_UNKNOWN',        'Unknown entries in HOST_OBJECT_LOCK_STATISTICS',  '2147247', '<=',       '1000000',       -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT  800, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  801, 'INFO_LINE',                    'TRANSACTIONS AND THREADS',                        '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  802, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  810, 'VERSIONS_ROW_STORE_CURR',      'MVCC versions in row store',                      '2169283', '<=',       '3000000',       -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  811, 'VERSIONS_ROW_STORE_DAY',       'Max. MVCC versions in row store (last day)',      '2169283', '<=',       '5000000',       -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  812, 'MVCC_REC_VERSIONS_ROW_STORE',  'Max. versions per record in row store',           '2169283', '<=',       '30000',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  815, 'MVCC_TRANS_START_TIME',        'Age of transaction blocking row store MVCC (s)',  '2169283', '<=',       '10800',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  830, 'ACTIVE_COMMIT_ID_RANGE',       'Active commit ID range',                          '2169283', '<=',       '3000000',       -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  832, 'ACTIVE_COMMIT_ID_RANGE_DAY',   'Max. active commit ID range (last day)',          '2169283', '<=',       '8000000',       -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  840, 'ACTIVE_UPDATE_TID_RANGE',      'Active update transaction ID range',              '2169283', '<=',       '3000000',       -1, 99.99 FROM DUMMY ) UNION ALL
    ( SELECT  841, 'ACTIVE_UPDATE_TRANS_TIME',     'Oldest active update transaction (s)',            '2169283', '<=',       '10800',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  842, 'ACTIVE_UPDATE_TRANS_DAY',      'Max. active update trans. ID range (last day)',   '2169283', '<=',       '8000000',       -1, 99.99 FROM DUMMY ) UNION ALL
    ( SELECT  845, 'MAX_UPDATE_TRANS_ID',          'Maximum update transaction ID',                   '2001840', '<=',       '3000000000',    64, 69.04 FROM DUMMY ) UNION ALL
    ( SELECT  846, 'TABLE_MVCC_SNAPSHOT_RANGE',    'Table MVCC snapshot range',                       '2169283', '<=',       '8000000',       -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  848, 'CURRENT_UTID',                 'Current update transaction ID',                   '2633077', '<=',       '3000000000',    -1,122.16 FROM DUMMY ) UNION ALL
    ( SELECT  850, 'MAX_GC_HISTORY_COUNT',         'Persistence garbage collection history count',    '2169283', '<=',       '3000000',       -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  852, 'GC_UNDO_FILE_COUNT',           'Undo and cleanup files',                          '2169283', '<=',       '200000',        -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  854, 'GC_UNDO_FILE_SIZE',            'Undo and cleanup file size (GB)',                 '2169283', '<=',       '50.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  856, 'TRANSACTIONS_LARGE_UNDO',      'Max. undo size of current transaction (MB)',      '2169283', '<=',       '500.00',        -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  857, 'TRANSACTIONS_LARGE_REDO',      'Max. redo size of current transaction (MB)',      '2169283', '<=',       '1000.00',       -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  860, 'PENDING_SESSIONS_CURRENT',     'Current pending sessions',                        '',        '<=',       '5',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  863, 'PENDING_SESSIONS_RECENT',      'Avg. pending sessions (last day)',                '',        '<=',       '1.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  870, 'HIGH_SELFWATCHDOG_ACTIVITY',   'SelfWatchDog activity time (%, last hour)',       '1999998', '<=',       '2.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  878, 'CONNECTIONS_CANCEL_REQUESTED', 'Connections in CANCEL REQUESTED state',           '2169283', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  880, 'OPEN_CONNECTIONS',             'Open connections (%)',                            '1910159', '<=',       '90.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  881, 'OPEN_TRANSACTIONS',            'Number of transactions',                          '2154870', '<=',       '20000',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  882, 'PARKED_JOBWORKERS',            'Max. parked job worker ratio',                    '2256719', '<=',       '2.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  883, 'QUEUED_JOBWORKERS',            'Queued job workers',                              '2222250', '<=',       '200',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  885, 'CUR_HIGH_DURATION_THREADS',    'SqlExecutor threads with significant duration',   '2114710', '<=',       '10',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  887, 'CUR_APP_USER_THREADS',         'Application users with significant threads',      '2114710', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  890, 'REC_POPULAR_THREAD_METHODS',   'Unusual frequent thread methods (last hour)',     '2114710', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALl

    ( SELECT  900, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  901, 'INFO_LINE',                    'BACKUP',                                          '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  902, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  910, 'LAST_DATA_BACKUP',             'Age of last data backup (days)',                  '1642148', '<=',       '1.20',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  911, 'LAST_DATA_BACKUP_ERROR',       'Age of last data backup error (days)',            '1642148', '>=',       '1.20',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  915, 'MIN_DATA_BACKUP_THROUGHPUT',   'Min. data backup throughput (GB/h, last week)',   '1999930', '>=',       '200.00',        -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  916, 'AVG_DATA_BACKUP_THROUGHPUT',   'Avg. data backup throughput (GB/h, last week)',   '1999930', '>=',       '300.00',        -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  920, 'LAST_LOG_BACKUP',              'Age of last log backup (hours)',                  '1642148', '<=',       '1.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  921, 'LAST_LOG_BACKUP_ERROR',        'Age of last log backup error (days)',             '1642148', '>=',       '1.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  922, 'MAX_LOG_BACKUP_DURATION',      'Maximum log backup duration (s, last day)',       '2063454', '<=',       '300',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  923, 'LOG_BACKUP_ERRORS_LAST_MONTH', 'Log backup errors (last month)',                  '1642148', '<=',       '10',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  930, 'AUTO_LOG_BACKUP',              'Automatic log backup',                            '1645183', '=',        'yes',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  935, 'DATABASE_LOG_MODE',            'Database log mode',                               '1645183', '=',        'normal',        20,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  940, 'BACKUP_CATALOG_SIZE',          'Size of backup catalog (MB)',                     '2505218', '<=',       '50.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  942, 'CATALOG_BACKUP_SIZE_SHARE',    'Catalog size share (last day, %)',                '2505218', '<=',       '3.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  945, 'OLDEST_BACKUP_IN_CATALOG',     'Age of oldest backup in catalog (days)',          '2505218', '<=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  950, 'LOG_SEGMENTS_NOT_FREE',        'Log segments not free for reuse',                 '',        '<=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  952, 'LOG_SEGMENTS_FREE',            'Log segments free for reuse',                     '',        '<=',       '250',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT  955, 'SERVICE_LOG_BACKUPS',          'Max. number of log backups / service (last day)', '',        '<=',       '300',           -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 1000, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1001, 'INFO_LINE',                    'LOCKS',                                           '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1002, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1010, 'OLDEST_LOCK_WAIT',             'Age of oldest active trans. lock wait (s)',       '1999998', '<=',       '60',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1011, 'LONG_LOCK_WAITS',              'Trans. lock wait durations > 600 s (last day)',   '1999998', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1020, 'LOCKED_THREADS',               'Threads currently waiting for locks',             '1999998', '<=',       '10',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1021, 'LOCKED_THREADS_LAST_DAY',      'Maximum threads waiting for locks (last day)',    '1999998', '<=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1030, 'CONC_BLOCK_TRANS_HOUR',        'Concurrently blocked transactions (last hour)',   '1999998', '<=',       '20',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1031, 'CONC_BLOCK_TRANS_DAY',         'Concurrently blocked transactions (last day)',    '1999998', '<=',       '20',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1040, 'TRANS_LOCKS_GLOBAL',           'Total current transactional locks',               '1999998', '<=',       '10000000',      -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1045, 'OLD_TRANS_LOCKS',              'Transactional locks older than 1 day',            '1999998', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1050, 'INTERNAL_LOCKS_LAST_HOUR',     'Significant internal lock waits (last hour)',     '1999998', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1052, 'INTERNAL_LOCKS_LAST_DAY',      'Significant internal lock waits (last day)',      '1999998', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 1100, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1101, 'INFO_LINE',                    'SQL',                                             '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1102, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1110, 'TOP_SQL_SQLCACHE',             'SQL using in average > 1 connection (last day)',  '2000002', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1112, 'TOP_SQL_THREADSAMPLES_CURR',   'SQL using in average > 1 thread (last hour)',     '2000002', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1113, 'TOP_SQL_THREADSAMPLES_HIST',   'SQL using in average > 1 thread (last day)',      '2000002', '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1115, 'LONGEST_CURRENT_SQL',          'Longest running current SQL statement (h)',       '2000002', '<=',       '12.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1118, 'LONG_RUNNING_JOB',             'Longest running current job (s)',                 '2000002', '<=',       '600',          100,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1120, 'EXP_TRACE_LONG_RUNNING_SQL',   'Exp. stmt. trace: SQL running > 1 h (last day)',  '2000002', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1129, 'SQL_CACHE_EVICTIONS_LAST_DAY', 'SQL cache evictions / h (last day)',              '2124112', '<=',       '1000',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1130, 'SQL_CACHE_EVICTIONS',          'SQL cache evictions / h',                         '2124112', '<=',       '1000',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1131, 'SQL_CACHE_HIT_RATIO',          'SQL cache hit ratio of indexserver (%)',          '2124112', '>=',       '90.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1132, 'SQL_CACHE_PER_SQL_CONNECTION', 'SQL cache size per SQL connection (MB)',          '2124112', '>=',       '15.00',         -1, 89.99 FROM DUMMY ) UNION ALL
    ( SELECT 1140, 'SQL_PREPARATION_SHARE',        'SQL preparation runtime share (%)',               '2124112', '<=',       '5.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1142, 'SQL_CACHE_USED_BY_TABLE',      'Table(s) using > 10 % of SQL cache',              '2124112', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1145, 'SQL_CACHE_LONG_INLIST',        'SQL cache used by IN lists >= 100 elements (%)',  '2124112', '<=',       '20.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1147, 'SQL_CACHE_DUPLICATE_HASHES',   'Duplicate statement hashes in SQL cache (%)',     '2124112', '<=',       '20.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1148, 'SQL_CACHE_FREQUENT_HASH',      'Statements existing > 100 times in SQL cache',    '2124112', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1149, 'SQL_CACHE_SESSION_LOCAL',      'Statements with SESSION LOCAL sharing type (%)',  '2124112', '<=',       '1.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1150, 'SQL_CACHE_REFERENCED',         'Referenced statements in SQL cache (%)',          '2124112', '<=',       '20.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1155, 'SUSPENDED_SQL',                'Number of SQL statements in SUSPENDED state',     '2169283', '<=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1160, 'AVG_COMMIT_TIME',              'Average COMMIT time (ms)',                        '2000000', '<=',       '10.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1162, 'AVG_COMMIT_IO_TIME',           'Average COMMIT I/O time (ms)',                    '2000000', '<=',       '10.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1170, 'AVG_DB_REQUEST_TIME',          'Average database request time (ms)',              '2000002', '<=',       '2.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1180, 'ABAP_BUFFER_LOADING',          'Avg. ABAP buffer loading sessions (last day)',    '2000002', '<=',       '0.50',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1181, 'FDA_WRITE',                    'Avg. FDA write sessions (last day)',              '2000002', '<=',       '0.50',          -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 1200, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1201, 'INFO_LINE',                    'APPLICATION',                                     '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1202, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1210, 'DDLOG_SEQUENCE_CACHING',       'DDLOG sequence cache size',                       '2000002', '>=',       '2',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1220, 'QCM_TABLES',                   'QCM conversion tables',                           '9385',    '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1250, 'BPC_TABLES',                   'Physical BPC tables',                             '2445363', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1252, 'ABAP_POOL_CLUSTER_TABLES',     'Physical ABAP pool and cluster tables',           '1892354', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1260, 'QIWKTAB_ACCESSES',             'QIWKTAB update rate (updates / h)',               '2000002', '<=',       '10000',         -1, 89.99 FROM DUMMY ) UNION ALL
    ( SELECT 1270, 'TWO_COLUMN_MANDT_INDEXES',     'Two-column indexes including client column',      '2160391', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1280, 'SNAP_GROWTH_LAST_DAY',         'Growth of short dump table SNAP (GB, last day)',  '2399990', '<=',       '0.50',          -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 1300, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1301, 'INFO_LINE',                    'SECURITY',                                        '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1302, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1310, 'SECURE_STORE_AVAILABLE',       'Secure store (SSFS) status',                      '1977221', '=',        'available',     -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1331, 'CONNECTION_USER_EXPIRATION',   'Connection user with (password) expiration',      '',        '=',        'none',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1340, 'CATALOG_READ_GRANTED',         'CATALOG READ privilege granted to current user',  '1640741', '=',        'yes',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1360, 'AUDIT_LOG_SIZE',               'Size of audit log table (GB)',                    '2388483',  '<=',       '10.00',        -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 1400, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1401, 'INFO_LINE',                    'LICENSE',                                         '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1402, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1410, 'LICENSE_LIMIT',                'License usage (%)',                               '1704499', '<=',       '95',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1415, 'LICENSE_EXPIRATION',           'License expiration (days)',                       '1644792', '>=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1420, 'PERMANENT_LICENSE',            'Permanent license',                               '1644792', '=',        'yes',           -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 1500, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1501, 'INFO_LINE',                    'NETWORK',                                         '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1502, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1510, 'SERVICE_SEND_INTRANODE',       'Avg. intra node send throughput (MB/s)',          '2222200', '>=',       '120',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1512, 'SERVICE_SEND_INTERNODE',       'Avg. inter node send throughput (MB/s)',          '2222200', '>=',       '80',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1520, 'TCP_RETRANSMITTED_SEGMENTS',   'Retransmitted TCP segments (%)',                  '2222200', '<=',       '1.00000',      100,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1522, 'TCP_BAD_SEGMENTS',             'Bad TCP segments (%)',                            '2222200', '<=',       '0.10000',      100,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1530, 'NETWORK_VOLUME_INTRANODE',     'Avg. intra node communication volume (MB/s)',     '2222200', '<=',       '30',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1532, 'NETWORK_VOLUME_INTERNODE',     'Avg. inter node communication volume (MB/s)',     '2222200', '<=',       '20',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1540, 'HOST_NAME_RESOLUTION',         'Host name resolution for non IP addresses',       '2222200', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 1600, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1601, 'INFO_LINE',                    'XS ENGINE',                                       '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1602, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1610, 'XSENGINE_LOG_SEGMENT_SIZE',    'Log segment size of xsengine (MB)',               '2062080', '>=',       '64',            -1,    82 FROM DUMMY ) UNION ALL

    ( SELECT 1700, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1701, 'INFO_LINE',                    'NAMESERVER',                                      '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1702, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1710, 'PING_TIME_HOUR',               'Avg. indexserver ping time (ms, last hour)',      '2222110', '<=',       '30.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1712, 'PING_TIME_DAY',                'Avg. indexserver ping time (ms, last day)',       '2222110', '<=',       '20.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1720, 'NAMESERVER_LOCKFILE_LOCATION', 'Supported nameserver lock file location',         '2100296', '=',        'yes',           91,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 1800, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1801, 'INFO_LINE',                    'SYSTEM REPLICATION',                              '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1802, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1810, 'REPLICATION_ERROR',            'Services with replication error',                 '1999880', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1811, 'REPLICATION_UNKNOWN',          'Services with unknown replication state',         '1999880', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1813, 'REP_CONNECTION_CLOSED',        'Replication connection closed (last day)',        '1999880', '=',        'no',            90,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1814, 'OLD_LOG_POSITION',             'Log position gap (MB)',                           '2436931', '<=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1815, 'LOG_SHIPPING_DELAY',           'Current log shipping delay (s)',                  '1999880', '<=',       '60',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1816, 'LOG_SHIPPING_ASYNC_BUFF_FILL', 'Filling level of async shipping buffer (%)',      '1999880', '<=',       '50',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1818, 'ASYNC_BUFFER_FULL_LAST_DAY',   'Async log shipping buffer full (last day)',       '1999880', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1820, 'REP_PARAMETER_DEVIATION',      'Parameter deviations primary vs. secondary site', '1999880', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1830, 'OLDEST_REPLICATION_SNAPSHOT',  'Age of oldest replication snapshot (h)',          '1999880', '<=',       '5.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1840, 'SYNC_LOG_SHIPPING_TIME_CURR',  'Avg. sync log shipping time (ms/req, last hour)', '1999880', '<=',       '2.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1843, 'SYNC_LOG_SHIPPING_TIME_REC',   'Avg. sync log shipping time (ms/req, last day)',  '1999880', '<=',       '2.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1846, 'SYNC_LOG_SHIPPING_TIME_HIST',  'Max. sync log shipping time (ms/req, history)',   '1999880', '<=',       '5.00',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1860, 'DATASHIPPING_LOGRETENTION',    'Datashipping combined with log retention',        '1999880', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1865, 'REPLICATION_SAVEPOINT_DELAY',  'System replication savepoint delay (h)',          '1999880', '<=',       '4.00',          -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 1900, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1901, 'INFO_LINE',                    'OBJECTS',                                         '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1902, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 1910, 'MAX_OBJECT_OID',               'Maximum object ID',                               '2155663', '<=',       '1000000000',    -1, 85.03 FROM DUMMY ) UNION ALL
    ( SELECT 1910, 'MAX_OBJECT_OID',               'Maximum object ID',                               '2155663', '<=',       '1000000000',    90,    95 FROM DUMMY ) UNION ALL
    ( SELECT 1920, 'INVALID_PROCEDURES',           'Number of invalid procedures',                    '',        '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 2000, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2001, 'INFO_LINE',                    'BW',                                              '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2002, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2010, 'EMPTY_TABLE_PLACEMENT',        'Empty TABLE_PLACEMENT table in BW',               '1908075', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2020, 'NUM_PARTITIONED_SID_TABLES',   'Partitioned SID tables',                          '2044468', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2022, 'SID_TABLES_WITH_MANY_RECORDS', 'SID tables > 1.5 billion rows',                   '1331403', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2025, 'NUM_PART_SPECIAL_TABLES',      'Partitioned special BW tables < 1.5 bill. rows',  '2044468', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2030, 'BW_SCALEOUT_TWO_NODES',        'BW scale-out installation on 2 nodes',            '1702409', '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2040, 'TEMPORARY_BW_TABLES',          'Temporary BW tables',                             '2388483', '<=',       '1000',          -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2050, 'INVERTED_HASH_ON_BW_TABLE',    'BW tables with inverted hash indexes',            '2109355', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 2100, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2101, 'INFO_LINE',                    'CONSISTENCY',                                     '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2102, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2110, 'CTC_ERRORS_LAST_MONTH',        'CHECK_TABLE_CONSISTENCY errors (last month)',     '1977584', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2113, 'LAST_CTC_RUN',                 'Last global table consistency check (days)',      '2116157', '<=',       '32.00',         -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2120, 'CORRUPTION_RISK_LARGE_TABLES', 'Large tables with risk of index corruption',      '2264778', '=',        '0',             -1,102.03 FROM DUMMY ) UNION ALL
    ( SELECT 2120, 'CORRUPTION_RISK_LARGE_TABLES', 'Large tables with risk of index corruption',      '2264778', '=',        '0',            110,   110 FROM DUMMY ) UNION ALL
    ( SELECT 2130, 'TOPOLOGY_DAEMON_INCONSISTENT', 'Inconsistencies between topology and daemon',     '2222249', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2135, 'TOPOLOGY_ROLES_INCONSISTENT',  'Inconsistent node role definition in topology',   '',        '=',        'no',            -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2140, 'METADATA_DEP_INCONSISTENT',    'Inconsistencies of metadata and dependencies',    '2498587', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 2200, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2201, 'INFO_LINE',                    'SMART DATA ACCESS / SMART DATA INTEGRATION',      '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2202, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2210, 'SDA_TABLES_WITHOUT_STATS',     'SDA tables without statistics',                   '2180119', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2220, 'SDI_SUBSCRIPTION_EXCEPTIONS',  'SDI remote subscription exceptions',              '2400022', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2230, 'DPSERVER_ON_SLAVE_NODES',      'Slave nodes with dpserver processes',             '2391341', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 2300, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2301, 'INFO_LINE',                    'ADMINISTRATION',                                  '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2302, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2310, 'HDBSTUDIO_CONNECTIONS',        'SAP HANA Studio connections',                     '2073112', '<=',       '100',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2315, 'OUTDATED_HDBSTUDIO_VERSION',   'Connections with old SAP HANA Studio versions',   '2073112', '=',        '0',             -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 2320, 'LAST_HDBCONS_EXECUTION',       'Time since last hdbcons execution (h)',           '2222218', '>=',       '24',            -1,    -1 FROM DUMMY ) UNION ALL

    ( SELECT 9000, 'BLANK_LINE',                   '',                                                '',        'any',      'any',           -1,    -1 FROM DUMMY ) UNION ALL
    ( SELECT 9001, 'INFO_LINE',                    'END OF CHECK',                                    '',        'any',      'any',           -1,    -1 FROM DUMMY )

/* TMC_GENERATION_END_2 */
  ) CC
  WHERE
    C.NAME = CC.NAME AND
    ( IFNULL(C.HOST, '') = '' OR C.HOST LIKE BI.HOST ) AND	
    REL.REVISION BETWEEN CC.MIN_REV AND MAP(CC.MAX_REV, -1, 99999, CC.MAX_REV)
) M
WHERE
  ONLY_POTENTIALLY_CRITICAL_RESULTS = ' ' OR POTENTIALLY_CRITICAL = 'X' OR CHECK_NUM <= 9
ORDER BY
  MAP(M.ORDER_BY, 'CHECK', M.CHECK_NUM),
  M.HOST,
  M.VALUE
WITH HINT (NO_SUBPLAN_SHARING)
