SELECT
/* 

[NAME]

- HANA_Threads_CurrentThreads_1.00.100+

[DESCRIPTION]

- Thread information

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]

- LOCK_OWNER_THREAD_ID available as of Rev. 70
- STATEMENT_HASH available as of Rev. 100

[VALID FOR]

- Revisions:              >= 1.00.100
- Statistics server type: all

[SQL COMMAND VERSION]

- 2014/03/06:  1.0 (initial version)
- 2015/05/14:  1.1 (THREAD_METHOD, THREAD_DETAIL, CALLER, CALLING and LOCK_WAIT_NAME added)
- 2016/02/26:  1.2 (dedicated Rev100+ version)
- 2016/07/02:  1.3 (LOG_CONN_ID included)
- 2016/09/13:  1.4 (APP_USER in Modification section included)
- 2016/11/08:  1.5 (PAR_CONN_ID included)
- 2017/01/04:  1.6 (THREAD_TYPE, THREAD_HASH filter included, SQL_TEXT output included)
- 2017/02/03:  1.7 (EXCLUDE_PHANTOM_THREADS included)
- 2017/03/17:  1.8 (DB_USER included)

[INVOLVED TABLES]

- M_SERVICE_THREADS
- M_CONNECTIONS
- M_ACTIVE_STATEMENTS

[INPUT PARAMETERS]

- HOST

  Host name

  'saphana01'     --> Specic host saphana01
  'saphana%'      --> All hosts starting with saphana
  '%'             --> All hosts

- PORT

  Port number

  '30007'         --> Port 30007
  '%03'           --> All ports ending with '03'
  '%'             --> No restriction to ports

- SERVICE_NAME

  Service name

  'indexserver'   --> Specific service indexserver
  '%server'       --> All services ending with 'server'
  '%'             --> All services  

- ONLY_ACTIVE_THREADS

  Possibility to restrict output to active threads

  'X'            --> Only show threads that are currently active
  ' '            --> Show all threads

- EXCLUDE_PHANTOM_THREADS

  Possibility to exclude idle threads that are shown as "active" due to SAP HANA bugs

  'X'             --> Do not show idle threads that are shown as active threads
  ' '             --> No restriction of displayed threads

- CONN_ID

  Connection ID

  330655          --> Connection ID 330655
  -1              --> No connection ID restriction

- LOG_CONN_ID:

  Logical connection ID

  330655          --> Logical connection ID 330655
  -1              --> No logical connection ID restriction

- PAR_CONN_ID:

  Parent connection ID

  330655          --> Parent connection ID 330655
  -1              --> No parent connection ID restriction

- DB_USER

  Database user

  'SYSTEM'        --> Database user 'SYSTEM'
  '%'             --> No database user restriction

- APP_USER

  Application user

  'SAPSYS'        --> Application user 'SAPSYS'
  '%'             --> No application user restriction

- THREAD_ID

  Thread identifier

  4567            --> Thread 4567
  -1              --> No thread identifier restriction

- THREAD_TYPE

  Type of thread (e.g. 'SqlExecutor', 'JobWorker' or 'MergedogMonitor')

  'SqlExecutor'   --> Threads with type 'SqlExecutor'
  '%'             --> No thread type restriction

- THREAD_STATE

  State of thread (e.g. e.g. 'Running', 'Network Read' or 'Semaphore Wait')

  'Running'       --> Threads with state 'Running'
  '%'             --> No thread state restriction

- THREAD_METHOD

  Thread method

  'SearchPartJob' --> Thread method SearchPartJob
  '%'             --> No restriction related to thread method

- AGGREGATION_TYPE

  Type of aggregation (e.g. average, sum, maximum)

  'AVG'           --> Average value
  'SUM'           --> Total value
  'MAX'           --> Maximum value

- AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'THREAD_ID'     --> Aggregation by thread ID
  'HOST, PORT'    --> Aggregation by host and port
  'NONE'          --> No aggregation

- ORDER_BY

  Sort criteria (available values are provided in comment)

  'THREADS'       --> Sorting by number of threads (useful when aggregating)
  'CONNECTION'    --> Sorting by connection ID

[OUTPUT PARAMETERS]

- HOST:          Host name
- PORT:          Port
- SERVICE:       Service name
- NUM:           Number of threads (1 if no aggregation is done)
- LOG_CONN_ID:   Logical connection ID (initial connection in statement routing scenarios)
- PAR_CONN_ID:   Parent connection ID (in case of statement-level distributed executions)
- CONN_ID:       Connection ID
- THREAD_ID:     Thread ID
- BLK_THREAD:    Blocking thread
- CALLER:        Caller thread (i.e. thread that has triggered the current thread)
- CALLING:       Called thread (i.e. thread that is triggered by current thread)
- THREAD_TYPE:   Thread type
- THREAD_STATE:  Thread state
- THREAD_METHOD: Thread meathod
- THREAD_DETAIL: Thread detail
- LOCK_NAME:     Lock name
- ACTIVE:        'TRUE' if thread is active, otherwise false
- APP_USER:      Application user name
- DURATION_S:    Thread duration (s)
- CPU_TIME_S:    Thread CPU consumption (s)
- SQL_TEXT:      SQL text

[EXAMPLE OUTPUT]

---------------------------------------------------------------------------------------------------------------------------------
|HOST     |SERVICE_NAME    |NUM  |CONN_ID   |THREAD_ID|THREAD_TYPE        |THREAD_STATE|ACTIVE|APP_USER   |DURATION_S|CPU_TIME_S|
---------------------------------------------------------------------------------------------------------------------------------
|saphana20|preprocessor    |    1|    338803|    24424|Request            |any         |TRUE  |ZSAP_10    |      0.00|      0.00|
|saphana20|indexserver     |    1|    338803|    24449|Request            |any         |TRUE  |ZSAP_10    |      0.00|      0.00|
|saphana20|nameserver      |    1|    338803|    28364|Request            |any         |TRUE  |ZSAP_10    |      0.00|      0.00|
|saphana21|indexserver     |    1|    338803|    52999|SqlExecutor        |any         |TRUE  |ZSAP_10    |      0.03|      0.00|
|saphana21|indexserver     |    1|    300257|    53005|SqlExecutor        |any         |TRUE  |RT_VENTES  |      0.00|      0.00|
|saphana21|indexserver     |    1|    301432|    53011|SqlExecutor        |any         |TRUE  |RT_LOG     |      0.00|      0.00|
|saphana21|indexserver     |    1|    301551|    53024|SqlExecutor        |any         |TRUE  |RT_VENTES  |      0.00|      0.00|
|saphana21|indexserver     |    1|    300290|    53508|SqlExecutor        |any         |TRUE  |RT_PUSHW045|      0.00|      0.00|
|saphana21|indexserver     |    1|    300776|    65701|SqlExecutor        |any         |TRUE  |RT_PUSHW045|      0.00|      0.00|
|saphana20|compileserver   |    1|    338803|    93615|Request            |any         |TRUE  |ZSAP_10    |      0.00|      0.00|
|saphana21|nameserver      |    1|    338803|   102512|Request            |any         |TRUE  |ZSAP_10    |      0.00|      0.00|
---------------------------------------------------------------------------------------------------------------------------------

*/

  HOST,
  LPAD(PORT, 5) PORT,
  SERVICE_NAME SERVICE,
  LPAD(NUM, 5) NUM,
  LPAD(LOG_CONN_ID, 11) LOG_CONN_ID,
  LPAD(PAR_CONN_ID, 11) PAR_CONN_ID,
  LPAD(CONN_ID, 9) CONN_ID,
  STATEMENT_HASH,
  LPAD(THREAD_ID, 9) THREAD_ID,
  LPAD(MAP(BLK_THREAD, '0', '', BLK_THREAD), 10) BLK_THREAD,
  CALLER,
  CALLING,
  THREAD_TYPE,
  THREAD_STATE,
  THREAD_METHOD,
  REPLACE(REPLACE(REPLACE(THREAD_DETAIL, CHAR(9), ' '), CHAR(10), ' '), CHAR(13), ' ') THREAD_DETAIL,
  LOCK_NAME,
  ACTIVE,
  DB_USER,
  APP_USER,
  DURATION_S,
  CPU_TIME_S,
  IFNULL(SQL_TEXT, '') SQL_TEXT
FROM
( SELECT
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')          != 0 THEN T.HOST                               ELSE MAP(BI.HOST, '%', 'any', BI.HOST)                          END HOST,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')          != 0 THEN TO_VARCHAR(T.PORT)                   ELSE MAP(BI.PORT, '%', 'any', BI.PORT)                          END PORT,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SERVICE')       != 0 THEN S.SERVICE_NAME                       ELSE MAP(BI.SERVICE_NAME, '%', 'any', BI.SERVICE_NAME)          END SERVICE_NAME,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CONN_ID')       != 0 THEN TO_VARCHAR(T.CONN_ID)                ELSE MAP(BI.CONN_ID, -1, 'any', TO_VARCHAR(BI.CONN_ID))         END CONN_ID,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'LOG_CONN')      != 0 THEN TO_VARCHAR(C.LOGICAL_CONNECTION_ID)  ELSE MAP(BI.LOG_CONN_ID, -1, 'any', TO_VARCHAR(BI.LOG_CONN_ID)) END LOG_CONN_ID,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PAR_CONN')      != 0 THEN TO_VARCHAR(C.PARENT_CONNECTION_ID)   ELSE MAP(BI.PAR_CONN_ID, -1, 'any', TO_VARCHAR(BI.PAR_CONN_ID)) END PAR_CONN_ID,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HASH')          != 0 THEN T.STATEMENT_HASH                     ELSE MAP(BI.STATEMENT_HASH, '%', 'any', BI.STATEMENT_HASH)      END STATEMENT_HASH,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HASH')          != 0 THEN SUBSTR(ST.STATEMENT_STRING, 1, 4000) ELSE 'any'                                                      END SQL_TEXT,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'DB_USER')       != 0 THEN T.DB_USER                            ELSE MAP(BI.DB_USER, '%', 'any', BI.DB_USER)                    END DB_USER,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'APP_USER')      != 0 THEN T.APP_USER                           ELSE MAP(BI.APP_USER, '%', 'any', BI.APP_USER)                  END APP_USER,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_TYPE')   != 0 THEN T.THREAD_TYPE                        ELSE 'any'                                                      END THREAD_TYPE,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_STATE')  != 0 THEN T.THREAD_STATE                       ELSE 'any'                                                      END THREAD_STATE,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_METHOD') != 0 THEN T.THREAD_METHOD                      ELSE 'any'                                                      END THREAD_METHOD,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_DETAIL') != 0 THEN T.THREAD_DETAIL                      ELSE 'any'                                                      END THREAD_DETAIL,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_ID')     != 0 THEN TO_VARCHAR(T.THREAD_ID)              ELSE 'any'                                                      END THREAD_ID,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CALLER')        != 0 THEN T.CALLER                             ELSE 'any'                                                      END CALLER,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CALLING')       != 0 THEN T.CALLING                            ELSE 'any'                                                      END CALLING,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'LOCK_NAME')     != 0 THEN T.LOCK_NAME                          ELSE 'any'                                                      END LOCK_NAME,
    COUNT(*) NUM,
    MAP(MIN(T.ACTIVE), MAX(T.ACTIVE), MAX(T.ACTIVE), 'any') ACTIVE,
    LPAD(TO_DECIMAL(MAP(BI.AGGREGATION_TYPE, 'AVG', AVG(T.DURATION_MS), 'MAX', MAX(T.DURATION_MS), 'SUM', SUM(T.DURATION_MS)) / 1000, 10, 2), 10) DURATION_S,
    LPAD(TO_DECIMAL(MAP(BI.AGGREGATION_TYPE, 'AVG', AVG(T.CPU_TIME_US), 'MAX', MAX(T.CPU_TIME_US), 'SUM', SUM(T.CPU_TIME_US)) / 1000 / 1000, 10, 2), 10) CPU_TIME_S,
    MAP(MIN(T.BLK_THREAD), TO_VARCHAR(MAX(T.BLK_THREAD)), TO_VARCHAR(MAX(T.BLK_THREAD)), 'various') BLK_THREAD,
    BI.ORDER_BY
  FROM
  ( SELECT                                      /* Modification section */
      '%' HOST,
      '%' PORT,
      '%' SERVICE_NAME,
      -1 CONN_ID,
      -1 LOG_CONN_ID,
      -1 PAR_CONN_ID,
      '%' DB_USER,
      '%' APP_USER,
      -1 THREAD_ID,
      '%' THREAD_TYPE,
      '%' THREAD_STATE,
      '%' THREAD_METHOD,
      '%' STATEMENT_HASH,
      'X' ONLY_ACTIVE_THREADS,
      'X' EXCLUDE_PHANTOM_THREADS,
      'SUM' AGGREGATION_TYPE,       /* MAX, AVG, SUM */
      'NONE' AGGREGATE_BY,          /* HOST, PORT, SERVICE, CONN_ID, LOG_CONN, PAR_CONN, HASH, DB_USER, APP_USER, THREAD_TYPE, THREAD_STATE, THREAD_METHOD, 
        THREAD_DETAIL, THREAD_ID, CALLER, CALLING, LOCK_NAME and comma separated combinations, NONE for no aggregation */
      'CONNECTION' ORDER_BY         /* THREAD_ID, CONNECTION, THREADS */
    FROM
      DUMMY
  ) BI,
    M_SERVICES S,
  ( SELECT
      HOST,
      PORT,
      CONNECTION_ID CONN_ID,
      STATEMENT_HASH,
      STATEMENT_ID,
      THREAD_ID,
      THREAD_TYPE,
      THREAD_STATE,
      THREAD_METHOD,
      TO_VARCHAR(SUBSTR(THREAD_DETAIL, 1, 5000)) THREAD_DETAIL,
      CALLER,
      CALLING,
      IS_ACTIVE ACTIVE,
      USER_NAME DB_USER,
      APPLICATION_USER_NAME APP_USER,
      DURATION DURATION_MS,
      CPU_TIME_SELF CPU_TIME_US,
      LOCK_OWNER_THREAD_ID BLK_THREAD,
      LOCK_WAIT_NAME LOCK_NAME
    FROM
      M_SERVICE_THREADS
    WHERE
      THREAD_METHOD NOT IN ('stat', 'core/stat')
  ) T LEFT OUTER JOIN
    M_CONNECTIONS C ON
      C.HOST = T.HOST AND
      C.PORT = T.PORT AND
      C.CONNECTION_ID = T.CONN_ID LEFT OUTER JOIN
    M_ACTIVE_STATEMENTS ST ON
      C.HOST = ST.HOST AND
      C.PORT = ST.PORT AND
      C.CONNECTION_ID = ST.CONNECTION_ID AND
      T.STATEMENT_ID = ST.STATEMENT_ID AND
      ST.STATEMENT_STATUS = 'ACTIVE'
  WHERE
    S.HOST LIKE BI.HOST AND
    TO_VARCHAR(S.PORT) LIKE BI.PORT AND
    S.SERVICE_NAME LIKE BI.SERVICE_NAME AND
    T.HOST = S.HOST AND
    T.PORT = S.PORT AND
    T.APP_USER LIKE BI.APP_USER AND
    T.DB_USER LIKE BI.DB_USER AND
    ( BI.ONLY_ACTIVE_THREADS = ' ' OR T.ACTIVE = 'TRUE' ) AND
    ( BI.CONN_ID = -1 OR T.CONN_ID = BI.CONN_ID ) AND
    ( BI.LOG_CONN_ID = -1 OR C.LOGICAL_CONNECTION_ID = BI.LOG_CONN_ID ) AND
    ( BI.THREAD_ID = -1 OR T.THREAD_ID = BI.THREAD_ID ) AND
    T.THREAD_TYPE LIKE BI.THREAD_TYPE AND
    T.THREAD_STATE LIKE BI.THREAD_STATE AND
    T.THREAD_METHOD LIKE BI.THREAD_METHOD AND
    T.STATEMENT_HASH LIKE BI.STATEMENT_HASH AND
    ( BI.EXCLUDE_PHANTOM_THREADS = ' ' OR NOT
      ( T.THREAD_TYPE = 'AgentPingThread'                     AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_NAME = 'DPPeriodicThreadWaitSemaphore'                         OR
        T.THREAD_TYPE = 'BackupMonitor_TransferThread'        AND T.THREAD_STATE = 'Sleeping'                                                                                           OR
        T.THREAD_TYPE = 'ChildIOThreads::ErrorStream'         AND T.THREAD_STATE = 'Running'                                                                                            OR
        T.THREAD_TYPE = 'ChildIOThreads::OutputStream'        AND T.THREAD_STATE = 'Running'                                                                                            OR
        T.THREAD_TYPE = 'Generic'                             AND T.THREAD_STATE = 'Running'                                                                                            OR
        T.THREAD_TYPE = 'IndexingQueue'                       AND T.THREAD_STATE = 'Sleeping'                                                                                           OR
        T.THREAD_TYPE = 'LogRecovery'                         AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_NAME = 'LogRecoveryPointInTimeQueue'                           OR
        T.THREAD_TYPE = 'MaintenanceThread'                   AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_NAME = 'DPPeriodicThreadWaitSemaphore'                         OR
        T.THREAD_TYPE = 'Native'                              AND T.THREAD_DETAIL LIKE '%sysv_open_semaphore%'                                                                          OR
        T.THREAD_TYPE = 'PostCommitExecutor'                  AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_NAME = 'RegularTaskQueueCV'                                    OR
        T.THREAD_TYPE = 'PriPostCommitExecutor'               AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_NAME = 'PrioritizedTaskQueueCV'                                OR
        T.THREAD_TYPE = 'PushBufferIntoReplayThread'          AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_NAME = 'system replication: push buffer into replay semaphore' OR
        T.THREAD_TYPE = 'SecondarySlaveLogPositionSendThread' AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_NAME = 'system replication: slave log position send semaphore' OR
        T.THREAD_TYPE = 'StatsThread'                         AND T.THREAD_STATE = 'ConditionalVariable Wait' AND T.LOCK_NAME = 'DPStatsThreadCond'                                     OR
        T.THREAD_TYPE = 'SystemReplicationAsyncLogSender'     AND T.THREAD_STATE = 'Semaphore Wait'           AND T.LOCK_NAME = 'system replication: AsyncLogBufferHandlerQueueSem'
      )
    )
  GROUP BY
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')          != 0 THEN T.HOST                               ELSE MAP(BI.HOST, '%', 'any', BI.HOST)                          END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')          != 0 THEN TO_VARCHAR(T.PORT)                   ELSE MAP(BI.PORT, '%', 'any', BI.PORT)                          END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SERVICE')       != 0 THEN S.SERVICE_NAME                       ELSE MAP(BI.SERVICE_NAME, '%', 'any', BI.SERVICE_NAME)          END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CONN_ID')       != 0 THEN TO_VARCHAR(T.CONN_ID)                ELSE MAP(BI.CONN_ID, -1, 'any', TO_VARCHAR(BI.CONN_ID))         END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'LOG_CONN')      != 0 THEN TO_VARCHAR(C.LOGICAL_CONNECTION_ID)  ELSE MAP(BI.LOG_CONN_ID, -1, 'any', TO_VARCHAR(BI.LOG_CONN_ID)) END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PAR_CONN')      != 0 THEN TO_VARCHAR(C.PARENT_CONNECTION_ID)   ELSE MAP(BI.PAR_CONN_ID, -1, 'any', TO_VARCHAR(BI.PAR_CONN_ID)) END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HASH')          != 0 THEN T.STATEMENT_HASH                     ELSE MAP(BI.STATEMENT_HASH, '%', 'any', BI.STATEMENT_HASH)      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HASH')          != 0 THEN SUBSTR(ST.STATEMENT_STRING, 1, 4000) ELSE 'any'                                                      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'DB_USER')       != 0 THEN T.DB_USER                            ELSE MAP(BI.DB_USER, '%', 'any', BI.DB_USER)                    END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'APP_USER')      != 0 THEN T.APP_USER                           ELSE MAP(BI.APP_USER, '%', 'any', BI.APP_USER)                  END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_TYPE')   != 0 THEN T.THREAD_TYPE                        ELSE 'any'                                                      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_STATE')  != 0 THEN T.THREAD_STATE                       ELSE 'any'                                                      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_METHOD') != 0 THEN T.THREAD_METHOD                      ELSE 'any'                                                      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_DETAIL') != 0 THEN T.THREAD_DETAIL                      ELSE 'any'                                                      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_ID')     != 0 THEN TO_VARCHAR(T.THREAD_ID)              ELSE 'any'                                                      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CALLER')        != 0 THEN T.CALLER                             ELSE 'any'                                                      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CALLING')       != 0 THEN T.CALLING                            ELSE 'any'                                                      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'LOCK_NAME')     != 0 THEN T.LOCK_NAME                          ELSE 'any'                                                      END,
    BI.ORDER_BY,
    BI.AGGREGATION_TYPE
)
ORDER BY
  MAP(ORDER_BY, 'THREAD_ID',   THREAD_ID, 'CONNECTION', LOG_CONN_ID, 'any'),
  MAP(ORDER_BY, 'CONNECTION', CONN_ID),
  MAP(ORDER_BY, 'THREADS', NUM) DESC,
  THREAD_ID,
  LOG_CONN_ID,
  PAR_CONN_ID,
  CONN_ID

