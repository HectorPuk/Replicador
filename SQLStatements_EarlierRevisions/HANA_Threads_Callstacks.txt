SELECT
/* 

[NAME]

- HANA_Threads_Callstacks

[DESCRIPTION]

- Thread callstacks

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]


[VALID FOR]

- Revisions:              all
- Statistics server type: all

[SQL COMMAND VERSION]

- 2015/03/24:  1.0 (initial version)
- 2015/09/19:  1.1 (CONN_ID included)

[INVOLVED TABLES]

- M_SERVICE_THREAD_CALLSTACKS
- M_SERVICE_THREADS

[INPUT PARAMETERS]

- HOST

  Host name

  'saphana01'     --> Specic host saphana01
  'saphana%'      --> All hosts starting with saphana
  '%'             --> All hosts

- PORT

  Port number

  '30007'         --> Port 30007
  '%03'           --> All ports ending with '03'
  '%'             --> No restriction to ports

- SERVICE_NAME

  Service name

  'indexserver'   --> Specific service indexserver
  '%server'       --> All services ending with 'server'
  '%'             --> All services  

- CONN_ID

  Connection ID

  330655          --> Connection ID 330655
  -1              --> No connection ID restriction

- THREAD_ID

  Thread identifier

  4567            --> Thread 4567
  -1              --> No thread identifier restriction

- THREAD_TYPE

  Type of thread (e.g. 'SqlExecutor', 'JobWorker' or 'MergedogMonitor')

  'SqlExecutor'   --> Threads with type 'SqlExecutor'
  '%'             --> No thread type restriction

- THREAD_STATE

  State of thread (e.g. e.g. 'Running', 'Network Read' or 'Semaphore Wait')

  'Running'       --> Threads with state 'Running'
  '%'             --> No thread state restriction

- THREAD_METHOD

  Thread method

  'aggregate'     --> Threads with method 'aggregate'
  '%'             --> No thread state restriction

- THREAD_DETAIL

  Thread detail information (e.g. SQL text)

  '%insert%'      --> Only thread details containing 'insert'
  '%'             --> No thread detail restriction

- LOCK_NAME

  Lock wait name

  '%Mutex%'       --> Restrict result to lock names containing "Mutex"
  '%'             --> No restriction related to lock name

- MAX_CALL_LEN

  Maximum length of call information in output (longer values are truncated)

  40              --> Limit length of call information to 40
  -1              --> No restriction related to call length

- ONLY_ACTIVE_THREADS

  Possibility to restrict output to active threads

  'X'             --> Only call stacks for active threads are shown
  ' '             --> No restriction in terms of call stacks

- IGNORE_OWN_THREADS

  Possibility to exclude threads related to own connection

  'X'             --> Only show threads not belonging to own connection
  ' '             --> Show all threads

- SHORT_CALLS

  Possibility to activate a reduced output of call information

  'X'             --> Display only the main procedure
  ' '             --> Display complete call information

- AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'CALLSTACK'     --> Aggregation by callstack
  'HOST, PORT'    --> Aggregation by host and port
  'NONE'          --> No aggregation

[OUTPUT PARAMETERS]

- HOST:          Host name
- PORT:          Port
- SERVICE:       Service name
- THREAD_ID:     Thread ID
- THREAD_STATE:  Thread state
- THREAD_TYPE:   Thread type
- THREAD_METHOD: Thread method
- THREAD_DETAIL: Thread detail (e.g. SQL text)
- LOCK_NAME:     Lock wait name
- NUM:           Number of threads (1 if no aggregation is done)
- PERCENT:       Percentage of threads compared to overall number of threads
- CALL_<n>:      Call information for level <n>

[EXAMPLE OUTPUT]

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|THREAD_TYPE  |THREAD_STATE            |THREADS|PERCENT|CALL_1                                                        |CALL_2                                                                                                  |CALL_3                                                                                                  |CALL_4                                                                                                 |
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|SqlExecutor  |Running                 |     34|  49.27|UnifiedTable::DictionaryStorage::TemporaryValueBuffer::reserve|ltt::vector<int>::insertOverflow_                                                                       |AttributeEngine::idattribute::IdValuesBase<AttributeEngine::idattribute::IdBlockValues>::searchDocuments|AttributeEngine::idattribute::IdAttribute<AttributeEngine::idattribute::IdBlockValues>::searchDocuments|
|SqlExecutor  |Running                 |     20|  28.98|ltt::vector<int>::push_back                                   |AttributeEngine::idattribute::IdValuesBase<AttributeEngine::idattribute::IdBlockValues>::searchDocuments|AttributeEngine::idattribute::IdAttribute<AttributeEngine::idattribute::IdBlockValues>::searchDocuments |AttributeEngine::AttributeApi::searchDocuments                                                         |
|SqlExecutor  |Running                 |      5|   7.24|AttributeEngine::idattribute::BlockHandle::uncompress         |AttributeEngine::idattribute::IdBlockValuesIterator::readNext                                           |AttributeEngine::idattribute::IdValuesBase<AttributeEngine::idattribute::IdBlockValues>::searchDocuments|AttributeEngine::idattribute::IdAttribute<AttributeEngine::idattribute::IdBlockValues>::searchDocuments|
|SqlExecutor  |Running                 |      3|   4.34|AttributeEngine::idattribute::IdBlockValuesIterator::readNext |AttributeEngine::idattribute::IdValuesBase<AttributeEngine::idattribute::IdBlockValues>::searchDocuments|AttributeEngine::idattribute::IdAttribute<AttributeEngine::idattribute::IdBlockValues>::searchDocuments |AttributeEngine::AttributeApi::searchDocuments                                                         |
|Request      |Running                 |      2|   2.89|syscall+0x15                                                  |Synchronization::Semaphore::timedWait                                                                   |TrexThreads::PoolThread::run                                                                            |TrexThreads::PoolThread::run                                                                           |
|SqlExecutor  |Semaphore Wait          |      1|   1.44|syscall+0x15                                                  |Synchronization::BinarySemaphore::timedWait                                                             |TrexSync::Event::waitFor                                                                                |TrexThreads::Thread::join                                                                              |
|SqlExecutor  |ConditionalVariable Wait|      1|   1.44|syscall+0x15                                                  |Synchronization::CondVariable::timedWait                                                                |ptime::Transaction::tryToDelegateThrAndTimedWait                                                        |TrexStore::SyncQueue::wait                                                                             |
|RemoteService|Network Read            |      1|   1.44|syscall+0x15                                                  |Synchronization::Semaphore::timedWait                                                                   |TrexThreads::PoolThread::run                                                                            |TrexThreads::PoolThread::run                                                                           |
|SqlExecutor  |Running                 |      1|   1.44|void ltt::impl::introsortLoopAux<int*, long, ltt::less<int> > |void ltt::impl::introsortLoopAux<int*, long, ltt::less<int> >                                           |void ltt::impl::introsortLoopAux<int*, long, ltt::less<int> >                                           |void ltt::impl::introsortLoopAux<int*, long, ltt::less<int> >                                          |
|SqlExecutor  |Running                 |      1|   1.44|void ltt::impl::introsortLoopAux<int*, long, ltt::less<int> > |void ltt::impl::introsortLoopAux<int*, long, ltt::less<int> >                                           |void ltt::impl::introsortLoopAux<int*, long, ltt::less<int> >                                           |void ltt::sort<int*, ltt::less<int> >                                                                  |
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*/

  TO_VARCHAR(CURRENT_TIMESTAMP, 'YYYY/MM/DD') HOST,
  TO_VARCHAR(CURRENT_TIMESTAMP, 'HH24:MI:SS') PORT,
  '' SERVICE,
  '' CONN_ID,
  '' THREAD_ID,
  '' THREAD_STATE,
  '' THREAD_TYPE,
  '' THREAD_METHOD,
  '' THREAD_DETAIL,
  '' LOCK_NAME,
  '' NUM,
  '' PERCENT,
  '' CALL_1,
  '' CALL_2,
  '' CALL_3,
  '' CALL_4,
  '' CALL_5,
  '' CALL_6,
  '' CALL_7,
  '' CALL_8,
  '' CALL_9,
  '' CALL_10,
  '' CALL_11,
  '' CALL_12,
  '' CALL_13,
  '' CALL_14,
  '' CALL_15,
  '' CALL_16
FROM 
  DUMMY
UNION ALL
SELECT
  '' HOST,
  '' PORT,
  '' SERVICE,
  '' CONN_ID,
  '' THREAD_ID,
  '' THREAD_STATE,
  '' THREAD_TYPE,
  '' THREAD_METHOD,
  '' THREAD_DETAIL,
  '' LOCK_NAME,
  '' NUM,
  '' PERCENT,
  '' CALL_1,
  '' CALL_2,
  '' CALL_3,
  '' CALL_4,
  '' CALL_5,
  '' CALL_6,
  '' CALL_7,
  '' CALL_8,
  '' CALL_9,
  '' CALL_10,
  '' CALL_11,
  '' CALL_12,
  '' CALL_13,
  '' CALL_14,
  '' CALL_15,
  '' CALL_16
FROM 
  DUMMY
UNION ALL (
SELECT
  HOST,
  PORT,
  SERVICE_NAME SERVICE,
  CONN_ID,
  THREAD_ID,
  THREAD_STATE,
  THREAD_TYPE,
  THREAD_METHOD,
  THREAD_DETAIL,
  LOCK_NAME,
  LPAD(SUM(THREADS), 3) NUM,
  LPAD(TO_DECIMAL(SUM(PERCENT), 10, 2), 7) PERCENT,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_1, '('), 0, CALL_1, SUBSTR_BEFORE(CALL_1,  '(')), CALL_1) CALL_1,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_2, '('), 0, CALL_2, SUBSTR_BEFORE(CALL_2,  '(')), CALL_2) CALL_2,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_3, '('), 0, CALL_3, SUBSTR_BEFORE(CALL_3,  '(')), CALL_3) CALL_3,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_4, '('), 0, CALL_4, SUBSTR_BEFORE(CALL_4,  '(')), CALL_4) CALL_4,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_5, '('), 0, CALL_5, SUBSTR_BEFORE(CALL_5,  '(')), CALL_5) CALL_5,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_6, '('), 0, CALL_6, SUBSTR_BEFORE(CALL_6,  '(')), CALL_6) CALL_6,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_7, '('), 0, CALL_7, SUBSTR_BEFORE(CALL_7,  '(')), CALL_7) CALL_7,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_8, '('), 0, CALL_8, SUBSTR_BEFORE(CALL_8,  '(')), CALL_8) CALL_8,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_9, '('), 0, CALL_9, SUBSTR_BEFORE(CALL_9,  '(')), CALL_9) CALL_9,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_10, '('), 0, CALL_10, SUBSTR_BEFORE(CALL_10,  '(')), CALL_10) CALL_10,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_11, '('), 0, CALL_11, SUBSTR_BEFORE(CALL_11,  '(')), CALL_11) CALL_11,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_12, '('), 0, CALL_12, SUBSTR_BEFORE(CALL_12,  '(')), CALL_12) CALL_12,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_13, '('), 0, CALL_13, SUBSTR_BEFORE(CALL_13,  '(')), CALL_13) CALL_13,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_14, '('), 0, CALL_14, SUBSTR_BEFORE(CALL_14,  '(')), CALL_14) CALL_14,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_15, '('), 0, CALL_15, SUBSTR_BEFORE(CALL_15,  '(')), CALL_15) CALL_15,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_16, '('), 0, CALL_16, SUBSTR_BEFORE(CALL_16,  '(')), CALL_16) CALL_16
FROM
( SELECT
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')          != 0 THEN T.HOST                         ELSE MAP(BI.HOST,          '%', 'any', BI.HOST)               END HOST,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')          != 0 THEN TO_VARCHAR(T.PORT)                ELSE MAP(BI.PORT,          '%', 'any', BI.PORT)               END PORT,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SERVICE')       != 0 THEN S.SERVICE_NAME                 ELSE MAP(BI.SERVICE_NAME,  '%', 'any', BI.SERVICE_NAME)       END SERVICE_NAME,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CONN_ID')       != 0 THEN TO_VARCHAR(T.CONNECTION_ID)       ELSE MAP(BI.CONN_ID,        -1, 'any', TO_VARCHAR(BI.CONN_ID))   END CONN_ID,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_ID')     != 0 THEN TO_VARCHAR(T.THREAD_ID)           ELSE MAP(BI.THREAD_ID,      -1, 'any', TO_VARCHAR(BI.THREAD_ID)) END THREAD_ID,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_STATE')  != 0 THEN T.THREAD_STATE                 ELSE MAP(BI.THREAD_STATE,  '%', 'any', BI.THREAD_STATE)       END THREAD_STATE,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_TYPE')   != 0 THEN T.THREAD_TYPE                  ELSE MAP(BI.THREAD_TYPE,   '%', 'any', BI.THREAD_TYPE)        END THREAD_TYPE,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_METHOD') != 0 THEN T.THREAD_METHOD                ELSE MAP(BI.THREAD_METHOD, '%', 'any', BI.THREAD_METHOD)      END THREAD_METHOD,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_DETAIL') != 0 THEN SUBSTR(T.THREAD_DETAIL, 1, 80) ELSE MAP(BI.THREAD_DETAIL, '%', 'any', BI.THREAD_DETAIL)      END THREAD_DETAIL,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'LOCK_NAME')     != 0 THEN T.LOCK_WAIT_NAME               ELSE MAP(BI.LOCK_NAME,     '%', 'any', BI.LOCK_NAME)          END LOCK_NAME,
    COUNT(*) THREADS,
    COUNT(*) / SUM(COUNT(*)) OVER () * 100 PERCENT,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_1,  SUBSTR(TC.CALL_1,  1, BI.MAX_CALL_LEN)) CALL_1,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_2,  SUBSTR(TC.CALL_2,  1, BI.MAX_CALL_LEN)) CALL_2,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_3,  SUBSTR(TC.CALL_3,  1, BI.MAX_CALL_LEN)) CALL_3,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_4,  SUBSTR(TC.CALL_4,  1, BI.MAX_CALL_LEN)) CALL_4,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_5,  SUBSTR(TC.CALL_5,  1, BI.MAX_CALL_LEN)) CALL_5,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_6,  SUBSTR(TC.CALL_6,  1, BI.MAX_CALL_LEN)) CALL_6,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_7,  SUBSTR(TC.CALL_7,  1, BI.MAX_CALL_LEN)) CALL_7,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_8,  SUBSTR(TC.CALL_8,  1, BI.MAX_CALL_LEN)) CALL_8,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_9,  SUBSTR(TC.CALL_9,  1, BI.MAX_CALL_LEN)) CALL_9,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_10, SUBSTR(TC.CALL_10, 1, BI.MAX_CALL_LEN)) CALL_10,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_11, SUBSTR(TC.CALL_11, 1, BI.MAX_CALL_LEN)) CALL_11,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_12, SUBSTR(TC.CALL_12, 1, BI.MAX_CALL_LEN)) CALL_12,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_13, SUBSTR(TC.CALL_13, 1, BI.MAX_CALL_LEN)) CALL_13,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_14, SUBSTR(TC.CALL_14, 1, BI.MAX_CALL_LEN)) CALL_14,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_15, SUBSTR(TC.CALL_15, 1, BI.MAX_CALL_LEN)) CALL_15,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_16, SUBSTR(TC.CALL_16, 1, BI.MAX_CALL_LEN)) CALL_16,
    BI.SHORT_CALLS
  FROM
  ( SELECT                     /* Modification section */
      '%' HOST,
      '%' PORT,
      '%' SERVICE_NAME,
      -1 CONN_ID,
      -1 THREAD_ID,
      '%' THREAD_TYPE,
      '%' THREAD_STATE,
      '%' THREAD_METHOD,
      '%' THREAD_DETAIL,
      '%' LOCK_NAME,
      80 MAX_CALL_LEN,
      'X' ONLY_ACTIVE_THREADS,
      'X' IGNORE_OWN_THREADS,
      'X' SHORT_CALLS,
      'CONN_ID, THREAD_STATE, THREAD_TYPE, THREAD_METHOD, THREAD_DETAIL, LOCK_NAME, CALLSTACK' AGGREGATE_BY     /* HOST, PORT, SERVICE, CONN_ID, THREAD_ID, THREAD_STATE, THREAD_TYPE, THREAD_METHOD, THREAD_DETAIL, LOCK_NAME, CALLSTACK or comma separated combinations, NONE for no aggregation */
    FROM
      DUMMY
  ) BI,
    M_SERVICES S,
  ( SELECT
      HOST,
      PORT,
      CONNECTION_ID,
      THREAD_ID,
      THREAD_STATE,
      CASE
        WHEN THREAD_TYPE LIKE 'JobWrk%' THEN 'JobWorker'
        ELSE THREAD_TYPE
      END THREAD_TYPE,
      CASE 
        WHEN THREAD_METHOD LIKE 'GCJob%' THEN 'GCJob' 
        ELSE THREAD_METHOD 
      END THREAD_METHOD,
      THREAD_DETAIL,
      LOCK_WAIT_NAME,
      IS_ACTIVE
    FROM
      M_SERVICE_THREADS 
  ) T,
  ( SELECT
      HOST,
      PORT,
      THREAD_ID,
      STRING_AGG(FRAME_NAME, '') CALLSTACK_CONCAT,
      MAX(MAP(FRAME_LEVEL,  1, FRAME_NAME, '')) CALL_1,
      MAX(MAP(FRAME_LEVEL,  2, FRAME_NAME, '')) CALL_2,
      MAX(MAP(FRAME_LEVEL,  3, FRAME_NAME, '')) CALL_3,
      MAX(MAP(FRAME_LEVEL,  4, FRAME_NAME, '')) CALL_4,
      MAX(MAP(FRAME_LEVEL,  5, FRAME_NAME, '')) CALL_5,
      MAX(MAP(FRAME_LEVEL,  6, FRAME_NAME, '')) CALL_6,
      MAX(MAP(FRAME_LEVEL,  7, FRAME_NAME, '')) CALL_7,
      MAX(MAP(FRAME_LEVEL,  8, FRAME_NAME, '')) CALL_8,
      MAX(MAP(FRAME_LEVEL,  9, FRAME_NAME, '')) CALL_9,
      MAX(MAP(FRAME_LEVEL, 10, FRAME_NAME, '')) CALL_10,
      MAX(MAP(FRAME_LEVEL, 11, FRAME_NAME, '')) CALL_11,
      MAX(MAP(FRAME_LEVEL, 12, FRAME_NAME, '')) CALL_12,
      MAX(MAP(FRAME_LEVEL, 13, FRAME_NAME, '')) CALL_13,
      MAX(MAP(FRAME_LEVEL, 14, FRAME_NAME, '')) CALL_14,
      MAX(MAP(FRAME_LEVEL, 15, FRAME_NAME, '')) CALL_15,
      MAX(MAP(FRAME_LEVEL, 16, FRAME_NAME, '')) CALL_16
    FROM
      M_SERVICE_THREAD_CALLSTACKS
    GROUP BY
      HOST,
      PORT,
      THREAD_ID
  ) TC
  WHERE
    S.HOST LIKE BI.HOST AND
    TO_VARCHAR(S.PORT) LIKE BI.PORT AND
    S.SERVICE_NAME LIKE BI.SERVICE_NAME AND
    TC.HOST = S.HOST AND
    TC.PORT = S.PORT AND
    ( BI.CONN_ID = -1 OR BI.CONN_ID = T.CONNECTION_ID ) AND
    ( BI.THREAD_ID = -1 OR BI.THREAD_ID = TC.THREAD_ID ) AND
    T.HOST = TC.HOST AND
    T.PORT = TC.PORT AND
    T.THREAD_ID = TC.THREAD_ID AND
    T.THREAD_TYPE LIKE BI.THREAD_TYPE AND
    T.THREAD_STATE LIKE BI.THREAD_STATE AND
    T.THREAD_METHOD LIKE BI.THREAD_METHOD AND
    T.THREAD_DETAIL LIKE BI.THREAD_DETAIL AND
    IFNULL(T.LOCK_WAIT_NAME, '') LIKE BI.LOCK_NAME AND
    ( BI.ONLY_ACTIVE_THREADS = ' ' OR T.IS_ACTIVE = 'TRUE' ) AND
    ( BI.IGNORE_OWN_THREADS = ' ' OR T.CONNECTION_ID != CURRENT_CONNECTION )
  GROUP BY
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')          != 0 THEN T.HOST                         ELSE MAP(BI.HOST,          '%', 'any', BI.HOST)               END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')          != 0 THEN TO_VARCHAR(T.PORT)                ELSE MAP(BI.PORT,          '%', 'any', BI.PORT)               END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'SERVICE')       != 0 THEN S.SERVICE_NAME                 ELSE MAP(BI.SERVICE_NAME,  '%', 'any', BI.SERVICE_NAME)       END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'CONN_ID')       != 0 THEN TO_VARCHAR(T.CONNECTION_ID)       ELSE MAP(BI.CONN_ID,        -1, 'any', TO_VARCHAR(BI.CONN_ID))   END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_ID')     != 0 THEN TO_VARCHAR(T.THREAD_ID)           ELSE MAP(BI.THREAD_ID,      -1, 'any', TO_VARCHAR(BI.THREAD_ID)) END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_STATE')  != 0 THEN T.THREAD_STATE                 ELSE MAP(BI.THREAD_STATE,  '%', 'any', BI.THREAD_STATE)       END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_TYPE')   != 0 THEN T.THREAD_TYPE                  ELSE MAP(BI.THREAD_TYPE,   '%', 'any', BI.THREAD_TYPE)        END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_METHOD') != 0 THEN T.THREAD_METHOD                ELSE MAP(BI.THREAD_METHOD, '%', 'any', BI.THREAD_METHOD)      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'THREAD_DETAIL') != 0 THEN SUBSTR(T.THREAD_DETAIL, 1, 80) ELSE MAP(BI.THREAD_DETAIL, '%', 'any', BI.THREAD_DETAIL)      END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'LOCK_NAME')     != 0 THEN T.LOCK_WAIT_NAME               ELSE MAP(BI.LOCK_NAME,     '%', 'any', BI.LOCK_NAME)          END,
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_1,  SUBSTR(TC.CALL_1,  1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_2,  SUBSTR(TC.CALL_2,  1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_3,  SUBSTR(TC.CALL_3,  1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_4,  SUBSTR(TC.CALL_4,  1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_5,  SUBSTR(TC.CALL_5,  1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_6,  SUBSTR(TC.CALL_6,  1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_7,  SUBSTR(TC.CALL_7,  1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_8,  SUBSTR(TC.CALL_8,  1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_9,  SUBSTR(TC.CALL_9,  1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_10, SUBSTR(TC.CALL_10, 1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_11, SUBSTR(TC.CALL_11, 1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_12, SUBSTR(TC.CALL_12, 1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_13, SUBSTR(TC.CALL_13, 1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_14, SUBSTR(TC.CALL_14, 1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_15, SUBSTR(TC.CALL_15, 1, BI.MAX_CALL_LEN)),
    MAP(BI.MAX_CALL_LEN, -1, TC.CALL_16, SUBSTR(TC.CALL_16, 1, BI.MAX_CALL_LEN)),
    BI.SHORT_CALLS
)
GROUP BY
  HOST,
  PORT,
  SERVICE_NAME,
  CONN_ID,
  THREAD_ID,
  THREAD_TYPE,
  THREAD_STATE,
  THREAD_METHOD,
  THREAD_DETAIL,
  LOCK_NAME,
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_1, '('), 0, CALL_1, SUBSTR_BEFORE(CALL_1,  '(')), CALL_1),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_2, '('), 0, CALL_2, SUBSTR_BEFORE(CALL_2,  '(')), CALL_2),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_3, '('), 0, CALL_3, SUBSTR_BEFORE(CALL_3,  '(')), CALL_3),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_4, '('), 0, CALL_4, SUBSTR_BEFORE(CALL_4,  '(')), CALL_4),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_5, '('), 0, CALL_5, SUBSTR_BEFORE(CALL_5,  '(')), CALL_5),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_6, '('), 0, CALL_6, SUBSTR_BEFORE(CALL_6,  '(')), CALL_6),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_7, '('), 0, CALL_7, SUBSTR_BEFORE(CALL_7,  '(')), CALL_7),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_8, '('), 0, CALL_8, SUBSTR_BEFORE(CALL_8,  '(')), CALL_8),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_9, '('), 0, CALL_9, SUBSTR_BEFORE(CALL_9,  '(')), CALL_9),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_10, '('), 0, CALL_10, SUBSTR_BEFORE(CALL_10,  '(')), CALL_10),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_11, '('), 0, CALL_11, SUBSTR_BEFORE(CALL_11,  '(')), CALL_11),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_12, '('), 0, CALL_12, SUBSTR_BEFORE(CALL_12,  '(')), CALL_12),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_13, '('), 0, CALL_13, SUBSTR_BEFORE(CALL_13,  '(')), CALL_13),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_14, '('), 0, CALL_14, SUBSTR_BEFORE(CALL_14,  '(')), CALL_14),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_15, '('), 0, CALL_15, SUBSTR_BEFORE(CALL_15,  '(')), CALL_15),
  MAP(SHORT_CALLS, 'X', MAP(INSTR(CALL_16, '('), 0, CALL_16, SUBSTR_BEFORE(CALL_16,  '(')), CALL_16)
ORDER BY
  NUM DESC,
  HOST,
  PORT,
  CONN_ID,
  THREAD_ID,
  CALL_1,
  CALL_2,
  CALL_3,
  CALL_4,
  CALL_5,
  CALL_6,
  CALL_7,
  CALL_8,
  CALL_9,
  CALL_10,
  CALL_11,
  CALL_12,
  CALL_13,
  CALL_14,
  CALL_15,
  CALL_16
)
